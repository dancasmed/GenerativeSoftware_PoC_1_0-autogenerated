{
  "description": "A module that calculates Body Mass Index (BMI) using metric or imperial units. It validates user inputs, computes BMI, categorizes results, and provides recommendations. Each session is saved to a JSON file containing all inputs and results.",
  "source_code": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\n\npublic class BMICalculatorModule : IGeneratedModule\n{\n    public string Name { get; set; } = \u0022BMI Calculator Module\u0022;\n\n    public bool Main(string dataFolder)\n    {\n        Directory.CreateDirectory(dataFolder);\n\n        UserSession session = new UserSession\n        {\n            UserId = Guid.NewGuid().ToString(),\n            Timestamp = DateTime.Now\n        };\n\n        bool continueLoop = true;\n        while (continueLoop)\n        {\n            string units = \u0022\u0022;\n            while (true)\n            {\n                Console.WriteLine(\u0022Choose units (metric/imperial):\u0022);\n                units = Console.ReadLine().Trim().ToLower();\n                if (units == \u0022metric\u0022 || units == \u0022imperial\u0022)\n                    break;\n                Console.WriteLine(\u0022Invalid unit. Please enter \u0027metric\u0027 or \u0027imperial\u0027.\u0022);\n            }\n\n            float height = 0;\n            float weight = 0;\n\n            if (units == \u0022metric\u0022)\n            {\n                while (true)\n                {\n                    Console.WriteLine(\u0022Enter height in centimeters:\u0022);\n                    string heightInput = Console.ReadLine();\n                    if (float.TryParse(heightInput, out height) \u0026\u0026 height \u003E 50 \u0026\u0026 height \u003C= 300)\n                    {\n                        break;\n                    }\n                    Console.WriteLine(\u0022Invalid height. Please enter a positive number between 50 and 300 cm.\u0022);\n                }\n\n                while (true)\n                {\n                    Console.WriteLine(\u0022Enter weight in kilograms:\u0022);\n                    string weightInput = Console.ReadLine();\n                    if (float.TryParse(weightInput, out weight) \u0026\u0026 weight \u003E 20 \u0026\u0026 weight \u003C= 300)\n                    {\n                        break;\n                    }\n                    Console.WriteLine(\u0022Invalid weight. Please enter a positive number between 20 and 300 kg.\u0022);\n                }\n            }\n            else\n            {\n                int feet = 0;\n                int inches = 0;\n\n                while (true)\n                {\n                    Console.WriteLine(\u0022Enter feet:\u0022);\n                    string feetInput = Console.ReadLine();\n                    if (int.TryParse(feetInput, out feet) \u0026\u0026 feet \u003E= 4 \u0026\u0026 feet \u003C= 8)\n                        break;\n                    Console.WriteLine(\u0022Invalid feet. Please enter a number between 4 and 8.\u0022);\n                }\n\n                while (true)\n                {\n                    Console.WriteLine(\u0022Enter inches:\u0022);\n                    string inchesInput = Console.ReadLine();\n                    if (int.TryParse(inchesInput, out inches) \u0026\u0026 inches \u003E= 0 \u0026\u0026 inches \u003C 12)\n                        break;\n                    Console.WriteLine(\u0022Invalid inches. Please enter a number between 0 and 11.\u0022);\n                }\n\n                height = (feet * 12) \u002B inches;\n\n                while (true)\n                {\n                    Console.WriteLine(\u0022Enter weight in pounds:\u0022);\n                    string weightInput = Console.ReadLine();\n                    if (float.TryParse(weightInput, out weight) \u0026\u0026 weight \u003E 50 \u0026\u0026 weight \u003C= 660)\n                    {\n                        break;\n                    }\n                    Console.WriteLine(\u0022Invalid weight. Please enter a positive number between 50 and 660 lbs.\u0022);\n                }\n            }\n\n            float bmi = 0;\n            if (units == \u0022metric\u0022)\n            {\n                float heightMeters = height / 100f;\n                bmi = weight / (heightMeters * heightMeters);\n            }\n            else\n            {\n                bmi = (weight * 703) / (height * height);\n            }\n\n            string category;\n            string recommendation;\n\n            if (bmi \u003C 18.5f)\n            {\n                category = \u0022Underweight\u0022;\n                recommendation = \u0022Recommendation: Consult a healthcare provider for gaining weight.\u0022;\n            }\n            else if (bmi \u003C 25)\n            {\n                category = \u0022Normal weight\u0022;\n                recommendation = \u0022Recommendation: Maintain a healthy diet and exercise routine.\u0022;\n            }\n            else if (bmi \u003C 30)\n            {\n                category = \u0022Overweight\u0022;\n                recommendation = \u0022Recommendation: Consider dietary changes and increased physical activity.\u0022;\n            }\n            else\n            {\n                category = \u0022Obese\u0022;\n                recommendation = \u0022Recommendation: Consult a healthcare provider for a weight management plan.\u0022;\n            }\n\n            Console.WriteLine(\u0022BMI: \u0022 \u002B bmi.ToString(\u0022F2\u0022));\n            Console.WriteLine(\u0022Category: \u0022 \u002B category);\n            Console.WriteLine(recommendation);\n\n            UserInput userInput = new UserInput\n            {\n                Height = height,\n                Weight = weight,\n                Units = units\n            };\n\n            BMIResult result = new BMIResult\n            {\n                BMI = bmi,\n                Category = category,\n                Recommendation = recommendation\n            };\n\n            session.Inputs.Add(userInput);\n            session.Results.Add(result);\n\n            Console.WriteLine(\u0022Calculate another BMI? (yes/no)\u0022);\n            string response = Console.ReadLine().Trim().ToLower();\n            if (response != \u0022yes\u0022)\n                continueLoop = false;\n        }\n\n        string sessionJson = JsonSerializer.Serialize(session);\n        string filePath = Path.Combine(dataFolder, \u0022session_\u0022 \u002B session.UserId \u002B \u0022.json\u0022);\n        File.WriteAllText(filePath, sessionJson);\n\n        return true;\n    }\n}\n\npublic class UserInput\n{\n    public float Height { get; set; }\n    public float Weight { get; set; }\n    public string Units { get; set; }\n}\n\npublic class BMIResult\n{\n    public float BMI { get; set; }\n    public string Category { get; set; }\n    public string Recommendation { get; set; }\n}\n\npublic class UserSession\n{\n    public string UserId { get; set; }\n    public List\u003CUserInput\u003E Inputs { get; set; } = new List\u003CUserInput\u003E();\n    public List\u003CBMIResult\u003E Results { get; set; } = new List\u003CBMIResult\u003E();\n    public DateTime Timestamp { get; set; }\n}\n",
  "required_apis": [],
  "required_nugets": []
}