{"id":"a486d5b4-5570-4b35-adc5-43ef618cad15","object":"chat.completion","created":1743797625,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BabyNameGenerator : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Baby Name Generator\\\";\\n    \\n    private List<string> _maleNames = new List<string> { \\\"Liam\\\", \\\"Noah\\\", \\\"Oliver\\\", \\\"Elijah\\\", \\\"James\\\", \\\"William\\\", \\\"Benjamin\\\", \\\"Lucas\\\", \\\"Henry\\\", \\\"Alexander\\\" };\\n    private List<string> _femaleNames = new List<string> { \\\"Emma\\\", \\\"Olivia\\\", \\\"Ava\\\", \\\"Isabella\\\", \\\"Sophia\\\", \\\"Charlotte\\\", \\\"Mia\\\", \\\"Amelia\\\", \\\"Harper\\\", \\\"Evelyn\\\" };\\n    private List<string> _unisexNames = new List<string> { \\\"Taylor\\\", \\\"Jordan\\\", \\\"Alex\\\", \\\"Casey\\\", \\\"Jamie\\\", \\\"Morgan\\\", \\\"Riley\\\", \\\"Avery\\\", \\\"Peyton\\\", \\\"Quinn\\\" };\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Baby Name Generator module is running.\\\");\\n        \\n        try\\n        {\\n            if (!Directory.Exists(dataFolder))\\n            {\\n                Directory.CreateDirectory(dataFolder);\\n            }\\n\\n            var namesDataPath = Path.Combine(dataFolder, \\\"babynames_config.json\\\");\\n            var filterOptions = LoadFilterOptions(namesDataPath);\\n            \\n            if (filterOptions == null)\\n            {\\n                filterOptions = new FilterOptions\\n                {\\n                    Gender = \\\"all\\\",\\n                    StartsWith = \\\"\\\",\\n                    EndsWith = \\\"\\\",\\n                    Contains = \\\"\\\",\\n                    MinLength = 3,\\n                    MaxLength = 10\\n                };\\n                SaveFilterOptions(namesDataPath, filterOptions);\\n            }\\n\\n            var filteredNames = GenerateFilteredNames(filterOptions);\\n            \\n            var outputPath = Path.Combine(dataFolder, \\\"baby_names_list.txt\\\");\\n            File.WriteAllLines(outputPath, filteredNames);\\n            \\n            Console.WriteLine(\\\"Generated \\\" + filteredNames.Count + \\\" baby names and saved to \\\" + outputPath);\\n            \\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private FilterOptions LoadFilterOptions(string filePath)\\n    {\\n        if (!File.Exists(filePath))\\n            return null;\\n            \\n        var json = File.ReadAllText(filePath);\\n        return JsonSerializer.Deserialize<FilterOptions>(json);\\n    }\\n\\n    private void SaveFilterOptions(string filePath, FilterOptions options)\\n    {\\n        var json = JsonSerializer.Serialize(options);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private List<string> GenerateFilteredNames(FilterOptions options)\\n    {\\n        var allNames = new List<string>();\\n        \\n        if (options.Gender == \\\"male\\\" || options.Gender == \\\"all\\\")\\n            allNames.AddRange(_maleNames);\\n            \\n        if (options.Gender == \\\"female\\\" || options.Gender == \\\"all\\\")\\n            allNames.AddRange(_femaleNames);\\n            \\n        if (options.Gender == \\\"unisex\\\" || options.Gender == \\\"all\\\")\\n            allNames.AddRange(_unisexNames);\\n        \\n        var filteredNames = new List<string>();\\n        \\n        foreach (var name in allNames)\\n        {\\n            if (name.Length < options.MinLength || name.Length > options.MaxLength)\\n                continue;\\n                \\n            if (!string.IsNullOrEmpty(options.StartsWith) && !name.StartsWith(options.StartsWith, StringComparison.OrdinalIgnoreCase))\\n                continue;\\n                \\n            if (!string.IsNullOrEmpty(options.EndsWith) && !name.EndsWith(options.EndsWith, StringComparison.OrdinalIgnoreCase))\\n                continue;\\n                \\n            if (!string.IsNullOrEmpty(options.Contains) && !name.Contains(options.Contains, StringComparison.OrdinalIgnoreCase))\\n                continue;\\n                \\n            filteredNames.Add(name);\\n        }\\n        \\n        return filteredNames;\\n    }\\n\\n    private class FilterOptions\\n    {\\n        public string Gender { get; set; } // \\\"male\\\", \\\"female\\\", \\\"unisex\\\", \\\"all\\\"\\n        public string StartsWith { get; set; }\\n        public string EndsWith { get; set; }\\n        public string Contains { get; set; }\\n        public int MinLength { get; set; }\\n        public int MaxLength { get; set; }\\n    }\\n}\",\n  \"name\": \"Baby Name Generator\",\n  \"description\": \"Generates filtered lists of baby names based on gender, length, and text patterns\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"7.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1151,"total_tokens":1671,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}