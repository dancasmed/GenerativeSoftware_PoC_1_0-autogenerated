
{"id":"78eea6e7-29c8-498a-a291-73ba0bf73017","object":"chat.completion","created":1744183510,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BakeryOrderSystem : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Bakery Order System\\\";\\n\\n    private string _ordersFilePath;\\n    private List<Order> _orders;\\n\\n    public BakeryOrderSystem()\\n    {\\n        _orders = new List<Order>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Bakery Order System...\\\");\\n        _ordersFilePath = Path.Combine(dataFolder, \\\"orders.json\\\");\\n\\n        LoadOrders();\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\"\\\\nBakery Order System Menu:\\\");\\n            Console.WriteLine(\\\"1. Add New Order\\\");\\n            Console.WriteLine(\\\"2. View All Orders\\\");\\n            Console.WriteLine(\\\"3. Search Orders\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddNewOrder();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewAllOrders();\\n                    break;\\n                case \\\"3\\\":\\n                    SearchOrders();\\n                    break;\\n                case \\\"4\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveOrders();\\n        Console.WriteLine(\\\"Bakery Order System has been saved. Exiting...\\\");\\n        return true;\\n    }\\n\\n    private void LoadOrders()\\n    {\\n        if (File.Exists(_ordersFilePath))\\n        {\\n            try\\n            {\\n                string json = File.ReadAllText(_ordersFilePath);\\n                _orders = JsonSerializer.Deserialize<List<Order>>(json);\\n                Console.WriteLine(\\\"Previous orders loaded successfully.\\\");\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Error loading orders: \\\" + ex.Message);\\n                _orders = new List<Order>();\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"No previous orders found. Starting with empty order list.\\\");\\n        }\\n    }\\n\\n    private void SaveOrders()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_orders, new JsonSerializerOptions { WriteIndented = true });\\n            File.WriteAllText(_ordersFilePath, json);\\n            Console.WriteLine(\\\"Orders saved successfully.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving orders: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void AddNewOrder()\\n    {\\n        Console.WriteLine(\\\"\\\\nAdd New Order\\\");\\n        Console.Write(\\\"Customer Name: \\\");\\n        string customerName = Console.ReadLine();\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Products:\\\");\\n        Console.WriteLine(\\\"1. Cake\\\");\\n        Console.WriteLine(\\\"2. Pastry\\\");\\n        Console.Write(\\\"Select product type (1-2): \\\");\\n        string productType = Console.ReadLine();\\n\\n        Product product;\\n        if (productType == \\\"1\\\")\\n        {\\n            product = new Cake();\\n        }\\n        else if (productType == \\\"2\\\")\\n        {\\n            product = new Pastry();\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid product type. Order not created.\\\");\\n            return;\\n        }\\n\\n        product.Configure();\\n\\n        Console.Write(\\\"Quantity: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid quantity. Order not created.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Delivery Date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime deliveryDate))\\n        {\\n            Console.WriteLine(\\\"Invalid date format. Using today's date.\\\");\\n            deliveryDate = DateTime.Today;\\n        }\\n\\n        var order = new Order\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            CustomerName = customerName,\\n            Product = product,\\n            Quantity = quantity,\\n            OrderDate = DateTime.Now,\\n            DeliveryDate = deliveryDate,\\n            Status = \\\"Pending\\\"\\n        };\\n\\n        _orders.Add(order);\\n        Console.WriteLine(\\\"Order added successfully!\\\");\\n    }\\n\\n    private void ViewAllOrders()\\n    {\\n        Console.WriteLine(\\\"\\\\nAll Orders:\\\");\\n        if (_orders.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No orders found.\\\");\\n            return;\\n        }\\n\\n        foreach (var order in _orders)\\n        {\\n            DisplayOrderDetails(order);\\n        }\\n    }\\n\\n    private void SearchOrders()\\n    {\\n        Console.WriteLine(\\\"\\\\nSearch Orders\\\");\\n        Console.Write(\\\"Enter customer name or product type to search: \\\");\\n        string searchTerm = Console.ReadLine().ToLower();\\n\\n        var results = _orders.FindAll(o =>\\n            o.CustomerName.ToLower().Contains(searchTerm) ||\\n            o.Product.GetType().Name.ToLower().Contains(searchTerm));\\n\\n        if (results.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No matching orders found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nMatching Orders:\\\");\\n        foreach (var order in results)\\n        {\\n            DisplayOrderDetails(order);\\n        }\\n    }\\n\\n    private void DisplayOrderDetails(Order order)\\n    {\\n        Console.WriteLine(\\\"\\\\nOrder ID: \\\" + order.Id);\\n        Console.WriteLine(\\\"Customer: \\\" + order.CustomerName);\\n        Console.WriteLine(\\\"Product: \\\" + order.Product.GetType().Name);\\n        Console.WriteLine(\\\"Details: \\\" + order.Product.GetDescription());\\n        Console.WriteLine(\\\"Quantity: \\\" + order.Quantity);\\n        Console.WriteLine(\\\"Order Date: \\\" + order.OrderDate.ToString(\\\"yyyy-MM-dd\\\"));\\n        Console.WriteLine(\\\"Delivery Date: \\\" + order.DeliveryDate.ToString(\\\"yyyy-MM-dd\\\"));\\n        Console.WriteLine(\\\"Status: \\\" + order.Status);\\n    }\\n}\\n\\npublic class Order\\n{\\n    public string Id { get; set; }\\n    public string CustomerName { get; set; }\\n    public Product Product { get; set; }\\n    public int Quantity { get; set; }\\n    public DateTime OrderDate { get; set; }\\n    public DateTime DeliveryDate { get; set; }\\n    public string Status { get; set; }\\n}\\n\\npublic abstract class Product\\n{\\n    public abstract void Configure();\\n    public abstract string GetDescription();\\n}\\n\\npublic class Cake : Product\\n{\\n    public string Flavor { get; set; } = \\\"Vanilla\\\";\\n    public string Frosting { get; set; } = \\\"Buttercream\\\";\\n    public List<string> Toppings { get; set; } = new List<string>();\\n    public string Size { get; set; } = \\\"Medium\\\";\\n\\n    public override void Configure()\\n    {\\n        Console.WriteLine(\\\"\\\\nConfiguring Cake:\\\");\\n        Console.Write(\\\"Flavor (Vanilla/Chocolate/Red Velvet): \\\");\\n        string flavorInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(flavorInput))\\n        {\\n            Flavor = flavorInput;\\n        }\\n\\n        Console.Write(\\\"Frosting (Buttercream/Cream Cheese/Fondant): \\\");\\n        string frostingInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(frostingInput))\\n        {\\n            Frosting = frostingInput;\\n        }\\n\\n        Console.WriteLine(\\\"Add toppings (enter one at a time, blank to finish):\\\");\\n        while (true)\\n        {\\n            string topping = Console.ReadLine();\\n            if (string.IsNullOrWhiteSpace(topping)) break;\\n            Toppings.Add(topping);\\n        }\\n\\n        Console.Write(\\\"Size (Small/Medium/Large): \\\");\\n        string sizeInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(sizeInput))\\n        {\\n            Size = sizeInput;\\n        }\\n    }\\n\\n    public override string GetDescription()\\n    {\\n        string description = Size + \\\" \\\" + Flavor + \\\" cake with \\\" + Frosting + \\\" frosting\\\";\\n        if (Toppings.Count > 0)\\n        {\\n            description += \\\" and toppings: \\\" + string.Join(\\\", \\\", Toppings);\\n        }\\n        return description;\\n    }\\n}\\n\\npublic class Pastry : Product\\n{\\n    public string Type { get; set; } = \\\"Croissant\\\";\\n    public string Filling { get; set; } = \\\"None\\\";\\n    public bool Glazed { get; set; } = false;\\n\\n    public override void Configure()\\n    {\\n        Console.WriteLine(\\\"\\\\nConfiguring Pastry:\\\");\\n        Console.Write(\\\"Type (Croissant/Danish/Muffin/Scone): \\\");\\n        string typeInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(typeInput))\\n        {\\n            Type = typeInput;\\n        }\\n\\n        Console.Write(\\\"Filling (None/Chocolate/Fruit/Cream): \\\");\\n        string fillingInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(fillingInput))\\n        {\\n            Filling = fillingInput;\\n        }\\n\\n        Console.Write(\\\"Glazed (Y/N): \\\");\\n        string glazedInput = Console.ReadLine();\\n        Glazed = glazedInput?.ToUpper() == \\\"Y\\\";\\n    }\\n\\n    public override string GetDescription()\\n    {\\n        string description = Type + \\\" pastry\\\";\\n        if (Filling != \\\"None\\\")\\n        {\\n            description += \\\" with \\\" + Filling + \\\" filling\\\";\\n        }\\n        if (Glazed)\\n        {\\n            description += \\\" and glazed\\\";\\n        }\\n        return description;\\n    }\\n}\",\n  \"name\": \"Bakery Order System\",\n  \"description\": \"A console application for managing bakery orders including cakes, pastries, and customizations with persistent storage in JSON format.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":531,"completion_tokens":2482,"total_tokens":3013,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":19},"system_fingerprint":"fp_3d5141a69a_prod0225"}