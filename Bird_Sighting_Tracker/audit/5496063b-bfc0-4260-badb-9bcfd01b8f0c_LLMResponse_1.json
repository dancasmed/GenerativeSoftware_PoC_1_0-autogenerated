{"id":"7def1520-298c-4817-93cf-1e1478aa8b60","object":"chat.completion","created":1743795859,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BirdSightingTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Bird Sighting Tracker\\\";\\n    private string sightingsFilePath;\\n    \\n    public BirdSightingTracker()\\n    {\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Bird Sighting Tracker module is running.\\\");\\n        \\n        sightingsFilePath = Path.Combine(dataFolder, \\\"bird_sightings.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        List<BirdSighting> sightings = LoadSightings();\\n        \\n        bool continueRunning = true;\\n        while (continueRunning)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add new sighting\\\");\\n            Console.WriteLine(\\\"2. View all sightings\\\");\\n            Console.WriteLine(\\\"3. Search sightings by species\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Enter your choice: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddSighting(sightings);\\n                    break;\\n                case \\\"2\\\":\\n                    DisplayAllSightings(sightings);\\n                    break;\\n                case \\\"3\\\":\\n                    SearchBySpecies(sightings);\\n                    break;\\n                case \\\"4\\\":\\n                    continueRunning = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveSightings(sightings);\\n        Console.WriteLine(\\\"Bird sightings saved. Exiting module.\\\");\\n        return true;\\n    }\\n    \\n    private List<BirdSighting> LoadSightings()\\n    {\\n        if (File.Exists(sightingsFilePath))\\n        {\\n            string json = File.ReadAllText(sightingsFilePath);\\n            return JsonSerializer.Deserialize<List<BirdSighting>>(json) ?? new List<BirdSighting>();\\n        }\\n        return new List<BirdSighting>();\\n    }\\n    \\n    private void SaveSightings(List<BirdSighting> sightings)\\n    {\\n        string json = JsonSerializer.Serialize(sightings);\\n        File.WriteAllText(sightingsFilePath, json);\\n    }\\n    \\n    private void AddSighting(List<BirdSighting> sightings)\\n    {\\n        Console.Write(\\\"Enter bird species: \\\");\\n        string species = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter location: \\\");\\n        string location = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter date (yyyy-MM-dd): \\\");\\n        string dateInput = Console.ReadLine();\\n        \\n        if (DateTime.TryParse(dateInput, out DateTime date))\\n        {\\n            sightings.Add(new BirdSighting(species, location, date));\\n            Console.WriteLine(\\\"Sighting added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid date format. Sighting not added.\\\");\\n        }\\n    }\\n    \\n    private void DisplayAllSightings(List<BirdSighting> sightings)\\n    {\\n        if (sightings.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No sightings recorded yet.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nAll Bird Sightings:\\\");\\n        foreach (var sighting in sightings)\\n        {\\n            Console.WriteLine(sighting.ToString());\\n        }\\n    }\\n    \\n    private void SearchBySpecies(List<BirdSighting> sightings)\\n    {\\n        Console.Write(\\\"Enter species to search for: \\\");\\n        string searchTerm = Console.ReadLine();\\n        \\n        var results = sightings.FindAll(s => \\n            s.Species.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));\\n        \\n        if (results.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No sightings found for that species.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"\\\\nMatching Sightings:\\\");\\n            foreach (var sighting in results)\\n            {\\n                Console.WriteLine(sighting.ToString());\\n            }\\n        }\\n    }\\n}\\n\\npublic class BirdSighting\\n{\\n    public string Species { get; set; }\\n    public string Location { get; set; }\\n    public DateTime Date { get; set; }\\n    \\n    public BirdSighting(string species, string location, DateTime date)\\n    {\\n        Species = species;\\n        Location = location;\\n        Date = date;\\n    }\\n    \\n    public override string ToString()\\n    {\\n        return $\\\"{Date:yyyy-MM-dd}: {Species} at {Location}\\\";\\n    }\\n}\",\n  \"name\": \"Bird Sighting Tracker\",\n  \"description\": \"Tracks bird sightings with species, location, and date information. Allows adding new sightings, viewing all records, and searching by species.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1248,"total_tokens":1768,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":72},"system_fingerprint":"fp_3d5141a69a_prod0225"}