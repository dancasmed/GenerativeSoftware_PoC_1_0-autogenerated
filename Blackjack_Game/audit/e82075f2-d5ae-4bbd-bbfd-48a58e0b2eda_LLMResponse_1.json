
{"id":"c72fecad-bd5f-453c-aa70-32daadf4ab2a","object":"chat.completion","created":1743791973,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BlackjackModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Blackjack Game\\\";\\n\\n    private List<string> deck;\\n    private List<string> playerHand;\\n    private List<string> dealerHand;\\n    private Random random;\\n    private string dataFolder;\\n\\n    public BlackjackModule()\\n    {\\n        random = new Random();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        this.dataFolder = dataFolder;\\n        InitializeDeck();\\n        playerHand = new List<string>();\\n        dealerHand = new List<string>();\\n\\n        Console.WriteLine(\\\"Starting Blackjack Game...\\\");\\n        Console.WriteLine(\\\"Dealing initial cards...\\\");\\n\\n        DealInitialCards();\\n        DisplayHands(false);\\n\\n        PlayerTurn();\\n        if (CalculateHandValue(playerHand) > 21)\\n        {\\n            Console.WriteLine(\\\"Player busts! Dealer wins.\\\");\\n            SaveGameResult(false);\\n            return true;\\n        }\\n\\n        DealerTurn();\\n        DisplayHands(true);\\n\\n        int playerValue = CalculateHandValue(playerHand);\\n        int dealerValue = CalculateHandValue(dealerHand);\\n\\n        if (dealerValue > 21)\\n        {\\n            Console.WriteLine(\\\"Dealer busts! Player wins.\\\");\\n            SaveGameResult(true);\\n        }\\n        else if (playerValue > dealerValue)\\n        {\\n            Console.WriteLine(\\\"Player wins!\\\");\\n            SaveGameResult(true);\\n        }\\n        else if (playerValue < dealerValue)\\n        {\\n            Console.WriteLine(\\\"Dealer wins!\\\");\\n            SaveGameResult(false);\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"It's a tie!\\\");\\n        }\\n\\n        return true;\\n    }\\n\\n    private void InitializeDeck()\\n    {\\n        deck = new List<string>();\\n        string[] suits = { \\\"Hearts\\\", \\\"Diamonds\\\", \\\"Clubs\\\", \\\"Spades\\\" };\\n        string[] ranks = { \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\", \\\"8\\\", \\\"9\\\", \\\"10\\\", \\\"Jack\\\", \\\"Queen\\\", \\\"King\\\", \\\"Ace\\\" };\\n\\n        foreach (var suit in suits)\\n        {\\n            foreach (var rank in ranks)\\n            {\\n                deck.Add(rank + \\\" of \\\" + suit);\\n            }\\n        }\\n    }\\n\\n    private void DealInitialCards()\\n    {\\n        playerHand.Add(DrawCard());\\n        dealerHand.Add(DrawCard());\\n        playerHand.Add(DrawCard());\\n        dealerHand.Add(DrawCard());\\n    }\\n\\n    private string DrawCard()\\n    {\\n        int index = random.Next(deck.Count);\\n        string card = deck[index];\\n        deck.RemoveAt(index);\\n        return card;\\n    }\\n\\n    private int CalculateHandValue(List<string> hand)\\n    {\\n        int value = 0;\\n        int aces = 0;\\n\\n        foreach (var card in hand)\\n        {\\n            string rank = card.Split(' ')[0];\\n            if (rank == \\\"Ace\\\")\\n            {\\n                value += 11;\\n                aces++;\\n            }\\n            else if (rank == \\\"Jack\\\" || rank == \\\"Queen\\\" || rank == \\\"King\\\")\\n            {\\n                value += 10;\\n            }\\n            else\\n            {\\n                value += int.Parse(rank);\\n            }\\n        }\\n\\n        while (value > 21 && aces > 0)\\n        {\\n            value -= 10;\\n            aces--;\\n        }\\n\\n        return value;\\n    }\\n\\n    private void PlayerTurn()\\n    {\\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nDo you want to Hit (h) or Stand (s)?\\\");\\n            string input = Console.ReadLine().ToLower();\\n\\n            if (input == \\\"h\\\")\\n            {\\n                playerHand.Add(DrawCard());\\n                DisplayHands(false);\\n                if (CalculateHandValue(playerHand) > 21)\\n                {\\n                    return;\\n                }\\n            }\\n            else if (input == \\\"s\\\")\\n            {\\n                return;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter 'h' or 's'.\\\");\\n            }\\n        }\\n    }\\n\\n    private void DealerTurn()\\n    {\\n        while (CalculateHandValue(dealerHand) < 17)\\n        {\\n            dealerHand.Add(DrawCard());\\n        }\\n    }\\n\\n    private void DisplayHands(bool showDealerHand)\\n    {\\n        Console.WriteLine(\\\"\\\\nPlayer's Hand:\\\");\\n        foreach (var card in playerHand)\\n        {\\n            Console.WriteLine(card);\\n        }\\n        Console.WriteLine(\\\"Total: \\\" + CalculateHandValue(playerHand));\\n\\n        Console.WriteLine(\\\"\\\\nDealer's Hand:\\\");\\n        if (showDealerHand)\\n        {\\n            foreach (var card in dealerHand)\\n            {\\n                Console.WriteLine(card);\\n            }\\n            Console.WriteLine(\\\"Total: \\\" + CalculateHandValue(dealerHand));\\n        }\\n        else\\n        {\\n            Console.WriteLine(dealerHand[0]);\\n            Console.WriteLine(\\\"[Hidden Card]\\\");\\n        }\\n    }\\n\\n    private void SaveGameResult(bool playerWon)\\n    {\\n        try\\n        {\\n            string filePath = Path.Combine(dataFolder, \\\"blackjack_results.json\\\");\\n            var results = new List<GameResult>();\\n\\n            if (File.Exists(filePath))\\n            {\\n                string json = File.ReadAllText(filePath);\\n                results = JsonSerializer.Deserialize<List<GameResult>>(json);\\n            }\\n\\n            results.Add(new GameResult\\n            {\\n                PlayerWon = playerWon,\\n                PlayerScore = CalculateHandValue(playerHand),\\n                DealerScore = CalculateHandValue(dealerHand),\\n                Date = DateTime.Now\\n            });\\n\\n            string newJson = JsonSerializer.Serialize(results);\\n            File.WriteAllText(filePath, newJson);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving game result: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private class GameResult\\n    {\\n        public bool PlayerWon { get; set; }\\n        public int PlayerScore { get; set; }\\n        public int DealerScore { get; set; }\\n        public DateTime Date { get; set; }\\n    }\\n}\",\n  \"name\": \"Blackjack Game\",\n  \"description\": \"A module that simulates a blackjack card game against the computer\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1643,"total_tokens":2165,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}