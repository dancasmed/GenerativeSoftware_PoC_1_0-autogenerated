
{"id":"21d1dee2-34a7-4018-94de-40dedff5f085","object":"chat.completion","created":1743795247,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BlackjackGame : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Blackjack Game\\\";\\n    private List<string> deck;\\n    private List<string> playerHand;\\n    private List<string> dealerHand;\\n    private Random random;\\n    private string dataFolder;\\n\\n    public BlackjackGame()\\n    {\\n        random = new Random();\\n        playerHand = new List<string>();\\n        dealerHand = new List<string>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        this.dataFolder = dataFolder;\\n        Console.WriteLine(\\\"Starting Blackjack Game...\\\");\\n        InitializeDeck();\\n        ShuffleDeck();\\n        DealInitialCards();\\n        PlayPlayerTurn();\\n        if (CalculateHandValue(playerHand) <= 21)\\n        {\\n            PlayDealerTurn();\\n        }\\n        DetermineWinner();\\n        SaveGameResult();\\n        return true;\\n    }\\n\\n    private void InitializeDeck()\\n    {\\n        string[] suits = { \\\"Hearts\\\", \\\"Diamonds\\\", \\\"Clubs\\\", \\\"Spades\\\" };\\n        string[] ranks = { \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\", \\\"8\\\", \\\"9\\\", \\\"10\\\", \\\"Jack\\\", \\\"Queen\\\", \\\"King\\\", \\\"Ace\\\" };\\n        deck = new List<string>();\\n        foreach (var suit in suits)\\n        {\\n            foreach (var rank in ranks)\\n            {\\n                deck.Add(rank + \\\" of \\\" + suit);\\n            }\\n        }\\n    }\\n\\n    private void ShuffleDeck()\\n    {\\n        for (int i = deck.Count - 1; i > 0; i--)\\n        {\\n            int j = random.Next(i + 1);\\n            var temp = deck[i];\\n            deck[i] = deck[j];\\n            deck[j] = temp;\\n        }\\n    }\\n\\n    private void DealInitialCards()\\n    {\\n        playerHand.Add(DrawCard());\\n        dealerHand.Add(DrawCard());\\n        playerHand.Add(DrawCard());\\n        dealerHand.Add(DrawCard());\\n        Console.WriteLine(\\\"Your hand: \\\" + string.Join(\\\", \\\", playerHand) + \\\" (Total: \\\" + CalculateHandValue(playerHand) + \\\")\\\");\\n        Console.WriteLine(\\\"Dealer's hand: \\\" + dealerHand[0] + \\\", [Hidden]\\\");\\n    }\\n\\n    private string DrawCard()\\n    {\\n        if (deck.Count == 0)\\n        {\\n            InitializeDeck();\\n            ShuffleDeck();\\n        }\\n        var card = deck[0];\\n        deck.RemoveAt(0);\\n        return card;\\n    }\\n\\n    private int CalculateHandValue(List<string> hand)\\n    {\\n        int value = 0;\\n        int aces = 0;\\n        foreach (var card in hand)\\n        {\\n            string rank = card.Split(' ')[0];\\n            if (rank == \\\"Jack\\\" || rank == \\\"Queen\\\" || rank == \\\"King\\\")\\n            {\\n                value += 10;\\n            }\\n            else if (rank == \\\"Ace\\\")\\n            {\\n                value += 11;\\n                aces++;\\n            }\\n            else\\n            {\\n                value += int.Parse(rank);\\n            }\\n        }\\n        while (value > 21 && aces > 0)\\n        {\\n            value -= 10;\\n            aces--;\\n        }\\n        return value;\\n    }\\n\\n    private void PlayPlayerTurn()\\n    {\\n        while (true)\\n        {\\n            Console.WriteLine(\\\"Do you want to Hit (H) or Stand (S)?\\\");\\n            string input = Console.ReadLine().Trim().ToUpper();\\n            if (input == \\\"H\\\")\\n            {\\n                playerHand.Add(DrawCard());\\n                Console.WriteLine(\\\"Your hand: \\\" + string.Join(\\\", \\\", playerHand) + \\\" (Total: \\\" + CalculateHandValue(playerHand) + \\\")\\\");\\n                if (CalculateHandValue(playerHand) > 21)\\n                {\\n                    Console.WriteLine(\\\"Bust! You went over 21.\\\");\\n                    break;\\n                }\\n            }\\n            else if (input == \\\"S\\\")\\n            {\\n                break;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter H or S.\\\");\\n            }\\n        }\\n    }\\n\\n    private void PlayDealerTurn()\\n    {\\n        Console.WriteLine(\\\"Dealer's hand: \\\" + string.Join(\\\", \\\", dealerHand) + \\\" (Total: \\\" + CalculateHandValue(dealerHand) + \\\")\\\");\\n        while (CalculateHandValue(dealerHand) < 17)\\n        {\\n            dealerHand.Add(DrawCard());\\n            Console.WriteLine(\\\"Dealer hits: \\\" + dealerHand[dealerHand.Count - 1]);\\n            Console.WriteLine(\\\"Dealer's hand: \\\" + string.Join(\\\", \\\", dealerHand) + \\\" (Total: \\\" + CalculateHandValue(dealerHand) + \\\")\\\");\\n        }\\n        if (CalculateHandValue(dealerHand) > 21)\\n        {\\n            Console.WriteLine(\\\"Dealer busts!\\\");\\n        }\\n    }\\n\\n    private void DetermineWinner()\\n    {\\n        int playerValue = CalculateHandValue(playerHand);\\n        int dealerValue = CalculateHandValue(dealerHand);\\n        Console.WriteLine(\\\"Your total: \\\" + playerValue);\\n        Console.WriteLine(\\\"Dealer's total: \\\" + dealerValue);\\n        if (playerValue > 21)\\n        {\\n            Console.WriteLine(\\\"You busted. Dealer wins!\\\");\\n        }\\n        else if (dealerValue > 21)\\n        {\\n            Console.WriteLine(\\\"Dealer busted. You win!\\\");\\n        }\\n        else if (playerValue > dealerValue)\\n        {\\n            Console.WriteLine(\\\"You win!\\\");\\n        }\\n        else if (playerValue < dealerValue)\\n        {\\n            Console.WriteLine(\\\"Dealer wins!\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"It's a tie!\\\");\\n        }\\n    }\\n\\n    private void SaveGameResult()\\n    {\\n        try\\n        {\\n            string resultPath = Path.Combine(dataFolder, \\\"blackjack_result.json\\\");\\n            var result = new\\n            {\\n                PlayerHand = playerHand,\\n                DealerHand = dealerHand,\\n                PlayerTotal = CalculateHandValue(playerHand),\\n                DealerTotal = CalculateHandValue(dealerHand),\\n                Timestamp = DateTime.Now\\n            };\\n            string json = JsonSerializer.Serialize(result);\\n            File.WriteAllText(resultPath, json);\\n            Console.WriteLine(\\\"Game result saved to \\\" + resultPath);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving game result: \\\" + ex.Message);\\n        }\\n    }\\n}\",\n  \"name\": \"Blackjack Game\",\n  \"description\": \"A console-based Blackjack card game where the player competes against the computer (dealer). The game includes deck shuffling, card dealing, player and dealer turns, and determines the winner based on standard Blackjack rules. Game results are saved to a JSON file in the specified data folder.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1766,"total_tokens":2288,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}