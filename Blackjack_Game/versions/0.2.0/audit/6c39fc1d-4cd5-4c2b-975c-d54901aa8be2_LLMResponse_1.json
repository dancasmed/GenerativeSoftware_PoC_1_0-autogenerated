
{"id":"7eba1f98-0db8-4d23-9968-21a0241c6393","object":"chat.completion","created":1743800174,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BlackjackModule\\n{\\n    public string Name { get; set; } = \\\"Blackjack Game\\\";\\n    private List<Card> deck;\\n    private List<Card> playerHand;\\n    private List<Card> dealerHand;\\n    private Random random;\\n    private string dataFolder;\\n\\n    public BlackjackModule()\\n    {\\n        random = new Random();\\n        deck = new List<Card>();\\n        playerHand = new List<Card>();\\n        dealerHand = new List<Card>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        this.dataFolder = dataFolder;\\n        Console.WriteLine(\\\"Starting Blackjack Game...\\\");\\n        InitializeDeck();\\n        ShuffleDeck();\\n\\n        DealInitialCards();\\n        DisplayHands(false);\\n\\n        PlayerTurn();\\n        if (CalculateHandValue(playerHand) > 21)\\n        {\\n            Console.WriteLine(\\\"Player busts! Dealer wins.\\\");\\n            SaveGameResult(\\\"Dealer wins - Player busts.\\\");\\n            return true;\\n        }\\n\\n        DealerTurn();\\n        DisplayHands(true);\\n\\n        DetermineWinner();\\n        return true;\\n    }\\n\\n    private void InitializeDeck()\\n    {\\n        string[] suits = { \\\"Hearts\\\", \\\"Diamonds\\\", \\\"Clubs\\\", \\\"Spades\\\" };\\n        string[] ranks = { \\\"2\\\", \\\"3\\\", \\\"4\\\", \\\"5\\\", \\\"6\\\", \\\"7\\\", \\\"8\\\", \\\"9\\\", \\\"10\\\", \\\"Jack\\\", \\\"Queen\\\", \\\"King\\\", \\\"Ace\\\" };\\n\\n        foreach (var suit in suits)\\n        {\\n            foreach (var rank in ranks)\\n            {\\n                deck.Add(new Card(suit, rank));\\n            }\\n        }\\n    }\\n\\n    private void ShuffleDeck()\\n    {\\n        for (int i = deck.Count - 1; i > 0; i--)\\n        {\\n            int j = random.Next(i + 1);\\n            Card temp = deck[i];\\n            deck[i] = deck[j];\\n            deck[j] = temp;\\n        }\\n    }\\n\\n    private void DealInitialCards()\\n    {\\n        playerHand.Add(DrawCard());\\n        dealerHand.Add(DrawCard());\\n        playerHand.Add(DrawCard());\\n        dealerHand.Add(DrawCard());\\n    }\\n\\n    private Card DrawCard()\\n    {\\n        if (deck.Count == 0)\\n        {\\n            throw new InvalidOperationException(\\\"Deck is empty\\\");\\n        }\\n\\n        Card card = deck[0];\\n        deck.RemoveAt(0);\\n        return card;\\n    }\\n\\n    private void PlayerTurn()\\n    {\\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nDo you want to hit (h) or stand (s)?\\\");\\n            string input = Console.ReadLine().ToLower();\\n\\n            if (input == \\\"h\\\")\\n            {\\n                playerHand.Add(DrawCard());\\n                DisplayHands(false);\\n\\n                if (CalculateHandValue(playerHand) > 21)\\n                {\\n                    return;\\n                }\\n            }\\n            else if (input == \\\"s\\\")\\n            {\\n                return;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter 'h' or 's'.\\\");\\n            }\\n        }\\n    }\\n\\n    private void DealerTurn()\\n    {\\n        while (CalculateHandValue(dealerHand) < 17)\\n        {\\n            dealerHand.Add(DrawCard());\\n        }\\n    }\\n\\n    private int CalculateHandValue(List<Card> hand)\\n    {\\n        int value = 0;\\n        int aces = 0;\\n\\n        foreach (var card in hand)\\n        {\\n            if (card.Rank == \\\"Ace\\\")\\n            {\\n                aces++;\\n                value += 11;\\n            }\\n            else if (card.Rank == \\\"Jack\\\" || card.Rank == \\\"Queen\\\" || card.Rank == \\\"King\\\")\\n            {\\n                value += 10;\\n            }\\n            else\\n            {\\n                value += int.Parse(card.Rank);\\n            }\\n        }\\n\\n        while (value > 21 && aces > 0)\\n        {\\n            value -= 10;\\n            aces--;\\n        }\\n\\n        return value;\\n    }\\n\\n    private void DisplayHands(bool showDealerCard)\\n    {\\n        Console.WriteLine(\\\"\\\\nDealer's Hand:\\\");\\n        if (showDealerCard)\\n        {\\n            foreach (var card in dealerHand)\\n            {\\n                Console.WriteLine(card);\\n            }\\n            Console.WriteLine(\\\"Total: \\\" + CalculateHandValue(dealerHand));\\n        }\\n        else\\n        {\\n            Console.WriteLine(dealerHand[0]);\\n            Console.WriteLine(\\\"[Hidden Card]\\\");\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nPlayer's Hand:\\\");\\n        foreach (var card in playerHand)\\n        {\\n            Console.WriteLine(card);\\n        }\\n        Console.WriteLine(\\\"Total: \\\" + CalculateHandValue(playerHand));\\n    }\\n\\n    private void DetermineWinner()\\n    {\\n        int playerValue = CalculateHandValue(playerHand);\\n        int dealerValue = CalculateHandValue(dealerHand);\\n\\n        if (dealerValue > 21)\\n        {\\n            Console.WriteLine(\\\"Dealer busts! Player wins.\\\");\\n            SaveGameResult(\\\"Player wins - Dealer busts.\\\");\\n        }\\n        else if (playerValue > dealerValue)\\n        {\\n            Console.WriteLine(\\\"Player wins!\\\");\\n            SaveGameResult(\\\"Player wins - Higher score.\\\");\\n        }\\n        else if (playerValue < dealerValue)\\n        {\\n            Console.WriteLine(\\\"Dealer wins!\\\");\\n            SaveGameResult(\\\"Dealer wins - Higher score.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"It's a tie!\\\");\\n            SaveGameResult(\\\"Game tied.\\\");\\n        }\\n    }\\n\\n    private void SaveGameResult(string result)\\n    {\\n        try\\n        {\\n            string filePath = Path.Combine(dataFolder, \\\"blackjack_results.json\\\");\\n            List<string> results = new List<string>();\\n\\n            if (File.Exists(filePath))\\n            {\\n                string json = File.ReadAllText(filePath);\\n                results = JsonSerializer.Deserialize<List<string>>(json);\\n            }\\n\\n            results.Add($\\\"{DateTime.Now}: {result}\\\");\\n            string newJson = JsonSerializer.Serialize(results);\\n            File.WriteAllText(filePath, newJson);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving game result: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class Card\\n{\\n    public string Suit { get; }\\n    public string Rank { get; }\\n\\n    public Card(string suit, string rank)\\n    {\\n        Suit = suit;\\n        Rank = rank;\\n    }\\n\\n    public override string ToString()\\n    {\\n        return Rank + \\\" of \\\" + Suit;\\n    }\\n}\",\n  \"name\": \"Blackjack Game\",\n  \"description\": \"A basic blackjack card game simulation that allows player to hit or stand against a dealer.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1789,"total_tokens":2309,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}