
{"id":"779c51fb-3616-412e-bf42-e1a74f6c5f98","object":"chat.completion","created":1743764014,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BookStoreInventory : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"BookStore Inventory Manager\\\";\\n    \\n    private string _dataFolder;\\n    private string _inventoryFilePath;\\n    private string _salesFilePath;\\n    \\n    public class Book\\n    {\\n        public string Id { get; set; }\\n        public string Title { get; set; }\\n        public string Author { get; set; }\\n        public decimal Price { get; set; }\\n        public int Stock { get; set; }\\n        public int RestockThreshold { get; set; } = 5;\\n    }\\n    \\n    public class SaleRecord\\n    {\\n        public string BookId { get; set; }\\n        public DateTime SaleDate { get; set; }\\n        public int Quantity { get; set; }\\n        public decimal TotalAmount { get; set; }\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _dataFolder = dataFolder;\\n        _inventoryFilePath = Path.Combine(_dataFolder, \\\"inventory.json\\\");\\n        _salesFilePath = Path.Combine(_dataFolder, \\\"sales.json\\\");\\n        \\n        Console.WriteLine(\\\"BookStore Inventory Module is running.\\\");\\n        \\n        InitializeDataFiles();\\n        \\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddNewBook();\\n                    break;\\n                case \\\"2\\\":\\n                    ListAllBooks();\\n                    break;\\n                case \\\"3\\\":\\n                    RecordSale();\\n                    break;\\n                case \\\"4\\\":\\n                    CheckRestockAlerts();\\n                    break;\\n                case \\\"5\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void InitializeDataFiles()\\n    {\\n        if (!Directory.Exists(_dataFolder))\\n        {\\n            Directory.CreateDirectory(_dataFolder);\\n        }\\n        \\n        if (!File.Exists(_inventoryFilePath))\\n        {\\n            File.WriteAllText(_inventoryFilePath, \\\"[]\\\");\\n        }\\n        \\n        if (!File.Exists(_salesFilePath))\\n        {\\n            File.WriteAllText(_salesFilePath, \\\"[]\\\");\\n        }\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nBookStore Inventory Menu:\\\");\\n        Console.WriteLine(\\\"1. Add a new book\\\");\\n        Console.WriteLine(\\\"2. List all books\\\");\\n        Console.WriteLine(\\\"3. Record a sale\\\");\\n        Console.WriteLine(\\\"4. Check restock alerts\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddNewBook()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter author: \\\");\\n        string author = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter price: \\\");\\n        decimal price = decimal.Parse(Console.ReadLine());\\n        \\n        Console.Write(\\\"Enter initial stock: \\\");\\n        int stock = int.Parse(Console.ReadLine());\\n        \\n        Console.Write(\\\"Enter restock threshold (default 5): \\\");\\n        string thresholdInput = Console.ReadLine();\\n        int threshold = string.IsNullOrEmpty(thresholdInput) ? 5 : int.Parse(thresholdInput);\\n        \\n        var newBook = new Book\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Title = title,\\n            Author = author,\\n            Price = price,\\n            Stock = stock,\\n            RestockThreshold = threshold\\n        };\\n        \\n        var books = GetInventory();\\n        books.Add(newBook);\\n        SaveInventory(books);\\n        \\n        Console.WriteLine(\\\"Book added successfully.\\\");\\n    }\\n    \\n    private void ListAllBooks()\\n    {\\n        var books = GetInventory();\\n        \\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books in inventory.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nCurrent Inventory:\\\");\\n        foreach (var book in books)\\n        {\\n            Console.WriteLine($\\\"ID: {book.Id}\\\");\\n            Console.WriteLine($\\\"Title: {book.Title}\\\");\\n            Console.WriteLine($\\\"Author: {book.Author}\\\");\\n            Console.WriteLine($\\\"Price: {book.Price:C}\\\");\\n            Console.WriteLine($\\\"Stock: {book.Stock}\\\");\\n            Console.WriteLine($\\\"Restock Threshold: {book.RestockThreshold}\\\");\\n            Console.WriteLine(\\\"-----------------------\\\");\\n        }\\n    }\\n    \\n    private void RecordSale()\\n    {\\n        ListAllBooks();\\n        \\n        Console.Write(\\\"Enter book ID to sell: \\\");\\n        string bookId = Console.ReadLine();\\n        \\n        var books = GetInventory();\\n        var book = books.Find(b => b.Id == bookId);\\n        \\n        if (book == null)\\n        {\\n            Console.WriteLine(\\\"Book not found.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter quantity sold: \\\");\\n        int quantity = int.Parse(Console.ReadLine());\\n        \\n        if (quantity > book.Stock)\\n        {\\n            Console.WriteLine(\\\"Not enough stock available.\\\");\\n            return;\\n        }\\n        \\n        book.Stock -= quantity;\\n        SaveInventory(books);\\n        \\n        var sale = new SaleRecord\\n        {\\n            BookId = bookId,\\n            SaleDate = DateTime.Now,\\n            Quantity = quantity,\\n            TotalAmount = quantity * book.Price\\n        };\\n        \\n        var sales = GetSales();\\n        sales.Add(sale);\\n        SaveSales(sales);\\n        \\n        Console.WriteLine(\\\"Sale recorded successfully.\\\");\\n    }\\n    \\n    private void CheckRestockAlerts()\\n    {\\n        var books = GetInventory();\\n        var needsRestock = books.FindAll(b => b.Stock <= b.RestockThreshold);\\n        \\n        if (needsRestock.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books need restocking.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nBooks that need restocking:\\\");\\n        foreach (var book in needsRestock)\\n        {\\n            Console.WriteLine($\\\"{book.Title} by {book.Author} - Current stock: {book.Stock} (Threshold: {book.RestockThreshold})\\\");\\n        }\\n    }\\n    \\n    private List<Book> GetInventory()\\n    {\\n        string json = File.ReadAllText(_inventoryFilePath);\\n        return JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();\\n    }\\n    \\n    private void SaveInventory(List<Book> books)\\n    {\\n        string json = JsonSerializer.Serialize(books);\\n        File.WriteAllText(_inventoryFilePath, json);\\n    }\\n    \\n    private List<SaleRecord> GetSales()\\n    {\\n        string json = File.ReadAllText(_salesFilePath);\\n        return JsonSerializer.Deserialize<List<SaleRecord>>(json) ?? new List<SaleRecord>();\\n    }\\n    \\n    private void SaveSales(List<SaleRecord> sales)\\n    {\\n        string json = JsonSerializer.Serialize(sales);\\n        File.WriteAllText(_salesFilePath, json);\\n    }\\n}\",\n  \"name\": \"BookStore Inventory Manager\",\n  \"description\": \"A module for managing bookstore inventory, tracking sales, and providing restock alerts.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":1933,"total_tokens":2457,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":76},"system_fingerprint":"fp_3d5141a69a_prod0225"}