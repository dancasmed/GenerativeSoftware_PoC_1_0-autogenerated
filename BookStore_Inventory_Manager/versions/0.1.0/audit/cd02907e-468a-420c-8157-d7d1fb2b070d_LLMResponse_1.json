
{"id":"32a27cbd-15ab-44c6-a53a-77d08a1063fd","object":"chat.completion","created":1743787617,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BookStoreInventoryModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"BookStore Inventory Manager\\\";\\n\\n    private string _inventoryFilePath;\\n    private string _salesFilePath;\\n    private string _restockAlertsFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        try\\n        {\\n            Console.WriteLine(\\\"Initializing BookStore Inventory Module...\\\");\\n\\n            _inventoryFilePath = Path.Combine(dataFolder, \\\"inventory.json\\\");\\n            _salesFilePath = Path.Combine(dataFolder, \\\"sales.json\\\");\\n            _restockAlertsFilePath = Path.Combine(dataFolder, \\\"restockAlerts.json\\\");\\n\\n            InitializeFiles();\\n\\n            bool running = true;\\n            while (running)\\n            {\\n                Console.WriteLine(\\\"\\\\nBookStore Inventory Menu:\\\");\\n                Console.WriteLine(\\\"1. View Inventory\\\");\\n                Console.WriteLine(\\\"2. Add Book to Inventory\\\");\\n                Console.WriteLine(\\\"3. Record Sale\\\");\\n                Console.WriteLine(\\\"4. View Restock Alerts\\\");\\n                Console.WriteLine(\\\"5. Exit Module\\\");\\n                Console.Write(\\\"Select an option: \\\");\\n\\n                string input = Console.ReadLine();\\n                if (int.TryParse(input, out int choice))\\n                {\\n                    switch (choice)\\n                    {\\n                        case 1:\\n                            ViewInventory();\\n                            break;\\n                        case 2:\\n                            AddBookToInventory();\\n                            break;\\n                        case 3:\\n                            RecordSale();\\n                            break;\\n                        case 4:\\n                            ViewRestockAlerts();\\n                            break;\\n                        case 5:\\n                            running = false;\\n                            break;\\n                        default:\\n                            Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                            break;\\n                    }\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n                }\\n            }\\n\\n            Console.WriteLine(\\\"BookStore Inventory Module completed successfully.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void InitializeFiles()\\n    {\\n        if (!Directory.Exists(Path.GetDirectoryName(_inventoryFilePath)))\\n        {\\n            Directory.CreateDirectory(Path.GetDirectoryName(_inventoryFilePath));\\n        }\\n\\n        if (!File.Exists(_inventoryFilePath))\\n        {\\n            File.WriteAllText(_inventoryFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_salesFilePath))\\n        {\\n            File.WriteAllText(_salesFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_restockAlertsFilePath))\\n        {\\n            File.WriteAllText(_restockAlertsFilePath, \\\"[]\\\");\\n        }\\n    }\\n\\n    private List<Book> LoadInventory()\\n    {\\n        string json = File.ReadAllText(_inventoryFilePath);\\n        return JsonSerializer.Deserialize<List<Book>>(json);\\n    }\\n\\n    private void SaveInventory(List<Book> inventory)\\n    {\\n        string json = JsonSerializer.Serialize(inventory);\\n        File.WriteAllText(_inventoryFilePath, json);\\n    }\\n\\n    private List<Sale> LoadSales()\\n    {\\n        string json = File.ReadAllText(_salesFilePath);\\n        return JsonSerializer.Deserialize<List<Sale>>(json);\\n    }\\n\\n    private void SaveSales(List<Sale> sales)\\n    {\\n        string json = JsonSerializer.Serialize(sales);\\n        File.WriteAllText(_salesFilePath, json);\\n    }\\n\\n    private List<RestockAlert> LoadRestockAlerts()\\n    {\\n        string json = File.ReadAllText(_restockAlertsFilePath);\\n        return JsonSerializer.Deserialize<List<RestockAlert>>(json);\\n    }\\n\\n    private void SaveRestockAlerts(List<RestockAlert> alerts)\\n    {\\n        string json = JsonSerializer.Serialize(alerts);\\n        File.WriteAllText(_restockAlertsFilePath, json);\\n    }\\n\\n    private void ViewInventory()\\n    {\\n        var inventory = LoadInventory();\\n        Console.WriteLine(\\\"\\\\nCurrent Inventory:\\\");\\n        Console.WriteLine(\\\"ID\\\\tTitle\\\\t\\\\tAuthor\\\\t\\\\tPrice\\\\tQuantity\\\");\\n        foreach (var book in inventory)\\n        {\\n            Console.WriteLine(book.Id + \\\"\\\\t\\\" + book.Title + \\\"\\\\t\\\" + book.Author + \\\"\\\\t\\\" + book.Price + \\\"\\\\t\\\" + book.Quantity);\\n        }\\n    }\\n\\n    private void AddBookToInventory()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n        Console.Write(\\\"Enter book author: \\\");\\n        string author = Console.ReadLine();\\n        Console.Write(\\\"Enter book price: \\\");\\n        decimal price = decimal.Parse(Console.ReadLine());\\n        Console.Write(\\\"Enter initial quantity: \\\");\\n        int quantity = int.Parse(Console.ReadLine());\\n\\n        var inventory = LoadInventory();\\n        int newId = inventory.Count > 0 ? inventory.Max(b => b.Id) + 1 : 1;\\n\\n        inventory.Add(new Book\\n        {\\n            Id = newId,\\n            Title = title,\\n            Author = author,\\n            Price = price,\\n            Quantity = quantity\\n        });\\n\\n        SaveInventory(inventory);\\n        Console.WriteLine(\\\"Book added to inventory successfully.\\\");\\n    }\\n\\n    private void RecordSale()\\n    {\\n        ViewInventory();\\n        Console.Write(\\\"\\\\nEnter book ID to sell: \\\");\\n        int bookId = int.Parse(Console.ReadLine());\\n        Console.Write(\\\"Enter quantity sold: \\\");\\n        int quantity = int.Parse(Console.ReadLine());\\n\\n        var inventory = LoadInventory();\\n        var book = inventory.FirstOrDefault(b => b.Id == bookId);\\n\\n        if (book == null)\\n        {\\n            Console.WriteLine(\\\"Book not found.\\\");\\n            return;\\n        }\\n\\n        if (book.Quantity < quantity)\\n        {\\n            Console.WriteLine(\\\"Not enough stock available.\\\");\\n            return;\\n        }\\n\\n        book.Quantity -= quantity;\\n        SaveInventory(inventory);\\n\\n        var sales = LoadSales();\\n        sales.Add(new Sale\\n        {\\n            BookId = bookId,\\n            Quantity = quantity,\\n            SaleDate = DateTime.Now,\\n            TotalAmount = book.Price * quantity\\n        });\\n        SaveSales(sales);\\n\\n        // Check for restock alert\\n        if (book.Quantity < 5)\\n        {\\n            var alerts = LoadRestockAlerts();\\n            if (!alerts.Any(a => a.BookId == bookId))\\n            {\\n                alerts.Add(new RestockAlert\\n                {\\n                    BookId = bookId,\\n                    BookTitle = book.Title,\\n                    CurrentQuantity = book.Quantity,\\n                    AlertDate = DateTime.Now\\n                });\\n                SaveRestockAlerts(alerts);\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Sale recorded successfully.\\\");\\n    }\\n\\n    private void ViewRestockAlerts()\\n    {\\n        var alerts = LoadRestockAlerts();\\n        Console.WriteLine(\\\"\\\\nRestock Alerts:\\\");\\n        Console.WriteLine(\\\"Book ID\\\\tTitle\\\\t\\\\tCurrent Quantity\\\\tAlert Date\\\");\\n        foreach (var alert in alerts)\\n        {\\n            Console.WriteLine(alert.BookId + \\\"\\\\t\\\\t\\\" + alert.BookTitle + \\\"\\\\t\\\\t\\\" + alert.CurrentQuantity + \\\"\\\\t\\\\t\\\" + alert.AlertDate);\\n        }\\n    }\\n}\\n\\npublic class Book\\n{\\n    public int Id { get; set; }\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public decimal Price { get; set; }\\n    public int Quantity { get; set; }\\n}\\n\\npublic class Sale\\n{\\n    public int BookId { get; set; }\\n    public int Quantity { get; set; }\\n    public DateTime SaleDate { get; set; }\\n    public decimal TotalAmount { get; set; }\\n}\\n\\npublic class RestockAlert\\n{\\n    public int BookId { get; set; }\\n    public string BookTitle { get; set; }\\n    public int CurrentQuantity { get; set; }\\n    public DateTime AlertDate { get; set; }\\n}\",\n  \"name\": \"BookStore Inventory Manager\",\n  \"description\": \"A module for managing bookstore inventory, tracking sales, and generating restock alerts when inventory is low.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"7.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":2118,"total_tokens":2642,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":12},"system_fingerprint":"fp_3d5141a69a_prod0225"}