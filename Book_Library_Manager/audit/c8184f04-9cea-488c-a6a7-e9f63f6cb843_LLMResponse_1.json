{"id":"6a065fb7-2203-40b3-9c99-8c60b91d636c","object":"chat.completion","created":1743788262,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class BookLibraryManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Book Library Manager\\\";\\n    \\n    private List<Book> _books;\\n    private string _dataFilePath;\\n    \\n    public BookLibraryManager()\\n    {\\n        _books = new List<Book>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Book Library Manager is running...\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"books.json\\\");\\n        \\n        LoadBooks();\\n        \\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add a book\\\");\\n            Console.WriteLine(\\\"2. Search by title\\\");\\n            Console.WriteLine(\\\"3. Search by author\\\");\\n            Console.WriteLine(\\\"4. List all books\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Enter your choice: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddBook();\\n                    break;\\n                case \\\"2\\\":\\n                    SearchByTitle();\\n                    break;\\n                case \\\"3\\\":\\n                    SearchByAuthor();\\n                    break;\\n                case \\\"4\\\":\\n                    ListAllBooks();\\n                    break;\\n                case \\\"5\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveBooks();\\n        Console.WriteLine(\\\"Book Library Manager is shutting down...\\\");\\n        return true;\\n    }\\n    \\n    private void LoadBooks()\\n    {\\n        try\\n        {\\n            if (File.Exists(_dataFilePath))\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                _books = JsonSerializer.Deserialize<List<Book>>(json);\\n                Console.WriteLine(\\\"Books loaded successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"No existing book data found. Starting with an empty library.\\\");\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading books: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void SaveBooks()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_books);\\n            File.WriteAllText(_dataFilePath, json);\\n            Console.WriteLine(\\\"Books saved successfully.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving books: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void AddBook()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter book author: \\\");\\n        string author = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter publication year: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int year))\\n        {\\n            _books.Add(new Book { Title = title, Author = author, Year = year });\\n            Console.WriteLine(\\\"Book added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid year. Book not added.\\\");\\n        }\\n    }\\n    \\n    private void SearchByTitle()\\n    {\\n        Console.Write(\\\"Enter title to search: \\\");\\n        string searchTerm = Console.ReadLine();\\n        \\n        var results = _books.Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();\\n        \\n        if (results.Any())\\n        {\\n            Console.WriteLine(\\\"\\\\nSearch results:\\\");\\n            foreach (var book in results)\\n            {\\n                Console.WriteLine($\\\"{book.Title} by {book.Author} ({book.Year})\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"No books found with that title.\\\");\\n        }\\n    }\\n    \\n    private void SearchByAuthor()\\n    {\\n        Console.Write(\\\"Enter author to search: \\\");\\n        string searchTerm = Console.ReadLine();\\n        \\n        var results = _books.Where(b => b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();\\n        \\n        if (results.Any())\\n        {\\n            Console.WriteLine(\\\"\\\\nSearch results:\\\");\\n            foreach (var book in results)\\n            {\\n                Console.WriteLine($\\\"{book.Title} by {book.Author} ({book.Year})\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"No books found by that author.\\\");\\n        }\\n    }\\n    \\n    private void ListAllBooks()\\n    {\\n        if (_books.Any())\\n        {\\n            Console.WriteLine(\\\"\\\\nAll books in library:\\\");\\n            foreach (var book in _books.OrderBy(b => b.Title))\\n            {\\n                Console.WriteLine($\\\"{book.Title} by {book.Author} ({book.Year})\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"The library is currently empty.\\\");\\n        }\\n    }\\n}\\n\\npublic class Book\\n{\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public int Year { get; set; }\\n}\",\n  \"name\": \"Book Library Manager\",\n  \"description\": \"A module that manages a library of books with functionality to add, search by title or author, and list all books.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":1402,"total_tokens":1925,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}