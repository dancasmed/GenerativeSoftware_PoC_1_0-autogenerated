
{"id":"f0738ad6-fe42-43a7-bb0b-86348b94cad7","object":"chat.completion","created":1743766730,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class BookLibraryModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Book Library Manager\\\";\\n    \\n    private List<Book> _books;\\n    private string _dataFilePath;\\n    \\n    public BookLibraryModule()\\n    {\\n        _books = new List<Book>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Book Library Module...\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"books.json\\\");\\n        \\n        LoadBooks();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nBook Library Menu:\\\");\\n            Console.WriteLine(\\\"1. Add a book\\\");\\n            Console.WriteLine(\\\"2. Search books by title\\\");\\n            Console.WriteLine(\\\"3. Search books by author\\\");\\n            Console.WriteLine(\\\"4. List all books\\\");\\n            Console.WriteLine(\\\"5. Exit module\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddBook();\\n                    break;\\n                case \\\"2\\\":\\n                    SearchByTitle();\\n                    break;\\n                case \\\"3\\\":\\n                    SearchByAuthor();\\n                    break;\\n                case \\\"4\\\":\\n                    ListAllBooks();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveBooks();\\n        Console.WriteLine(\\\"Book Library Module finished.\\\");\\n        return true;\\n    }\\n    \\n    private void LoadBooks()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                _books = JsonSerializer.Deserialize<List<Book>>(json);\\n                Console.WriteLine(\\\"Loaded \\\" + _books.Count + \\\" books from storage.\\\");\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Error loading books: \\\" + ex.Message);\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"No existing book data found. Starting with empty library.\\\");\\n        }\\n    }\\n    \\n    private void SaveBooks()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_books);\\n            File.WriteAllText(_dataFilePath, json);\\n            Console.WriteLine(\\\"Saved \\\" + _books.Count + \\\" books to storage.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving books: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void AddBook()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter book author: \\\");\\n        string author = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter publication year: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int year))\\n        {\\n            _books.Add(new Book { Title = title, Author = author, Year = year });\\n            Console.WriteLine(\\\"Book added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid year. Book not added.\\\");\\n        }\\n    }\\n    \\n    private void SearchByTitle()\\n    {\\n        Console.Write(\\\"Enter title to search: \\\");\\n        string searchTerm = Console.ReadLine();\\n        \\n        var results = _books\\n            .Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))\\n            .ToList();\\n        \\n        DisplaySearchResults(results, \\\"title\\\");\\n    }\\n    \\n    private void SearchByAuthor()\\n    {\\n        Console.Write(\\\"Enter author to search: \\\");\\n        string searchTerm = Console.ReadLine();\\n        \\n        var results = _books\\n            .Where(b => b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))\\n            .ToList();\\n        \\n        DisplaySearchResults(results, \\\"author\\\");\\n    }\\n    \\n    private void ListAllBooks()\\n    {\\n        DisplaySearchResults(_books, \\\"all\\\");\\n    }\\n    \\n    private void DisplaySearchResults(List<Book> books, string searchType)\\n    {\\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books found matching your search.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nFound \\\" + books.Count + \\\" books\\\" + (searchType != \\\"all\\\" ? \\\" by \\\" + searchType : \\\"\\\") + \\\":\\\");\\n        foreach (var book in books)\\n        {\\n            Console.WriteLine(\\\"Title: \\\" + book.Title);\\n            Console.WriteLine(\\\"Author: \\\" + book.Author);\\n            Console.WriteLine(\\\"Year: \\\" + book.Year);\\n            Console.WriteLine();\\n        }\\n    }\\n}\\n\\npublic class Book\\n{\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public int Year { get; set; }\\n}\",\n  \"name\": \"Book Library Manager\",\n  \"description\": \"A module for managing a library of books with search functionality by title or author.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":1384,"total_tokens":1907,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}