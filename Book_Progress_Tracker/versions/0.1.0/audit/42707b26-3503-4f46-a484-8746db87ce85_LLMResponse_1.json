{"id":"c06a97e2-f932-4ad2-b7a3-33acad651b42","object":"chat.completion","created":1743790644,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BookProgressTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Book Progress Tracker\\\";\\n    \\n    private string _dataFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"book_progress.json\\\");\\n        \\n        Console.WriteLine(\\\"Book Progress Tracker Module Started\\\");\\n        Console.WriteLine(\\\"------------------------------------\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        var books = LoadBooks();\\n        \\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add a new book\\\");\\n            Console.WriteLine(\\\"2. Update reading progress\\\");\\n            Console.WriteLine(\\\"3. View all books\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Enter your choice: \\\");\\n            \\n            var choice = Console.ReadLine();\\n            \\n            switch (choice)\\n            {\\n                case \\\"1\\\":\\n                    AddBook(books);\\n                    break;\\n                case \\\"2\\\":\\n                    UpdateProgress(books);\\n                    break;\\n                case \\\"3\\\":\\n                    DisplayBooks(books);\\n                    break;\\n                case \\\"4\\\":\\n                    SaveBooks(books);\\n                    Console.WriteLine(\\\"Saving progress and exiting module...\\\");\\n                    return true;\\n                default:\\n                    Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private List<Book> LoadBooks()\\n    {\\n        if (!File.Exists(_dataFilePath))\\n        {\\n            return new List<Book>();\\n        }\\n        \\n        var json = File.ReadAllText(_dataFilePath);\\n        return JsonSerializer.Deserialize<List<Book>>(json);\\n    }\\n    \\n    private void SaveBooks(List<Book> books)\\n    {\\n        var json = JsonSerializer.Serialize(books);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n    \\n    private void AddBook(List<Book> books)\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        var title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter total pages: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out var totalPages))\\n        {\\n            Console.WriteLine(\\\"Invalid number of pages.\\\");\\n            return;\\n        }\\n        \\n        books.Add(new Book\\n        {\\n            Title = title,\\n            TotalPages = totalPages,\\n            PagesRead = 0\\n        });\\n        \\n        Console.WriteLine(\\\"Book added successfully!\\\");\\n    }\\n    \\n    private void UpdateProgress(List<Book> books)\\n    {\\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books available to update.\\\");\\n            return;\\n        }\\n        \\n        DisplayBooks(books);\\n        \\n        Console.Write(\\\"Enter book number to update: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out var bookIndex) || bookIndex < 1 || bookIndex > books.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid book selection.\\\");\\n            return;\\n        }\\n        \\n        var book = books[bookIndex - 1];\\n        \\n        Console.Write(\\\"Enter pages read: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out var pagesRead) || pagesRead < 0 || pagesRead > book.TotalPages)\\n        {\\n            Console.WriteLine(\\\"Invalid number of pages read.\\\");\\n            return;\\n        }\\n        \\n        book.PagesRead = pagesRead;\\n        \\n        var percentage = (double)pagesRead / book.TotalPages * 100;\\n        Console.WriteLine(\\\"Progress updated: \\\" + percentage.ToString(\\\"0.00\\\") + \\\"% completed\\\");\\n    }\\n    \\n    private void DisplayBooks(List<Book> books)\\n    {\\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books to display.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nCurrent Books:\\\");\\n        for (int i = 0; i < books.Count; i++)\\n        {\\n            var book = books[i];\\n            var percentage = book.TotalPages > 0 ? (double)book.PagesRead / book.TotalPages * 100 : 0;\\n            Console.WriteLine($\\\"{i + 1}. {book.Title} - {book.PagesRead}/{book.TotalPages} pages ({percentage.ToString(\\\"0.00\\\")}%)\\\");\\n        }\\n    }\\n}\\n\\npublic class Book\\n{\\n    public string Title { get; set; }\\n    public int TotalPages { get; set; }\\n    public int PagesRead { get; set; }\\n}\",\n  \"name\": \"Book Progress Tracker\",\n  \"description\": \"Tracks reading progress of books with percentage completion\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1247,"total_tokens":1766,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":71},"system_fingerprint":"fp_3d5141a69a_prod0225"}