{"id":"d816950e-a321-4127-a5e9-18df4a46103e","object":"chat.completion","created":1743794650,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BookReadingTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Book Reading Tracker\\\";\\n\\n    private string _dataFilePath;\\n    \\n    private class BookProgress\\n    {\\n        public string Title { get; set; }\\n        public int TotalPages { get; set; }\\n        public int CurrentPage { get; set; }\\n        public double PercentageCompleted => TotalPages > 0 ? (CurrentPage * 100.0) / TotalPages : 0;\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"book_progress.json\\\");\\n        \\n        Console.WriteLine(\\\"Book Reading Tracker Module Started\\\");\\n        Console.WriteLine(\\\"----------------------------------\\\");\\n        \\n        List<BookProgress> books = LoadBookProgress();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddNewBook(books);\\n                    break;\\n                case \\\"2\\\":\\n                    UpdateReadingProgress(books);\\n                    break;\\n                case \\\"3\\\":\\n                    ViewAllBooks(books);\\n                    break;\\n                case \\\"4\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n            \\n            SaveBookProgress(books);\\n        }\\n        \\n        Console.WriteLine(\\\"Book Reading Tracker Module Finished\\\");\\n        return true;\\n    }\\n    \\n    private List<BookProgress> LoadBookProgress()\\n    {\\n        try\\n        {\\n            if (File.Exists(_dataFilePath))\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                return JsonSerializer.Deserialize<List<BookProgress>>(json) ?? new List<BookProgress>();\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading book progress: \\\" + ex.Message);\\n        }\\n        \\n        return new List<BookProgress>();\\n    }\\n    \\n    private void SaveBookProgress(List<BookProgress> books)\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(books);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving book progress: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine();\\n        Console.WriteLine(\\\"BOOK READING TRACKER\\\");\\n        Console.WriteLine(\\\"1. Add New Book\\\");\\n        Console.WriteLine(\\\"2. Update Reading Progress\\\");\\n        Console.WriteLine(\\\"3. View All Books\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddNewBook(List<BookProgress> books)\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter total pages: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int totalPages))\\n        {\\n            books.Add(new BookProgress { Title = title, TotalPages = totalPages, CurrentPage = 0 });\\n            Console.WriteLine(\\\"Book added successfully!\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid number of pages. Book not added.\\\");\\n        }\\n    }\\n    \\n    private void UpdateReadingProgress(List<BookProgress> books)\\n    {\\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books available to update.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Select a book to update:\\\");\\n        for (int i = 0; i < books.Count; i++)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}. {1} (Page {2}/{3}, {4:0.00}%)\\\", \\n                i + 1, \\n                books[i].Title, \\n                books[i].CurrentPage, \\n                books[i].TotalPages, \\n                books[i].PercentageCompleted));\\n        }\\n        \\n        Console.Write(\\\"Enter book number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int bookIndex) && bookIndex > 0 && bookIndex <= books.Count)\\n        {\\n            var book = books[bookIndex - 1];\\n            \\n            Console.Write(string.Format(\\\"Enter current page (0-{0}): \\\", book.TotalPages));\\n            if (int.TryParse(Console.ReadLine(), out int currentPage) && currentPage >= 0 && currentPage <= book.TotalPages)\\n            {\\n                book.CurrentPage = currentPage;\\n                Console.WriteLine(string.Format(\\\"Progress updated: {0:0.00}% completed\\\", book.PercentageCompleted));\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid page number.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid book selection.\\\");\\n        }\\n    }\\n    \\n    private void ViewAllBooks(List<BookProgress> books)\\n    {\\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books in your reading list.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"YOUR READING PROGRESS\\\");\\n        Console.WriteLine(\\\"----------------------\\\");\\n        \\n        foreach (var book in books)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}: Page {1}/{2} ({3:0.00}% completed)\\\", \\n                book.Title, \\n                book.CurrentPage, \\n                book.TotalPages, \\n                book.PercentageCompleted));\\n        }\\n    }\\n}\",\n  \"name\": \"Book Reading Tracker\",\n  \"description\": \"Tracks reading progress for multiple books with percentage completion\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1479,"total_tokens":1998,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}