
{"id":"bcdeb880-598f-4e50-ac99-10ca19147a86","object":"chat.completion","created":1743786147,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class BookstoreInventoryModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Bookstore Inventory Manager\\\";\\n\\n    private string _inventoryFilePath;\\n    private string _salesFilePath;\\n    private string _restockAlertsFilePath;\\n\\n    private List<Book> _inventory;\\n    private List<Sale> _sales;\\n    private List<RestockAlert> _restockAlerts;\\n\\n    public BookstoreInventoryModule()\\n    {\\n        _inventory = new List<Book>();\\n        _sales = new List<Sale>();\\n        _restockAlerts = new List<RestockAlert>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        try\\n        {\\n            Console.WriteLine(\\\"Initializing Bookstore Inventory Module...\\\");\\n\\n            _inventoryFilePath = Path.Combine(dataFolder, \\\"inventory.json\\\");\\n            _salesFilePath = Path.Combine(dataFolder, \\\"sales.json\\\");\\n            _restockAlertsFilePath = Path.Combine(dataFolder, \\\"restockAlerts.json\\\");\\n\\n            LoadData();\\n\\n            bool exit = false;\\n            while (!exit)\\n            {\\n                Console.WriteLine(\\\"\\\\nBookstore Inventory Management\\\");\\n                Console.WriteLine(\\\"1. View Inventory\\\");\\n                Console.WriteLine(\\\"2. Add Book\\\");\\n                Console.WriteLine(\\\"3. Record Sale\\\");\\n                Console.WriteLine(\\\"4. View Sales\\\");\\n                Console.WriteLine(\\\"5. Check Restock Alerts\\\");\\n                Console.WriteLine(\\\"6. Exit\\\");\\n                Console.Write(\\\"Select an option: \\\");\\n\\n                if (int.TryParse(Console.ReadLine(), out int option))\\n                {\\n                    switch (option)\\n                    {\\n                        case 1:\\n                            ViewInventory();\\n                            break;\\n                        case 2:\\n                            AddBook();\\n                            break;\\n                        case 3:\\n                            RecordSale();\\n                            break;\\n                        case 4:\\n                            ViewSales();\\n                            break;\\n                        case 5:\\n                            CheckRestockAlerts();\\n                            break;\\n                        case 6:\\n                            exit = true;\\n                            break;\\n                        default:\\n                            Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                            break;\\n                    }\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n                }\\n            }\\n\\n            SaveData();\\n            Console.WriteLine(\\\"Bookstore Inventory Module completed successfully.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void LoadData()\\n    {\\n        try\\n        {\\n            if (File.Exists(_inventoryFilePath))\\n            {\\n                string json = File.ReadAllText(_inventoryFilePath);\\n                _inventory = JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();\\n            }\\n\\n            if (File.Exists(_salesFilePath))\\n            {\\n                string json = File.ReadAllText(_salesFilePath);\\n                _sales = JsonSerializer.Deserialize<List<Sale>>(json) ?? new List<Sale>();\\n            }\\n\\n            if (File.Exists(_restockAlertsFilePath))\\n            {\\n                string json = File.ReadAllText(_restockAlertsFilePath);\\n                _restockAlerts = JsonSerializer.Deserialize<List<RestockAlert>>(json) ?? new List<RestockAlert>();\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void SaveData()\\n    {\\n        try\\n        {\\n            Directory.CreateDirectory(Path.GetDirectoryName(_inventoryFilePath));\\n\\n            string inventoryJson = JsonSerializer.Serialize(_inventory);\\n            File.WriteAllText(_inventoryFilePath, inventoryJson);\\n\\n            string salesJson = JsonSerializer.Serialize(_sales);\\n            File.WriteAllText(_salesFilePath, salesJson);\\n\\n            string restockAlertsJson = JsonSerializer.Serialize(_restockAlerts);\\n            File.WriteAllText(_restockAlertsFilePath, restockAlertsJson);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void ViewInventory()\\n    {\\n        Console.WriteLine(\\\"\\\\nCurrent Inventory:\\\");\\n        if (_inventory.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books in inventory.\\\");\\n            return;\\n        }\\n\\n        foreach (var book in _inventory)\\n        {\\n            Console.WriteLine($\\\"ID: {book.Id}, Title: {book.Title}, Author: {book.Author}, Price: {book.Price:C}, Quantity: {book.Quantity}\\\");\\n        }\\n    }\\n\\n    private void AddBook()\\n    {\\n        Console.WriteLine(\\\"\\\\nAdd New Book\\\");\\n        Console.Write(\\\"Enter title: \\\");\\n        string title = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter author: \\\");\\n        string author = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter price: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal price))\\n        {\\n            Console.WriteLine(\\\"Invalid price. Operation cancelled.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter quantity: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int quantity))\\n        {\\n            Console.WriteLine(\\\"Invalid quantity. Operation cancelled.\\\");\\n            return;\\n        }\\n\\n        var newBook = new Book\\n        {\\n            Id = _inventory.Count > 0 ? _inventory.Max(b => b.Id) + 1 : 1,\\n            Title = title,\\n            Author = author,\\n            Price = price,\\n            Quantity = quantity\\n        };\\n\\n        _inventory.Add(newBook);\\n        Console.WriteLine(\\\"Book added successfully.\\\");\\n    }\\n\\n    private void RecordSale()\\n    {\\n        ViewInventory();\\n        if (_inventory.Count == 0) return;\\n\\n        Console.Write(\\\"\\\\nEnter book ID to sell: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int bookId))\\n        {\\n            Console.WriteLine(\\\"Invalid book ID.\\\");\\n            return;\\n        }\\n\\n        var book = _inventory.FirstOrDefault(b => b.Id == bookId);\\n        if (book == null)\\n        {\\n            Console.WriteLine(\\\"Book not found.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter quantity sold: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid quantity.\\\");\\n            return;\\n        }\\n\\n        if (book.Quantity < quantity)\\n        {\\n            Console.WriteLine(\\\"Not enough stock available.\\\");\\n            return;\\n        }\\n\\n        book.Quantity -= quantity;\\n        var sale = new Sale\\n        {\\n            Id = _sales.Count > 0 ? _sales.Max(s => s.Id) + 1 : 1,\\n            BookId = book.Id,\\n            BookTitle = book.Title,\\n            Quantity = quantity,\\n            TotalPrice = quantity * book.Price,\\n            SaleDate = DateTime.Now\\n        };\\n\\n        _sales.Add(sale);\\n        Console.WriteLine(\\\"Sale recorded successfully.\\\");\\n\\n        // Check for restock alert\\n        if (book.Quantity <= 5)\\n        {\\n            var existingAlert = _restockAlerts.FirstOrDefault(a => a.BookId == book.Id);\\n            if (existingAlert == null)\\n            {\\n                _restockAlerts.Add(new RestockAlert\\n                {\\n                    Id = _restockAlerts.Count > 0 ? _restockAlerts.Max(a => a.Id) + 1 : 1,\\n                    BookId = book.Id,\\n                    BookTitle = book.Title,\\n                    CurrentQuantity = book.Quantity,\\n                    AlertDate = DateTime.Now\\n                });\\n                Console.WriteLine(\\\"Restock alert generated for this book.\\\");\\n            }\\n        }\\n    }\\n\\n    private void ViewSales()\\n    {\\n        Console.WriteLine(\\\"\\\\nSales History:\\\");\\n        if (_sales.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No sales recorded.\\\");\\n            return;\\n        }\\n\\n        foreach (var sale in _sales)\\n        {\\n            Console.WriteLine($\\\"ID: {sale.Id}, Book: {sale.BookTitle}, Quantity: {sale.Quantity}, Total: {sale.TotalPrice:C}, Date: {sale.SaleDate}\\\");\\n        }\\n    }\\n\\n    private void CheckRestockAlerts()\\n    {\\n        Console.WriteLine(\\\"\\\\nRestock Alerts:\\\");\\n        if (_restockAlerts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No restock alerts.\\\");\\n            return;\\n        }\\n\\n        foreach (var alert in _restockAlerts)\\n        {\\n            Console.WriteLine($\\\"Book: {alert.BookTitle}, Current Quantity: {alert.CurrentQuantity}, Alert Date: {alert.AlertDate}\\\");\\n        }\\n    }\\n}\\n\\npublic class Book\\n{\\n    public int Id { get; set; }\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public decimal Price { get; set; }\\n    public int Quantity { get; set; }\\n}\\n\\npublic class Sale\\n{\\n    public int Id { get; set; }\\n    public int BookId { get; set; }\\n    public string BookTitle { get; set; }\\n    public int Quantity { get; set; }\\n    public decimal TotalPrice { get; set; }\\n    public DateTime SaleDate { get; set; }\\n}\\n\\npublic class RestockAlert\\n{\\n    public int Id { get; set; }\\n    public int BookId { get; set; }\\n    public string BookTitle { get; set; }\\n    public int CurrentQuantity { get; set; }\\n    public DateTime AlertDate { get; set; }\\n}\",\n  \"name\": \"Bookstore Inventory Manager\",\n  \"description\": \"A module for managing bookstore inventory, tracking sales, and generating restock alerts when inventory is low.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":2482,"total_tokens":3006,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":12},"system_fingerprint":"fp_3d5141a69a_prod0225"}