{
  "isFeatureImplemented": false,
  "updatedSourceCodeFiles": [
    {
      "filename": "Module.cs",
      "source_code": "using SelfEvolvingSoftware.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\n\npublic class BookInventoryManager : IGeneratedModule\n{\n    public string Name { get; set; } = \u0022Book Inventory Manager\u0022;\n    \n    private string _booksPath;\n    private string _salesPath;\n    private string _alertsPath;\n    private string _categoriesPath;\n    private string _suppliersPath;\n    \n    private List\u003CBook\u003E _books = new();\n    private List\u003CSale\u003E _sales = new();\n    private List\u003CRestockAlert\u003E _alerts = new();\n    private List\u003CCategory\u003E _categories = new();\n    private List\u003CSupplier\u003E _suppliers = new();\n\n    public bool Main(string dataFolder)\n    {\n        try\n        {\n            InitializeDataPaths(dataFolder);\n            LoadInitialData();\n            ShowMainMenu();\n            return true;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\u0022Module error: \u0022 \u002B ex.Message);\n            return false;\n        }\n    }\n\n    private void InitializeDataPaths(string rootPath)\n    {\n        Directory.CreateDirectory(rootPath);\n        _booksPath = Path.Combine(rootPath, \u0022books.json\u0022);\n        _salesPath = Path.Combine(rootPath, \u0022sales.json\u0022);\n        _alertsPath = Path.Combine(rootPath, \u0022alerts.json\u0022);\n        _categoriesPath = Path.Combine(rootPath, \u0022categories.json\u0022);\n        _suppliersPath = Path.Combine(rootPath, \u0022suppliers.json\u0022);\n    }\n\n    private void LoadInitialData()\n    {\n        _books = LoadData\u003CBook\u003E(_booksPath);\n        _sales = LoadData\u003CSale\u003E(_salesPath);\n        _alerts = LoadData\u003CRestockAlert\u003E(_alertsPath);\n        _categories = LoadData\u003CCategory\u003E(_categoriesPath);\n        _suppliers = LoadData\u003CSupplier\u003E(_suppliersPath);\n    }\n\n    private List\u003CT\u003E LoadData\u003CT\u003E(string path) where T : new()\n    {\n        if (!File.Exists(path)) return new List\u003CT\u003E();\n        var json = File.ReadAllText(path);\n        return JsonSerializer.Deserialize\u003CList\u003CT\u003E\u003E(json) ?? new List\u003CT\u003E();\n    }\n\n    private void SaveData\u003CT\u003E(string path, List\u003CT\u003E data)\n    {\n        var json = JsonSerializer.Serialize(data);\n        File.WriteAllText(path, json);\n    }\n\n    private void ShowMainMenu()\n    {\n        while (true)\n        {\n            Console.Clear();\n            Console.WriteLine(\u0022Bookstore Inventory Management System\u0022);\n            Console.WriteLine(\u00221. Add Book\u0022);\n            Console.WriteLine(\u00222. Update Book\u0022);\n            Console.WriteLine(\u00223. Delete Book\u0022);\n            Console.WriteLine(\u00224. View Books\u0022);\n            Console.WriteLine(\u00225. Search Books\u0022);\n            Console.WriteLine(\u00226. Record Sale\u0022);\n            Console.WriteLine(\u00227. Restock Alerts\u0022);\n            Console.WriteLine(\u00228. Generate Reports\u0022);\n            Console.WriteLine(\u00229. Adjust Thresholds\u0022);\n            Console.WriteLine(\u002210. Exit\u0022);\n\n            var choice = Console.ReadLine();\n            switch (choice)\n            {\n                case \u00221\u0022: AddBook(); break;\n                case \u00222\u0022: UpdateBook(); break;\n                case \u00223\u0022: DeleteBook(); break;\n                case \u00224\u0022: ViewBooks(); break;\n                case \u00225\u0022: SearchBooks(); break;\n                case \u00226\u0022: RecordSale(); break;\n                case \u00227\u0022: ShowRestockAlerts(); break;\n                case \u00228\u0022: GenerateReports(); break;\n                case \u00229\u0022: AdjustThresholds(); break;\n                case \u002210\u0022: SaveAllData(); return;\n                default: Console.WriteLine(\u0022Invalid option\u0022); break;\n            }\n        }\n    }\n\n    private void AddBook()\n    {\n        var book = new Book();\n        Console.Write(\u0022Enter ISBN: \u0022);\n        book.ISBN = Console.ReadLine();\n        Console.Write(\u0022Enter Title: \u0022);\n        book.Title = Console.ReadLine();\n        Console.Write(\u0022Enter Author: \u0022);\n        book.Author = Console.ReadLine();\n        Console.Write(\u0022Enter Price: \u0022);\n        book.Price = decimal.Parse(Console.ReadLine());\n        Console.Write(\u0022Initial Stock: \u0022);\n        book.CurrentStock = int.Parse(Console.ReadLine());\n        Console.Write(\u0022Minimum Stock Threshold: \u0022);\n        book.MinimumStockThreshold = int.Parse(Console.ReadLine());\n        \n        book.Id = Guid.NewGuid();\n        book.DateAdded = DateTime.Now;\n        book.LastUpdated = DateTime.Now;\n        \n        _books.Add(book);\n        SaveData(_booksPath, _books);\n        Console.WriteLine(\u0022Book added successfully\u0022);\n    }\n\n    private void UpdateBook()\n    {\n        Console.Write(\u0022Enter ISBN to update: \u0022);\n        var isbn = Console.ReadLine();\n        var book = _books.Find(b =\u003E b.ISBN == isbn);\n        \n        if (book == null)\n        {\n            Console.WriteLine(\u0022Book not found\u0022);\n            return;\n        }\n        \n        Console.Write(\u0022New Price (current: \u0022 \u002B book.Price \u002B \u0022): \u0022);\n        var priceInput = Console.ReadLine();\n        if (!string.IsNullOrEmpty(priceInput))\n            book.Price = decimal.Parse(priceInput);\n        \n        Console.Write(\u0022New Stock Quantity (current: \u0022 \u002B book.CurrentStock \u002B \u0022): \u0022);\n        var stockInput = Console.ReadLine();\n        if (!string.IsNullOrEmpty(stockInput))\n            book.CurrentStock = int.Parse(stockInput);\n        \n        book.LastUpdated = DateTime.Now;\n        SaveData(_booksPath, _books);\n        Console.WriteLine(\u0022Book updated successfully\u0022);\n    }\n\n    private void DeleteBook()\n    {\n        Console.Write(\u0022Enter ISBN to delete: \u0022);\n        var isbn = Console.ReadLine();\n        var book = _books.Find(b =\u003E b.ISBN == isbn);\n        \n        if (book != null)\n        {\n            _books.Remove(book);\n            SaveData(_booksPath, _books);\n            Console.WriteLine(\u0022Book removed successfully\u0022);\n        }\n        else\n        {\n            Console.WriteLine(\u0022Book not found\u0022);\n        }\n    }\n\n    private void ViewBooks()\n    {\n        Console.WriteLine(\u0022List of All Books:\u0022);\n        foreach (var book in _books)\n        {\n            Console.WriteLine($\u0022ISBN: {book.ISBN}, Title: {book.Title}, Author: {book.Author}, Price: {book.Price}, Stock: {book.CurrentStock}, Threshold: {book.MinimumStockThreshold}\u0022);\n        }\n        Console.WriteLine(\u0022Press any key to continue...\u0022);\n        Console.ReadKey();\n    }\n\n    private void SearchBooks()\n    {\n        Console.Write(\u0022Enter search term (ISBN, Title, or Author): \u0022);\n        var searchTerm = Console.ReadLine()?.ToLower();\n\n        var results = _books.Where(b =\u003E\n            b.ISBN.ToLower().Contains(searchTerm) ||\n            b.Title.ToLower().Contains(searchTerm) ||\n            b.Author.ToLower().Contains(searchTerm)\n        ).ToList();\n\n        Console.WriteLine($\u0022Found {results.Count} matches:\u0022);\n        foreach (var book in results)\n        {\n            Console.WriteLine($\u0022ISBN: {book.ISBN}, Title: {book.Title}, Author: {book.Author}, Price: {book.Price}, Stock: {book.CurrentStock}\u0022);\n        }\n        Console.WriteLine(\u0022Press any key to continue...\u0022);\n        Console.ReadKey();\n    }\n\n    private void RecordSale()\n    {\n        Console.Write(\u0022Enter Book ISBN: \u0022);\n        var isbn = Console.ReadLine();\n        var book = _books.Find(b =\u003E b.ISBN == isbn);\n        \n        if (book == null || book.CurrentStock \u003C= 0)\n        {\n            Console.WriteLine(\u0022Book not available\u0022);\n            return;\n        }\n        \n        Console.Write(\u0022Quantity sold: \u0022);\n        var qty = int.Parse(Console.ReadLine());\n        \n        if (qty \u003E book.CurrentStock)\n        {\n            Console.WriteLine(\u0022Insufficient stock\u0022);\n            return;\n        }\n        \n        var sale = new Sale\n        {\n            Id = Guid.NewGuid(),\n            BookId = book.Id,\n            Quantity = qty,\n            UnitPrice = book.Price,\n            TotalPrice = qty * book.Price,\n            SaleDate = DateTime.Now\n        };\n        \n        book.CurrentStock -= qty;\n        _sales.Add(sale);\n        SaveData(_salesPath, _sales);\n        SaveData(_booksPath, _books);\n        CheckRestockAlerts(book);\n        Console.WriteLine(\u0022Sale recorded successfully\u0022);\n    }\n\n    private void CheckRestockAlerts(Book book)\n    {\n        if (book.CurrentStock \u003E= book.MinimumStockThreshold) return;\n        \n        var existingAlert = _alerts.Find(a =\u003E \n            a.BookId == book.Id \u0026\u0026 \n            a.Status == \u0022new\u0022);\n        \n        if (existingAlert != null) return;\n        \n        _alerts.Add(new RestockAlert\n        {\n            Id = Guid.NewGuid(),\n            BookId = book.Id,\n            CurrentStock = book.CurrentStock,\n            Threshold = book.MinimumStockThreshold,\n            AlertDate = DateTime.Now,\n            Status = \u0022new\u0022\n        });\n        \n        SaveData(_alertsPath, _alerts);\n    }\n\n    private void ShowRestockAlerts()\n    {\n        Console.WriteLine(\u0022Current Restock Alerts:\u0022);\n        foreach (var alert in _alerts)\n        {\n            var book = _books.Find(b =\u003E b.Id == alert.BookId);\n            Console.WriteLine(\u0022Book: \u0022 \u002B book?.Title \u002B \u0022 | Current Stock: \u0022 \u002B \n                            alert.CurrentStock \u002B \u0022 | Threshold: \u0022 \u002B alert.Threshold);\n        }\n        Console.ReadKey();\n    }\n\n    private void GenerateReports()\n    {\n        Console.WriteLine(\u0022Inventory Status Report\u0022);\n        Console.WriteLine(\u0022Total Books: \u0022 \u002B _books.Count);\n        Console.WriteLine(\u0022Low Stock Items: \u0022 \u002B _alerts.Count);\n        Console.WriteLine(\u0022Total Sales: \u0022 \u002B _sales.Count);\n        Console.ReadKey();\n    }\n\n    private void AdjustThresholds()\n    {\n        Console.Write(\u0022Enter ISBN: \u0022);\n        var isbn = Console.ReadLine();\n        var book = _books.Find(b =\u003E b.ISBN == isbn);\n        \n        if (book == null)\n        {\n            Console.WriteLine(\u0022Book not found\u0022);\n            return;\n        }\n        \n        Console.Write(\u0022New Minimum Threshold (current: \u0022 \u002B book.MinimumStockThreshold \u002B \u0022): \u0022);\n        book.MinimumStockThreshold = int.Parse(Console.ReadLine());\n        book.LastUpdated = DateTime.Now;\n        SaveData(_booksPath, _books);\n        CheckRestockAlerts(book);\n        Console.WriteLine(\u0022Threshold updated successfully\u0022);\n    }\n\n    private void SaveAllData()\n    {\n        SaveData(_booksPath, _books);\n        SaveData(_salesPath, _sales);\n        SaveData(_alertsPath, _alerts);\n        SaveData(_categoriesPath, _categories);\n        SaveData(_suppliersPath, _suppliers);\n    }\n}\n\npublic class Book\n{\n    public Guid Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string ISBN { get; set; }\n    public decimal Price { get; set; }\n    public int CurrentStock { get; set; }\n    public int MinimumStockThreshold { get; set; }\n    public DateTime DateAdded { get; set; }\n    public DateTime LastUpdated { get; set; }\n}\n\npublic class Sale\n{\n    public Guid Id { get; set; }\n    public Guid BookId { get; set; }\n    public int Quantity { get; set; }\n    public decimal UnitPrice { get; set; }\n    public decimal TotalPrice { get; set; }\n    public DateTime SaleDate { get; set; }\n}\n\npublic class RestockAlert\n{\n    public Guid Id { get; set; }\n    public Guid BookId { get; set; }\n    public int CurrentStock { get; set; }\n    public int Threshold { get; set; }\n    public DateTime AlertDate { get; set; }\n    public string Status { get; set; }\n}\n\npublic class Category\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n}\n\npublic class Supplier\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string ContactInfo { get; set; }\n    public int LeadTime { get; set; }\n    public bool PreferredStatus { get; set; }\n}"
    }
  ],
  "required_nugets": []
}