{"id":"587944c1-0987-49ee-b7c9-18e0dd764ee4","object":"chat.completion","created":1743796815,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class CaffeineTrackerModule\\n{\\n    public string Name { get; set; } = \\\"Caffeine Intake Tracker\\\";\\n    \\n    private string dataFilePath;\\n    \\n    public CaffeineTrackerModule()\\n    {\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Caffeine Intake Tracker module is running...\\\");\\n        \\n        dataFilePath = Path.Combine(dataFolder, \\\"caffeine_intake.json\\\");\\n        \\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add caffeine intake\\\");\\n            Console.WriteLine(\\\"2. View today's intake\\\");\\n            Console.WriteLine(\\\"3. View weekly summary\\\");\\n            Console.WriteLine(\\\"4. Exit module\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            var input = Console.ReadLine();\\n            \\n            if (!int.TryParse(input, out int option))\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n                continue;\\n            }\\n            \\n            switch (option)\\n            {\\n                case 1:\\n                    AddCaffeineIntake();\\n                    break;\\n                case 2:\\n                    ViewTodaysIntake();\\n                    break;\\n                case 3:\\n                    ViewWeeklySummary();\\n                    break;\\n                case 4:\\n                    Console.WriteLine(\\\"Exiting Caffeine Intake Tracker module...\\\");\\n                    return true;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private void AddCaffeineIntake()\\n    {\\n        Console.Write(\\\"Enter caffeine amount (mg): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount. Please enter a number.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter source (e.g., Coffee, Tea, Soda): \\\");\\n        string source = Console.ReadLine();\\n        \\n        if (string.IsNullOrWhiteSpace(source))\\n        {\\n            Console.WriteLine(\\\"Source cannot be empty.\\\");\\n            return;\\n        }\\n        \\n        var intake = new CaffeineIntake\\n        {\\n            Date = DateTime.Now,\\n            Amount = amount,\\n            Source = source\\n        };\\n        \\n        var allIntakes = LoadIntakes();\\n        allIntakes.Add(intake);\\n        \\n        SaveIntakes(allIntakes);\\n        \\n        Console.WriteLine(\\\"Caffeine intake recorded successfully.\\\");\\n    }\\n    \\n    private void ViewTodaysIntake()\\n    {\\n        var today = DateTime.Now.Date;\\n        var allIntakes = LoadIntakes();\\n        var todaysIntakes = allIntakes.FindAll(i => i.Date.Date == today);\\n        \\n        if (todaysIntakes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No caffeine intake recorded for today.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nToday's Caffeine Intake:\\\");\\n        Console.WriteLine(\\\"------------------------\\\");\\n        \\n        int total = 0;\\n        foreach (var intake in todaysIntakes)\\n        {\\n            Console.WriteLine(\\\"{0}: {1}mg from {2}\\\", intake.Date.ToString(\\\"HH:mm\\\"), intake.Amount, intake.Source);\\n            total += intake.Amount;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nTotal for today: {0}mg\\\", total);\\n    }\\n    \\n    private void ViewWeeklySummary()\\n    {\\n        var endDate = DateTime.Now.Date;\\n        var startDate = endDate.AddDays(-6);\\n        var allIntakes = LoadIntakes();\\n        \\n        Console.WriteLine(\\\"\\\\nWeekly Caffeine Intake Summary:\\\");\\n        Console.WriteLine(\\\"--------------------------------\\\");\\n        \\n        var dailyTotals = new Dictionary<DateTime, int>();\\n        \\n        for (var date = startDate; date <= endDate; date = date.AddDays(1))\\n        {\\n            dailyTotals[date] = 0;\\n        }\\n        \\n        foreach (var intake in allIntakes)\\n        {\\n            var intakeDate = intake.Date.Date;\\n            if (intakeDate >= startDate && intakeDate <= endDate)\\n            {\\n                dailyTotals[intakeDate] += intake.Amount;\\n            }\\n        }\\n        \\n        foreach (var kvp in dailyTotals)\\n        {\\n            Console.WriteLine(\\\"{0}: {1}mg\\\", kvp.Key.ToString(\\\"ddd, MMM dd\\\"), kvp.Value);\\n        }\\n        \\n        int weeklyTotal = dailyTotals.Values.Sum();\\n        Console.WriteLine(\\\"\\\\nTotal for the week: {0}mg\\\", weeklyTotal);\\n    }\\n    \\n    private List<CaffeineIntake> LoadIntakes()\\n    {\\n        if (!File.Exists(dataFilePath))\\n        {\\n            return new List<CaffeineIntake>();\\n        }\\n        \\n        var json = File.ReadAllText(dataFilePath);\\n        return JsonSerializer.Deserialize<List<CaffeineIntake>>(json) ?? new List<CaffeineIntake>();\\n    }\\n    \\n    private void SaveIntakes(List<CaffeineIntake> intakes)\\n    {\\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        var json = JsonSerializer.Serialize(intakes, options);\\n        File.WriteAllText(dataFilePath, json);\\n    }\\n}\\n\\npublic class CaffeineIntake\\n{\\n    public DateTime Date { get; set; }\\n    public int Amount { get; set; }\\n    public string Source { get; set; }\\n}\",\n  \"name\": \"Caffeine Intake Tracker\",\n  \"description\": \"Tracks daily caffeine intake with sources and provides daily/weekly summaries\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":518,"completion_tokens":1461,"total_tokens":1979,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":6},"system_fingerprint":"fp_3d5141a69a_prod0225"}