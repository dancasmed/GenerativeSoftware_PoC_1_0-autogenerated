
{"id":"35e1d997-858c-4f5c-af9c-9b6c5c252c0d","object":"chat.completion","created":1744182367,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class CharityDonationManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Charity Donation Manager\\\";\\n    \\n    private string donationsFilePath;\\n    private string eventsFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Charity Donation Manager...\\\");\\n        \\n        donationsFilePath = Path.Combine(dataFolder, \\\"donations.json\\\");\\n        eventsFilePath = Path.Combine(dataFolder, \\\"events.json\\\");\\n        \\n        EnsureDataFilesExist();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nCharity Donation Manager\\\");\\n            Console.WriteLine(\\\"1. Record Donation\\\");\\n            Console.WriteLine(\\\"2. List All Donations\\\");\\n            Console.WriteLine(\\\"3. Create Fundraising Event\\\");\\n            Console.WriteLine(\\\"4. List All Events\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    RecordDonation();\\n                    break;\\n                case \\\"2\\\":\\n                    ListDonations();\\n                    break;\\n                case \\\"3\\\":\\n                    CreateEvent();\\n                    break;\\n                case \\\"4\\\":\\n                    ListEvents();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    Console.WriteLine(\\\"Saving data and exiting...\\\");\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void EnsureDataFilesExist()\\n    {\\n        if (!File.Exists(donationsFilePath))\\n        {\\n            File.WriteAllText(donationsFilePath, \\\"[]\\\");\\n        }\\n        \\n        if (!File.Exists(eventsFilePath))\\n        {\\n            File.WriteAllText(eventsFilePath, \\\"[]\\\");\\n        }\\n    }\\n    \\n    private void RecordDonation()\\n    {\\n        Console.Write(\\\"Enter donor name: \\\");\\n        string donorName = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter donation amount: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount. Please enter a valid number.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter donation date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))\\n        {\\n            date = DateTime.Now;\\n        }\\n        \\n        var donation = new Donation\\n        {\\n            Id = Guid.NewGuid(),\\n            DonorName = donorName,\\n            Amount = amount,\\n            Date = date\\n        };\\n        \\n        var donations = LoadDonations();\\n        donations.Add(donation);\\n        SaveDonations(donations);\\n        \\n        Console.WriteLine(\\\"Donation recorded successfully!\\\");\\n    }\\n    \\n    private void ListDonations()\\n    {\\n        var donations = LoadDonations();\\n        \\n        Console.WriteLine(\\\"\\\\nAll Donations:\\\");\\n        Console.WriteLine(\\\"--------------------------------------------------\\\");\\n        Console.WriteLine(\\\"ID\\\\t\\\\t\\\\tDonor\\\\t\\\\tAmount\\\\t\\\\tDate\\\");\\n        Console.WriteLine(\\\"--------------------------------------------------\\\");\\n        \\n        foreach (var donation in donations)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}\\\\t{1}\\\\t{2:C}\\\\t{3:yyyy-MM-dd}\\\", \\n                donation.Id, \\n                donation.DonorName, \\n                donation.Amount, \\n                donation.Date));\\n        }\\n        \\n        Console.WriteLine(\\\"--------------------------------------------------\\\");\\n        Console.WriteLine(string.Format(\\\"Total donations: {0:C}\\\", CalculateTotalDonations()));\\n    }\\n    \\n    private void CreateEvent()\\n    {\\n        Console.Write(\\\"Enter event name: \\\");\\n        string eventName = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter event date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime eventDate))\\n        {\\n            eventDate = DateTime.Now.AddDays(7);\\n        }\\n        \\n        Console.Write(\\\"Enter fundraising goal: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal goal))\\n        {\\n            Console.WriteLine(\\\"Invalid goal amount. Please enter a valid number.\\\");\\n            return;\\n        }\\n        \\n        var fundraisingEvent = new FundraisingEvent\\n        {\\n            Id = Guid.NewGuid(),\\n            Name = eventName,\\n            Date = eventDate,\\n            FundraisingGoal = goal,\\n            Donations = new List<Guid>()\\n        };\\n        \\n        var events = LoadEvents();\\n        events.Add(fundraisingEvent);\\n        SaveEvents(events);\\n        \\n        Console.WriteLine(\\\"Fundraising event created successfully!\\\");\\n    }\\n    \\n    private void ListEvents()\\n    {\\n        var events = LoadEvents();\\n        var donations = LoadDonations();\\n        \\n        Console.WriteLine(\\\"\\\\nAll Fundraising Events:\\\");\\n        Console.WriteLine(\\\"----------------------------------------------------------------------------\\\");\\n        Console.WriteLine(\\\"ID\\\\t\\\\t\\\\tEvent Name\\\\t\\\\tDate\\\\t\\\\tGoal\\\\t\\\\tRaised\\\");\\n        Console.WriteLine(\\\"----------------------------------------------------------------------------\\\");\\n        \\n        foreach (var ev in events)\\n        {\\n            decimal raised = 0;\\n            foreach (var donationId in ev.Donations)\\n            {\\n                var donation = donations.Find(d => d.Id == donationId);\\n                if (donation != null)\\n                {\\n                    raised += donation.Amount;\\n                }\\n            }\\n            \\n            Console.WriteLine(string.Format(\\\"{0}\\\\t{1}\\\\t{2:yyyy-MM-dd}\\\\t{3:C}\\\\t{4:C}\\\", \\n                ev.Id, \\n                ev.Name, \\n                ev.Date, \\n                ev.FundraisingGoal, \\n                raised));\\n        }\\n        \\n        Console.WriteLine(\\\"----------------------------------------------------------------------------\\\");\\n    }\\n    \\n    private List<Donation> LoadDonations()\\n    {\\n        string json = File.ReadAllText(donationsFilePath);\\n        return JsonSerializer.Deserialize<List<Donation>>(json) ?? new List<Donation>();\\n    }\\n    \\n    private void SaveDonations(List<Donation> donations)\\n    {\\n        string json = JsonSerializer.Serialize(donations);\\n        File.WriteAllText(donationsFilePath, json);\\n    }\\n    \\n    private List<FundraisingEvent> LoadEvents()\\n    {\\n        string json = File.ReadAllText(eventsFilePath);\\n        return JsonSerializer.Deserialize<List<FundraisingEvent>>(json) ?? new List<FundraisingEvent>();\\n    }\\n    \\n    private void SaveEvents(List<FundraisingEvent> events)\\n    {\\n        string json = JsonSerializer.Serialize(events);\\n        File.WriteAllText(eventsFilePath, json);\\n    }\\n    \\n    private decimal CalculateTotalDonations()\\n    {\\n        var donations = LoadDonations();\\n        decimal total = 0;\\n        \\n        foreach (var donation in donations)\\n        {\\n            total += donation.Amount;\\n        }\\n        \\n        return total;\\n    }\\n}\\n\\npublic class Donation\\n{\\n    public Guid Id { get; set; }\\n    public string DonorName { get; set; }\\n    public decimal Amount { get; set; }\\n    public DateTime Date { get; set; }\\n}\\n\\npublic class FundraisingEvent\\n{\\n    public Guid Id { get; set; }\\n    public string Name { get; set; }\\n    public DateTime Date { get; set; }\\n    public decimal FundraisingGoal { get; set; }\\n    public List<Guid> Donations { get; set; }\\n}\",\n  \"name\": \"Charity Donation Manager\",\n  \"description\": \"A system to manage a charity's donation records and fundraising events with JSON persistence\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":525,"completion_tokens":1994,"total_tokens":2519,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":13},"system_fingerprint":"fp_3d5141a69a_prod0225"}