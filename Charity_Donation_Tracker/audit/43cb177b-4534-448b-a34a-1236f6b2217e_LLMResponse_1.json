{"id":"bd86e0e4-36a9-46fd-ac99-2249a36a260e","object":"chat.completion","created":1743794210,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class CharityDonationTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Charity Donation Tracker\\\";\\n\\n    private string donationsFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Charity Donation Tracker module...\\\");\\n\\n        donationsFilePath = Path.Combine(dataFolder, \\\"donations.json\\\");\\n\\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add Donation\\\");\\n            Console.WriteLine(\\\"2. View All Donations\\\");\\n            Console.WriteLine(\\\"3. Calculate Total Donations\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddDonation();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewAllDonations();\\n                    break;\\n                case \\\"3\\\":\\n                    CalculateTotalDonations();\\n                    break;\\n                case \\\"4\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Exiting Charity Donation Tracker module...\\\");\\n        return true;\\n    }\\n\\n    private void AddDonation()\\n    {\\n        Console.Write(\\\"Enter donor name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter donor email: \\\");\\n        string email = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter donation amount: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount. Please enter a valid number.\\\");\\n            return;\\n        }\\n\\n        var donation = new Donation\\n        {\\n            DonorName = name,\\n            DonorEmail = email,\\n            Amount = amount,\\n            Date = DateTime.Now\\n        };\\n\\n        List<Donation> donations = LoadDonations();\\n        donations.Add(donation);\\n        SaveDonations(donations);\\n\\n        Console.WriteLine(\\\"Donation added successfully!\\\");\\n    }\\n\\n    private void ViewAllDonations()\\n    {\\n        List<Donation> donations = LoadDonations();\\n\\n        if (donations.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No donations recorded yet.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAll Donations:\\\");\\n        foreach (var donation in donations)\\n        {\\n            Console.WriteLine($\\\"Donor: {donation.DonorName}\\\");\\n            Console.WriteLine($\\\"Email: {donation.DonorEmail}\\\");\\n            Console.WriteLine($\\\"Amount: {donation.Amount:C}\\\");\\n            Console.WriteLine($\\\"Date: {donation.Date}\\\");\\n            Console.WriteLine(\\\"----------------------------\\\");\\n        }\\n    }\\n\\n    private void CalculateTotalDonations()\\n    {\\n        List<Donation> donations = LoadDonations();\\n        decimal total = 0;\\n\\n        foreach (var donation in donations)\\n        {\\n            total += donation.Amount;\\n        }\\n\\n        Console.WriteLine($\\\"Total donations: {total:C}\\\");\\n    }\\n\\n    private List<Donation> LoadDonations()\\n    {\\n        if (!File.Exists(donationsFilePath))\\n        {\\n            return new List<Donation>();\\n        }\\n\\n        string json = File.ReadAllText(donationsFilePath);\\n        return JsonSerializer.Deserialize<List<Donation>>(json) ?? new List<Donation>();\\n    }\\n\\n    private void SaveDonations(List<Donation> donations)\\n    {\\n        string json = JsonSerializer.Serialize(donations);\\n        File.WriteAllText(donationsFilePath, json);\\n    }\\n\\n    private class Donation\\n    {\\n        public string DonorName { get; set; }\\n        public string DonorEmail { get; set; }\\n        public decimal Amount { get; set; }\\n        public DateTime Date { get; set; }\\n    }\\n}\",\n  \"name\": \"Charity Donation Tracker\",\n  \"description\": \"A module to track donations to a charity with donor details and amounts.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1109,"total_tokens":1631,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}