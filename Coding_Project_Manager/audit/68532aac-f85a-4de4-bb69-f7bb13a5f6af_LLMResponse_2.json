{"id":"5faa0a3f-1530-4bc1-96ff-1b7462097329","object":"chat.completion","created":1743797738,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class CodingProjectManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Coding Project Manager\\\";\\n    \\n    private string _projectsFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Coding Project Manager...\\\");\\n        \\n        _projectsFilePath = Path.Combine(dataFolder, \\\"projects.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        List<CodingProject> projects = LoadProjects();\\n        \\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddProject(projects);\\n                    break;\\n                case \\\"2\\\":\\n                    UpdateProjectProgress(projects);\\n                    break;\\n                case \\\"3\\\":\\n                    ListProjects(projects);\\n                    break;\\n                case \\\"4\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n            \\n            SaveProjects(projects);\\n        }\\n        \\n        Console.WriteLine(\\\"Exiting Coding Project Manager...\\\");\\n        return true;\\n    }\\n    \\n    private List<CodingProject> LoadProjects()\\n    {\\n        if (!File.Exists(_projectsFilePath))\\n        {\\n            return new List<CodingProject>();\\n        }\\n        \\n        string json = File.ReadAllText(_projectsFilePath);\\n        return JsonSerializer.Deserialize<List<CodingProject>>(json);\\n    }\\n    \\n    private void SaveProjects(List<CodingProject> projects)\\n    {\\n        string json = JsonSerializer.Serialize(projects);\\n        File.WriteAllText(_projectsFilePath, json);\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nCoding Project Manager\\\");\\n        Console.WriteLine(\\\"1. Add new project\\\");\\n        Console.WriteLine(\\\"2. Update project progress\\\");\\n        Console.WriteLine(\\\"3. List all projects\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddProject(List<CodingProject> projects)\\n    {\\n        Console.Write(\\\"Enter project name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter project description: \\\");\\n        string description = Console.ReadLine();\\n        \\n        projects.Add(new CodingProject\\n        {\\n            Name = name,\\n            Description = description,\\n            Progress = 0,\\n            StartDate = DateTime.Now\\n        });\\n        \\n        Console.WriteLine(\\\"Project added successfully.\\\");\\n    }\\n    \\n    private void UpdateProjectProgress(List<CodingProject> projects)\\n    {\\n        if (projects.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No projects available.\\\");\\n            return;\\n        }\\n        \\n        ListProjects(projects);\\n        \\n        Console.Write(\\\"Enter project number to update: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int index) && index > 0 && index <= projects.Count)\\n        {\\n            Console.Write(\\\"Enter new progress (0-100): \\\");\\n            if (int.TryParse(Console.ReadLine(), out int progress) && progress >= 0 && progress <= 100)\\n            {\\n                projects[index - 1].Progress = progress;\\n                projects[index - 1].LastUpdated = DateTime.Now;\\n                Console.WriteLine(\\\"Progress updated successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid progress value.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid project number.\\\");\\n        }\\n    }\\n    \\n    private void ListProjects(List<CodingProject> projects)\\n    {\\n        if (projects.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No projects available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nProjects List:\\\");\\n        for (int i = 0; i < projects.Count; i++)\\n        {\\n            var project = projects[i];\\n            Console.WriteLine($\\\"{i + 1}. {project.Name} - {project.Description}\\\");\\n            Console.WriteLine($\\\"   Progress: {project.Progress}%\\\");\\n            Console.WriteLine($\\\"   Started: {project.StartDate:yyyy-MM-dd}\\\");\\n            if (project.LastUpdated.HasValue)\\n            {\\n                Console.WriteLine($\\\"   Last Updated: {project.LastUpdated.Value:yyyy-MM-dd}\\\");\\n            }\\n            Console.WriteLine();\\n        }\\n    }\\n}\\n\\npublic class CodingProject\\n{\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public int Progress { get; set; }\\n    public DateTime StartDate { get; set; }\\n    public DateTime? LastUpdated { get; set; }\\n}\",\n  \"name\": \"Coding Project Manager\",\n  \"description\": \"A module for managing coding projects with progress tracking functionality.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1292,"total_tokens":1813,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}