
{"id":"078758a3-a242-4ca5-b6c2-67ecc72d9257","object":"chat.completion","created":1744174900,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ComicBookManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Comic Book Manager\\\";\\n    \\n    private List<ComicBook> _comicBooks;\\n    private string _dataFilePath;\\n    \\n    public ComicBookManager()\\n    {\\n        _comicBooks = new List<ComicBook>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Comic Book Manager module is running...\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"comicbooks.json\\\");\\n        \\n        LoadComicBooks();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddComicBook();\\n                    break;\\n                case \\\"2\\\":\\n                    ListComicBooks();\\n                    break;\\n                case \\\"3\\\":\\n                    SearchComicBooks();\\n                    break;\\n                case \\\"4\\\":\\n                    SaveComicBooks();\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nComic Book Manager\\\");\\n        Console.WriteLine(\\\"1. Add Comic Book\\\");\\n        Console.WriteLine(\\\"2. List All Comic Books\\\");\\n        Console.WriteLine(\\\"3. Search Comic Books\\\");\\n        Console.WriteLine(\\\"4. Exit and Save\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddComicBook()\\n    {\\n        Console.Write(\\\"Enter title: \\\");\\n        var title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter issue number: \\\");\\n        var issueNumber = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter publisher: \\\");\\n        var publisher = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter year: \\\");\\n        var yearInput = Console.ReadLine();\\n        \\n        if (int.TryParse(yearInput, out int year))\\n        {\\n            _comicBooks.Add(new ComicBook\\n            {\\n                Title = title,\\n                IssueNumber = issueNumber,\\n                Publisher = publisher,\\n                Year = year\\n            });\\n            \\n            Console.WriteLine(\\\"Comic book added successfully!\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid year. Comic book not added.\\\");\\n        }\\n    }\\n    \\n    private void ListComicBooks()\\n    {\\n        Console.WriteLine(\\\"\\\\nAll Comic Books:\\\");\\n        Console.WriteLine(\\\"----------------\\\");\\n        \\n        if (_comicBooks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No comic books found.\\\");\\n            return;\\n        }\\n        \\n        foreach (var comic in _comicBooks)\\n        {\\n            Console.WriteLine(\\\"Title: \\\" + comic.Title);\\n            Console.WriteLine(\\\"Issue: \\\" + comic.IssueNumber);\\n            Console.WriteLine(\\\"Publisher: \\\" + comic.Publisher);\\n            Console.WriteLine(\\\"Year: \\\" + comic.Year);\\n            Console.WriteLine(\\\"----------------\\\");\\n        }\\n    }\\n    \\n    private void SearchComicBooks()\\n    {\\n        Console.Write(\\\"Enter search term: \\\");\\n        var term = Console.ReadLine().ToLower();\\n        \\n        var results = _comicBooks.FindAll(c => \\n            c.Title.ToLower().Contains(term) || \\n            c.Publisher.ToLower().Contains(term) ||\\n            c.IssueNumber.ToLower().Contains(term));\\n        \\n        Console.WriteLine(\\\"\\\\nSearch Results:\\\");\\n        Console.WriteLine(\\\"----------------\\\");\\n        \\n        if (results.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No matching comic books found.\\\");\\n            return;\\n        }\\n        \\n        foreach (var comic in results)\\n        {\\n            Console.WriteLine(\\\"Title: \\\" + comic.Title);\\n            Console.WriteLine(\\\"Issue: \\\" + comic.IssueNumber);\\n            Console.WriteLine(\\\"Publisher: \\\" + comic.Publisher);\\n            Console.WriteLine(\\\"Year: \\\" + comic.Year);\\n            Console.WriteLine(\\\"----------------\\\");\\n        }\\n    }\\n    \\n    private void LoadComicBooks()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                var json = File.ReadAllText(_dataFilePath);\\n                _comicBooks = JsonSerializer.Deserialize<List<ComicBook>>(json);\\n                Console.WriteLine(\\\"Comic books loaded successfully.\\\");\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Error loading comic books: \\\" + ex.Message);\\n            }\\n        }\\n    }\\n    \\n    private void SaveComicBooks()\\n    {\\n        try\\n        {\\n            var options = new JsonSerializerOptions { WriteIndented = true };\\n            var json = JsonSerializer.Serialize(_comicBooks, options);\\n            File.WriteAllText(_dataFilePath, json);\\n            Console.WriteLine(\\\"Comic books saved successfully.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving comic books: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class ComicBook\\n{\\n    public string Title { get; set; }\\n    public string IssueNumber { get; set; }\\n    public string Publisher { get; set; }\\n    public int Year { get; set; }\\n}\",\n  \"name\": \"Comic Book Manager\",\n  \"description\": \"A module for managing a collection of comic books with CRUD operations and search functionality. Data is persisted in JSON format.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":518,"completion_tokens":1494,"total_tokens":2012,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":6},"system_fingerprint":"fp_3d5141a69a_prod0225"}