{"id":"91b43ac1-a28e-4643-8034-2c1e8c815320","object":"chat.completion","created":1743786687,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class CompoundInterestCalculator : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Compound Interest Calculator\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Compound Interest Calculator...\\\");\\n\\n        try\\n        {\\n            string configPath = Path.Combine(dataFolder, \\\"interest_config.json\\\");\\n            string resultPath = Path.Combine(dataFolder, \\\"interest_results.json\\\");\\n\\n            if (!File.Exists(configPath))\\n            {\\n                CreateDefaultConfig(configPath);\\n                Console.WriteLine(\\\"Created default configuration file. Please edit it and run again.\\\");\\n                return false;\\n            }\\n\\n            var config = LoadConfiguration(configPath);\\n            var result = CalculateCompoundInterest(config);\\n\\n            SaveResults(resultPath, result);\\n            Console.WriteLine(\\\"Calculation completed successfully. Results saved.\\\");\\n\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private InterestConfig LoadConfiguration(string filePath)\\n    {\\n        string json = File.ReadAllText(filePath);\\n        return JsonSerializer.Deserialize<InterestConfig>(json);\\n    }\\n\\n    private InterestResult CalculateCompoundInterest(InterestConfig config)\\n    {\\n        double amount = config.Principal;\\n        int periods = config.Years * config.CompoundsPerYear;\\n        double rate = config.AnnualInterestRate / config.CompoundsPerYear;\\n\\n        for (int i = 0; i < periods; i++)\\n        {\\n            amount *= (1 + rate);\\n        }\\n\\n        return new InterestResult\\n        {\\n            Principal = config.Principal,\\n            FinalAmount = Math.Round(amount, 2),\\n            InterestEarned = Math.Round(amount - config.Principal, 2),\\n            CalculationDate = DateTime.Now\\n        };\\n    }\\n\\n    private void SaveResults(string filePath, InterestResult result)\\n    {\\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        string json = JsonSerializer.Serialize(result, options);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private void CreateDefaultConfig(string filePath)\\n    {\\n        var defaultConfig = new InterestConfig\\n        {\\n            Principal = 1000,\\n            AnnualInterestRate = 0.05,\\n            Years = 5,\\n            CompoundsPerYear = 12\\n        };\\n\\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        string json = JsonSerializer.Serialize(defaultConfig, options);\\n        File.WriteAllText(filePath, json);\\n    }\\n}\\n\\npublic class InterestConfig\\n{\\n    public double Principal { get; set; }\\n    public double AnnualInterestRate { get; set; }\\n    public int Years { get; set; }\\n    public int CompoundsPerYear { get; set; }\\n}\\n\\npublic class InterestResult\\n{\\n    public double Principal { get; set; }\\n    public double FinalAmount { get; set; }\\n    public double InterestEarned { get; set; }\\n    public DateTime CalculationDate { get; set; }\\n}\",\n  \"name\": \"Compound Interest Calculator\",\n  \"description\": \"Calculates compound interest for savings accounts and saves results to JSON files\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":518,"completion_tokens":826,"total_tokens":1344,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":6},"system_fingerprint":"fp_3d5141a69a_prod0225"}