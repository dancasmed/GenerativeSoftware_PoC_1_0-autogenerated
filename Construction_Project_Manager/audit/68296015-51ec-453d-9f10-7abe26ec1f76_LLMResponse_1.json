
{"id":"4b26b922-300e-4fd8-99ce-e2b54d81ef49","object":"chat.completion","created":1744183951,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ConstructionProjectManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Construction Project Manager\\\";\\n\\n    private string projectsFilePath;\\n    private string budgetsFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Construction Project Manager...\\\");\\n\\n        projectsFilePath = Path.Combine(dataFolder, \\\"projects.json\\\");\\n        budgetsFilePath = Path.Combine(dataFolder, \\\"budgets.json\\\");\\n\\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n\\n        if (!File.Exists(projectsFilePath))\\n        {\\n            File.WriteAllText(projectsFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(budgetsFilePath))\\n        {\\n            File.WriteAllText(budgetsFilePath, \\\"[]\\\");\\n        }\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nConstruction Project Manager\\\");\\n            Console.WriteLine(\\\"1. Add Project\\\");\\n            Console.WriteLine(\\\"2. List Projects\\\");\\n            Console.WriteLine(\\\"3. Add Budget\\\");\\n            Console.WriteLine(\\\"4. List Budgets\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddProject();\\n                    break;\\n                case \\\"2\\\":\\n                    ListProjects();\\n                    break;\\n                case \\\"3\\\":\\n                    AddBudget();\\n                    break;\\n                case \\\"4\\\":\\n                    ListBudgets();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Construction Project Manager is shutting down...\\\");\\n        return true;\\n    }\\n\\n    private void AddProject()\\n    {\\n        Console.Write(\\\"Enter project name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter project location: \\\");\\n        string location = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter project start date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime startDate))\\n        {\\n            Console.WriteLine(\\\"Invalid date format.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter project end date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime endDate))\\n        {\\n            Console.WriteLine(\\\"Invalid date format.\\\");\\n            return;\\n        }\\n\\n\\n        var projects = LoadProjects();\\n        projects.Add(new Project\\n        {\\n            Id = Guid.NewGuid(),\\n            Name = name,\\n            Location = location,\\n            StartDate = startDate,\\n            EndDate = endDate\\n        });\\n\\n        SaveProjects(projects);\\n        Console.WriteLine(\\\"Project added successfully.\\\");\\n    }\\n\\n    private void ListProjects()\\n    {\\n        var projects = LoadProjects();\\n\\n        Console.WriteLine(\\\"\\\\nProjects List:\\\");\\n        foreach (var project in projects)\\n        {\\n            Console.WriteLine($\\\"ID: {project.Id}\\\");\\n            Console.WriteLine($\\\"Name: {project.Name}\\\");\\n            Console.WriteLine($\\\"Location: {project.Location}\\\");\\n            Console.WriteLine($\\\"Start Date: {project.StartDate:yyyy-MM-dd}\\\");\\n            Console.WriteLine($\\\"End Date: {project.EndDate:yyyy-MM-dd}\\\");\\n            Console.WriteLine();\\n        }\\n    }\\n\\n    private void AddBudget()\\n    {\\n        var projects = LoadProjects();\\n        if (projects.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No projects available. Please add a project first.\\\");\\n            return;\\n        }\\n\\n        ListProjects();\\n        Console.Write(\\\"Enter project ID for the budget: \\\");\\n        if (!Guid.TryParse(Console.ReadLine(), out Guid projectId))\\n        {\\n            Console.WriteLine(\\\"Invalid project ID.\\\");\\n            return;\\n        }\\n\\n        var project = projects.Find(p => p.Id == projectId);\\n        if (project == null)\\n        {\\n            Console.WriteLine(\\\"Project not found.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter budget amount: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter budget description: \\\");\\n        string description = Console.ReadLine();\\n\\n        var budgets = LoadBudgets();\\n        budgets.Add(new Budget\\n        {\\n            Id = Guid.NewGuid(),\\n            ProjectId = projectId,\\n            Amount = amount,\\n            Description = description,\\n            CreatedDate = DateTime.Now\\n        });\\n\\n        SaveBudgets(budgets);\\n        Console.WriteLine(\\\"Budget added successfully.\\\");\\n    }\\n\\n    private void ListBudgets()\\n    {\\n        var budgets = LoadBudgets();\\n        var projects = LoadProjects();\\n\\n        Console.WriteLine(\\\"\\\\nBudgets List:\\\");\\n        foreach (var budget in budgets)\\n        {\\n            var project = projects.Find(p => p.Id == budget.ProjectId);\\n            string projectName = project != null ? project.Name : \\\"Unknown Project\\\";\\n\\n            Console.WriteLine($\\\"ID: {budget.Id}\\\");\\n            Console.WriteLine($\\\"Project: {projectName}\\\");\\n            Console.WriteLine($\\\"Amount: {budget.Amount:C}\\\");\\n            Console.WriteLine($\\\"Description: {budget.Description}\\\");\\n            Console.WriteLine($\\\"Created Date: {budget.CreatedDate:yyyy-MM-dd}\\\");\\n            Console.WriteLine();\\n        }\\n    }\\n\\n    private List<Project> LoadProjects()\\n    {\\n        string json = File.ReadAllText(projectsFilePath);\\n        return JsonSerializer.Deserialize<List<Project>>(json) ?? new List<Project>();\\n    }\\n\\n    private void SaveProjects(List<Project> projects)\\n    {\\n        string json = JsonSerializer.Serialize(projects);\\n        File.WriteAllText(projectsFilePath, json);\\n    }\\n\\n    private List<Budget> LoadBudgets()\\n    {\\n        string json = File.ReadAllText(budgetsFilePath);\\n        return JsonSerializer.Deserialize<List<Budget>>(json) ?? new List<Budget>();\\n    }\\n\\n    private void SaveBudgets(List<Budget> budgets)\\n    {\\n        string json = JsonSerializer.Serialize(budgets);\\n        File.WriteAllText(budgetsFilePath, json);\\n    }\\n}\\n\\npublic class Project\\n{\\n    public Guid Id { get; set; }\\n    public string Name { get; set; }\\n    public string Location { get; set; }\\n    public DateTime StartDate { get; set; }\\n    public DateTime EndDate { get; set; }\\n}\\n\\npublic class Budget\\n{\\n    public Guid Id { get; set; }\\n    public Guid ProjectId { get; set; }\\n    public decimal Amount { get; set; }\\n    public string Description { get; set; }\\n    public DateTime CreatedDate { get; set; }\\n}\",\n  \"name\": \"Construction Project Manager\",\n  \"description\": \"A system to manage construction projects and their associated budgets\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":1797,"total_tokens":2321,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":12},"system_fingerprint":"fp_3d5141a69a_prod0225"}