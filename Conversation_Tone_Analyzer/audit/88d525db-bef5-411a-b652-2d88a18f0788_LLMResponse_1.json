
{"id":"0ee5ae79-2e23-4d3b-bbab-d86db5cabcea","object":"chat.completion","created":1744182560,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ToneAnalyzerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Conversation Tone Analyzer\\\";\\n\\n    private readonly Dictionary<string, int> _positiveWords = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase)\\n    {\\n        {\\\"happy\\\", 1}, {\\\"joy\\\", 1}, {\\\"excited\\\", 1}, {\\\"great\\\", 1}, {\\\"wonderful\\\", 1}, \\n        {\\\"awesome\\\", 1}, {\\\"fantastic\\\", 1}, {\\\"love\\\", 1}, {\\\"like\\\", 1}, {\\\"good\\\", 1}\\n    };\\n\\n    private readonly Dictionary<string, int> _negativeWords = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase)\\n    {\\n        {\\\"sad\\\", 1}, {\\\"angry\\\", 1}, {\\\"mad\\\", 1}, {\\\"hate\\\", 1}, {\\\"bad\\\", 1}, \\n        {\\\"terrible\\\", 1}, {\\\"awful\\\", 1}, {\\\"horrible\\\", 1}, {\\\"dislike\\\", 1}, {\\\"upset\\\", 1}\\n    };\\n\\n    private readonly Dictionary<string, int> _neutralWords = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase)\\n    {\\n        {\\\"ok\\\", 1}, {\\\"fine\\\", 1}, {\\\"neutral\\\", 1}, {\\\"alright\\\", 1}, {\\\"average\\\", 1}, \\n        {\\\"normal\\\", 1}, {\\\"regular\\\", 1}, {\\\"usual\\\", 1}, {\\\"standard\\\", 1}, {\\\"moderate\\\", 1}\\n    };\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Conversation Tone Analyzer Module Started\\\");\\n        Console.WriteLine(\\\"This module analyzes the tone of a conversation based on text input.\\\");\\n\\n        string inputText = GetUserInput(\\\"Enter the conversation text to analyze: \\\");\\n        if (string.IsNullOrWhiteSpace(inputText))\\n        {\\n            Console.WriteLine(\\\"No text provided for analysis.\\\");\\n            return false;\\n        }\\n\\n        var toneResult = AnalyzeTone(inputText);\\n        DisplayToneAnalysis(toneResult);\\n\\n        string savePath = Path.Combine(dataFolder, \\\"tone_analysis_results.json\\\");\\n        SaveAnalysisResults(savePath, toneResult, inputText);\\n\\n        Console.WriteLine(\\\"Analysis completed. Results saved to \\\" + savePath);\\n        return true;\\n    }\\n\\n    private string GetUserInput(string prompt)\\n    {\\n        Console.Write(prompt);\\n        return Console.ReadLine();\\n    }\\n\\n    private ToneAnalysisResult AnalyzeTone(string text)\\n    {\\n        string[] words = text.Split(new[] { ' ', '.', ',', '!', '?', ';', ':', '\\\\n', '\\\\r' }, StringSplitOptions.RemoveEmptyEntries);\\n        \\n        int positiveCount = 0;\\n        int negativeCount = 0;\\n        int neutralCount = 0;\\n\\n        foreach (var word in words)\\n        {\\n            if (_positiveWords.ContainsKey(word))\\n                positiveCount++;\\n            else if (_negativeWords.ContainsKey(word))\\n                negativeCount++;\\n            else if (_neutralWords.ContainsKey(word))\\n                neutralCount++;\\n        }\\n\\n        int totalWords = words.Length;\\n        int totalToneWords = positiveCount + negativeCount + neutralCount;\\n\\n        return new ToneAnalysisResult\\n        {\\n            PositivePercentage = totalToneWords > 0 ? (double)positiveCount / totalToneWords * 100 : 0,\\n            NegativePercentage = totalToneWords > 0 ? (double)negativeCount / totalToneWords * 100 : 0,\\n            NeutralPercentage = totalToneWords > 0 ? (double)neutralCount / totalToneWords * 100 : 0,\\n            TotalWords = totalWords,\\n            ToneWordsCount = totalToneWords,\\n            DominantTone = GetDominantTone(positiveCount, negativeCount, neutralCount)\\n        };\\n    }\\n\\n    private string GetDominantTone(int positive, int negative, int neutral)\\n    {\\n        if (positive > negative && positive > neutral) return \\\"Positive\\\";\\n        if (negative > positive && negative > neutral) return \\\"Negative\\\";\\n        if (neutral > positive && neutral > negative) return \\\"Neutral\\\";\\n        return \\\"Balanced\\\";\\n    }\\n\\n    private void DisplayToneAnalysis(ToneAnalysisResult result)\\n    {\\n        Console.WriteLine(\\\"\\\\nTone Analysis Results:\\\");\\n        Console.WriteLine(\\\"-------------------\\\");\\n        Console.WriteLine(\\\"Total words analyzed: \\\" + result.TotalWords);\\n        Console.WriteLine(\\\"Tone words detected: \\\" + result.ToneWordsCount);\\n        Console.WriteLine(\\\"Positive tone: \\\" + result.PositivePercentage.ToString(\\\"0.00\\\") + \\\"%\\\");\\n        Console.WriteLine(\\\"Negative tone: \\\" + result.NegativePercentage.ToString(\\\"0.00\\\") + \\\"%\\\");\\n        Console.WriteLine(\\\"Neutral tone: \\\" + result.NeutralPercentage.ToString(\\\"0.00\\\") + \\\"%\\\");\\n        Console.WriteLine(\\\"Dominant tone: \\\" + result.DominantTone);\\n    }\\n\\n    private void SaveAnalysisResults(string filePath, ToneAnalysisResult result, string originalText)\\n    {\\n        var resultData = new\\n        {\\n            Timestamp = DateTime.Now,\\n            OriginalText = originalText,\\n            AnalysisResult = result\\n        };\\n\\n        string json = JsonSerializer.Serialize(resultData, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private class ToneAnalysisResult\\n    {\\n        public double PositivePercentage { get; set; }\\n        public double NegativePercentage { get; set; }\\n        public double NeutralPercentage { get; set; }\\n        public int TotalWords { get; set; }\\n        public int ToneWordsCount { get; set; }\\n        public string DominantTone { get; set; }\\n    }\\n}\",\n  \"name\": \"Conversation Tone Analyzer\",\n  \"description\": \"Analyzes the tone of a conversation based on text input, categorizing words as positive, negative or neutral and providing statistical analysis of the conversation tone.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":1516,"total_tokens":2042,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":14},"system_fingerprint":"fp_3d5141a69a_prod0225"}