{"id":"0b7e3dda-b582-48fd-95f9-3207f6f563fb","object":"chat.completion","created":1743797041,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Net;\\nusing System.Text.Json;\\n\\npublic class DownloadTimeCalculator : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Download Time Calculator\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Download Time Calculator module is running.\\\");\\n\\n        string configFilePath = Path.Combine(dataFolder, \\\"download_config.json\\\");\\n        string resultFilePath = Path.Combine(dataFolder, \\\"download_result.json\\\");\\n\\n        try\\n        {\\n            if (!File.Exists(configFilePath))\\n            {\\n                Console.WriteLine(\\\"Configuration file not found. Creating a default one.\\\");\\n                CreateDefaultConfigFile(configFilePath);\\n                Console.WriteLine(\\\"Please edit the configuration file and run the module again.\\\");\\n                return false;\\n            }\\n\\n            var config = ReadConfigFile(configFilePath);\\n            if (config == null)\\n            {\\n                Console.WriteLine(\\\"Failed to read configuration file.\\\");\\n                return false;\\n            }\\n\\n            if (string.IsNullOrEmpty(config.FileUrl))\\n            {\\n                Console.WriteLine(\\\"File URL is not specified in the configuration.\\\");\\n                return false;\\n            }\\n\\n            Console.WriteLine(\\\"Calculating download time...\\\");\\n            var result = CalculateDownloadTime(config.FileUrl, config.DownloadSpeedMbps);\\n            if (result == null)\\n            {\\n                Console.WriteLine(\\\"Failed to calculate download time.\\\");\\n                return false;\\n            }\\n\\n            SaveResult(resultFilePath, result);\\n            Console.WriteLine(\\\"Download time calculation completed successfully.\\\");\\n            Console.WriteLine(\\\"File size: \\\" + FormatFileSize(result.FileSizeBytes));\\n            Console.WriteLine(\\\"Estimated download time: \\\" + FormatTimeSpan(result.EstimatedTime));\\n\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private DownloadConfig ReadConfigFile(string filePath)\\n    {\\n        try\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return JsonSerializer.Deserialize<DownloadConfig>(json);\\n        }\\n        catch\\n        {\\n            return null;\\n        }\\n    }\\n\\n    private void CreateDefaultConfigFile(string filePath)\\n    {\\n        var defaultConfig = new DownloadConfig\\n        {\\n            FileUrl = \\\"\\\",\\n            DownloadSpeedMbps = 10.0\\n        };\\n\\n        string json = JsonSerializer.Serialize(defaultConfig, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private DownloadResult CalculateDownloadTime(string fileUrl, double downloadSpeedMbps)\\n    {\\n        try\\n        {\\n            var request = WebRequest.Create(fileUrl);\\n            request.Method = \\\"HEAD\\\";\\n\\n            using (var response = request.GetResponse())\\n            {\\n                long fileSize = response.ContentLength;\\n                if (fileSize <= 0)\\n                {\\n                    return null;\\n                }\\n\\n                double speedBytesPerSecond = (downloadSpeedMbps * 125000); // Convert Mbps to bytes/sec\\n                double seconds = fileSize / speedBytesPerSecond;\\n                TimeSpan timeSpan = TimeSpan.FromSeconds(seconds);\\n\\n                return new DownloadResult\\n                {\\n                    FileSizeBytes = fileSize,\\n                    DownloadSpeedMbps = downloadSpeedMbps,\\n                    EstimatedTime = timeSpan,\\n                    FileUrl = fileUrl,\\n                    CalculationDate = DateTime.Now\\n                };\\n            }\\n        }\\n        catch\\n        {\\n            return null;\\n        }\\n    }\\n\\n    private void SaveResult(string filePath, DownloadResult result)\\n    {\\n        string json = JsonSerializer.Serialize(result, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private string FormatFileSize(long bytes)\\n    {\\n        string[] sizes = { \\\"B\\\", \\\"KB\\\", \\\"MB\\\", \\\"GB\\\", \\\"TB\\\" };\\n        int order = 0;\\n        double size = bytes;\\n        while (size >= 1024 && order < sizes.Length - 1)\\n        {\\n            order++;\\n            size /= 1024;\\n        }\\n        return string.Format(\\\"{0:0.##} {1}\\\", size, sizes[order]);\\n    }\\n\\n    private string FormatTimeSpan(TimeSpan timeSpan)\\n    {\\n        if (timeSpan.TotalHours >= 1)\\n        {\\n            return string.Format(\\\"{0}h {1}m {2}s\\\", (int)timeSpan.TotalHours, timeSpan.Minutes, timeSpan.Seconds);\\n        }\\n        else if (timeSpan.TotalMinutes >= 1)\\n        {\\n            return string.Format(\\\"{0}m {1}s\\\", (int)timeSpan.TotalMinutes, timeSpan.Seconds);\\n        }\\n        else\\n        {\\n            return string.Format(\\\"{0}s\\\", timeSpan.Seconds);\\n        }\\n    }\\n}\\n\\npublic class DownloadConfig\\n{\\n    public string FileUrl { get; set; }\\n    public double DownloadSpeedMbps { get; set; }\\n}\\n\\npublic class DownloadResult\\n{\\n    public long FileSizeBytes { get; set; }\\n    public double DownloadSpeedMbps { get; set; }\\n    public TimeSpan EstimatedTime { get; set; }\\n    public string FileUrl { get; set; }\\n    public DateTime CalculationDate { get; set; }\\n}\",\n  \"name\": \"Download Time Calculator\",\n  \"description\": \"Calculates the estimated time required to download a file based on file size and download speed.\",\n  \"required_apis\": [\n    \"System.Net\"\n  ],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1352,"total_tokens":1872,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}