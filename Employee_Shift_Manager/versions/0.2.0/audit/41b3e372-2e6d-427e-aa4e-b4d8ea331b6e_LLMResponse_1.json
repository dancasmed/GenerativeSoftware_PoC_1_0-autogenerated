
{"id":"8538a227-b71a-407a-9ea0-4ea5f998faba","object":"chat.completion","created":1744178039,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class EmployeeShiftManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Employee Shift Manager\\\";\\n\\n    private string _dataFilePath;\\n    private List<Employee> _employees;\\n    private List<Shift> _shifts;\\n\\n    public EmployeeShiftManager()\\n    {\\n        _employees = new List<Employee>();\\n        _shifts = new List<Shift>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"employee_shifts.json\\\");\\n        Console.WriteLine(\\\"Employee Shift Manager module is running.\\\");\\n\\n        try\\n        {\\n            LoadData();\\n            bool exit = false;\\n\\n            while (!exit)\\n            {\\n                Console.WriteLine(\\\"\\\\nEmployee Shift Manager\\\");\\n                Console.WriteLine(\\\"1. Add Employee\\\");\\n                Console.WriteLine(\\\"2. Add Shift\\\");\\n                Console.WriteLine(\\\"3. View Employees\\\");\\n                Console.WriteLine(\\\"4. View Shifts\\\");\\n                Console.WriteLine(\\\"5. Assign Shift to Employee\\\");\\n                Console.WriteLine(\\\"6. Save and Exit\\\");\\n                Console.Write(\\\"Select an option: \\\");\\n\\n                string input = Console.ReadLine();\\n\\n                switch (input)\\n                {\\n                    case \\\"1\\\":\\n                        AddEmployee();\\n                        break;\\n                    case \\\"2\\\":\\n                        AddShift();\\n                        break;\\n                    case \\\"3\\\":\\n                        ViewEmployees();\\n                        break;\\n                    case \\\"4\\\":\\n                        ViewShifts();\\n                        break;\\n                    case \\\"5\\\":\\n                        AssignShift();\\n                        break;\\n                    case \\\"6\\\":\\n                        SaveData();\\n                        exit = true;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void LoadData()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            string json = File.ReadAllText(_dataFilePath);\\n            var data = JsonSerializer.Deserialize<EmployeeShiftData>(json);\\n            _employees = data.Employees;\\n            _shifts = data.Shifts;\\n        }\\n    }\\n\\n    private void SaveData()\\n    {\\n        var data = new EmployeeShiftData { Employees = _employees, Shifts = _shifts };\\n        string json = JsonSerializer.Serialize(data);\\n        File.WriteAllText(_dataFilePath, json);\\n        Console.WriteLine(\\\"Data saved successfully.\\\");\\n    }\\n\\n    private void AddEmployee()\\n    {\\n        Console.Write(\\\"Enter employee name: \\\");\\n        string name = Console.ReadLine();\\n        Console.Write(\\\"Enter employee ID: \\\");\\n        string id = Console.ReadLine();\\n\\n        _employees.Add(new Employee { Name = name, Id = id });\\n        Console.WriteLine(\\\"Employee added successfully.\\\");\\n    }\\n\\n    private void AddShift()\\n    {\\n        Console.Write(\\\"Enter shift date (yyyy-MM-dd): \\\");\\n        string date = Console.ReadLine();\\n        Console.Write(\\\"Enter start time (HH:mm): \\\");\\n        string startTime = Console.ReadLine();\\n        Console.Write(\\\"Enter end time (HH:mm): \\\");\\n        string endTime = Console.ReadLine();\\n\\n        _shifts.Add(new Shift { Date = date, StartTime = startTime, EndTime = endTime });\\n        Console.WriteLine(\\\"Shift added successfully.\\\");\\n    }\\n\\n    private void ViewEmployees()\\n    {\\n        if (_employees.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No employees found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nEmployees:\\\");\\n        foreach (var employee in _employees)\\n        {\\n            Console.WriteLine($\\\"ID: {employee.Id}, Name: {employee.Name}\\\");\\n        }\\n    }\\n\\n    private void ViewShifts()\\n    {\\n        if (_shifts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No shifts found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nShifts:\\\");\\n        foreach (var shift in _shifts)\\n        {\\n            Console.WriteLine($\\\"Date: {shift.Date}, Start: {shift.StartTime}, End: {shift.EndTime}\\\");\\n        }\\n    }\\n\\n    private void AssignShift()\\n    {\\n        ViewEmployees();\\n        ViewShifts();\\n\\n        if (_employees.Count == 0 || _shifts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No employees or shifts available to assign.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter employee ID: \\\");\\n        string employeeId = Console.ReadLine();\\n        Console.Write(\\\"Enter shift index: \\\");\\n        string shiftIndexInput = Console.ReadLine();\\n\\n        if (!int.TryParse(shiftIndexInput, out int shiftIndex) || shiftIndex < 0 || shiftIndex >= _shifts.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid shift index.\\\");\\n            return;\\n        }\\n\\n        var employee = _employees.Find(e => e.Id == employeeId);\\n        if (employee == null)\\n        {\\n            Console.WriteLine(\\\"Employee not found.\\\");\\n            return;\\n        }\\n\\n        employee.AssignedShifts.Add(_shifts[shiftIndex]);\\n        Console.WriteLine(\\\"Shift assigned successfully.\\\");\\n    }\\n}\\n\\npublic class Employee\\n{\\n    public string Name { get; set; }\\n    public string Id { get; set; }\\n    public List<Shift> AssignedShifts { get; set; } = new List<Shift>();\\n}\\n\\npublic class Shift\\n{\\n    public string Date { get; set; }\\n    public string StartTime { get; set; }\\n    public string EndTime { get; set; }\\n}\\n\\npublic class EmployeeShiftData\\n{\\n    public List<Employee> Employees { get; set; }\\n    public List<Shift> Shifts { get; set; }\\n}\",\n  \"name\": \"Employee Shift Manager\",\n  \"description\": \"A module to manage employee shifts and schedules for a small business.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":525,"completion_tokens":1548,"total_tokens":2073,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":13},"system_fingerprint":"fp_3d5141a69a_prod0225"}