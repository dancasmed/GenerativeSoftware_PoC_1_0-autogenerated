{"id":"5c17f683-ee74-4ffd-b588-8264eca1a51b","object":"chat.completion","created":1743795787,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class EmployeeShiftManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Employee Shift Manager\\\";\\n    \\n    private string _shiftsFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Employee Shift Manager module is running.\\\");\\n        \\n        _shiftsFilePath = Path.Combine(dataFolder, \\\"shifts.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        bool continueRunning = true;\\n        while (continueRunning)\\n        {\\n            DisplayMenu();\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddShift();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewShifts();\\n                    break;\\n                case \\\"3\\\":\\n                    DeleteShift();\\n                    break;\\n                case \\\"4\\\":\\n                    continueRunning = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nEmployee Shift Management\\\");\\n        Console.WriteLine(\\\"1. Add Shift\\\");\\n        Console.WriteLine(\\\"2. View Shifts\\\");\\n        Console.WriteLine(\\\"3. Delete Shift\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddShift()\\n    {\\n        Console.Write(\\\"Enter employee name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter shift date (yyyy-MM-dd): \\\");\\n        string dateInput = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter start time (HH:mm): \\\");\\n        string startTime = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter end time (HH:mm): \\\");\\n        string endTime = Console.ReadLine();\\n        \\n        var shifts = LoadShifts();\\n        \\n        shifts.Add(new EmployeeShift\\n        {\\n            EmployeeName = name,\\n            Date = dateInput,\\n            StartTime = startTime,\\n            EndTime = endTime\\n        });\\n        \\n        SaveShifts(shifts);\\n        Console.WriteLine(\\\"Shift added successfully.\\\");\\n    }\\n    \\n    private void ViewShifts()\\n    {\\n        var shifts = LoadShifts();\\n        \\n        if (shifts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No shifts found.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nCurrent Shifts:\\\");\\n        foreach (var shift in shifts)\\n        {\\n            Console.WriteLine($\\\"{shift.EmployeeName} - {shift.Date} {shift.StartTime} to {shift.EndTime}\\\");\\n        }\\n    }\\n    \\n    private void DeleteShift()\\n    {\\n        ViewShifts();\\n        \\n        var shifts = LoadShifts();\\n        if (shifts.Count == 0) return;\\n        \\n        Console.Write(\\\"Enter the index of the shift to delete: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int index) && index >= 0 && index < shifts.Count)\\n        {\\n            shifts.RemoveAt(index);\\n            SaveShifts(shifts);\\n            Console.WriteLine(\\\"Shift deleted successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid index.\\\");\\n        }\\n    }\\n    \\n    private List<EmployeeShift> LoadShifts()\\n    {\\n        if (!File.Exists(_shiftsFilePath))\\n        {\\n            return new List<EmployeeShift>();\\n        }\\n        \\n        string json = File.ReadAllText(_shiftsFilePath);\\n        return JsonSerializer.Deserialize<List<EmployeeShift>>(json);\\n    }\\n    \\n    private void SaveShifts(List<EmployeeShift> shifts)\\n    {\\n        string json = JsonSerializer.Serialize(shifts);\\n        File.WriteAllText(_shiftsFilePath, json);\\n    }\\n}\\n\\npublic class EmployeeShift\\n{\\n    public string EmployeeName { get; set; }\\n    public string Date { get; set; }\\n    public string StartTime { get; set; }\\n    public string EndTime { get; set; }\\n}\",\n  \"name\": \"Employee Shift Manager\",\n  \"description\": \"Manages employee shifts for a retail store with CRUD operations\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1139,"total_tokens":1658,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":71},"system_fingerprint":"fp_3d5141a69a_prod0225"}