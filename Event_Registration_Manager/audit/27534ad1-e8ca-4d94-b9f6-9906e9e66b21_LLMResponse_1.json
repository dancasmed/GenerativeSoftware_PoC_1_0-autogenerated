
{"id":"39df061e-1edf-4131-803d-73c52d8beeb3","object":"chat.completion","created":1744179282,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class EventRegistrationModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Event Registration Manager\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Event Registration Module is running...\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n\\n        string eventsFilePath = Path.Combine(dataFolder, \\\"events.json\\\");\\n        string attendeesFilePath = Path.Combine(dataFolder, \\\"attendees.json\\\");\\n\\n        List<Event> events = LoadEvents(eventsFilePath);\\n        List<Attendee> attendees = LoadAttendees(attendeesFilePath);\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nEvent Registration System\\\");\\n            Console.WriteLine(\\\"1. Create New Event\\\");\\n            Console.WriteLine(\\\"2. Register Attendee\\\");\\n            Console.WriteLine(\\\"3. List All Events\\\");\\n            Console.WriteLine(\\\"4. List Attendees for Event\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n            if (int.TryParse(input, out int choice))\\n            {\\n                switch (choice)\\n                {\\n                    case 1:\\n                        CreateEvent(events, eventsFilePath);\\n                        break;\\n                    case 2:\\n                        RegisterAttendee(events, attendees, attendeesFilePath);\\n                        break;\\n                    case 3:\\n                        ListEvents(events);\\n                        break;\\n                    case 4:\\n                        ListEventAttendees(events, attendees);\\n                        break;\\n                    case 5:\\n                        running = false;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Event Registration Module completed.\\\");\\n        return true;\\n    }\\n\\n    private List<Event> LoadEvents(string filePath)\\n    {\\n        if (File.Exists(filePath))\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return JsonSerializer.Deserialize<List<Event>>(json) ?? new List<Event>();\\n        }\\n        return new List<Event>();\\n    }\\n\\n    private List<Attendee> LoadAttendees(string filePath)\\n    {\\n        if (File.Exists(filePath))\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return JsonSerializer.Deserialize<List<Attendee>>(json) ?? new List<Attendee>();\\n        }\\n        return new List<Attendee>();\\n    }\\n\\n    private void SaveEvents(List<Event> events, string filePath)\\n    {\\n        string json = JsonSerializer.Serialize(events);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private void SaveAttendees(List<Attendee> attendees, string filePath)\\n    {\\n        string json = JsonSerializer.Serialize(attendees);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private void CreateEvent(List<Event> events, string filePath)\\n    {\\n        Console.Write(\\\"Enter event name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter event date (yyyy-MM-dd): \\\");\\n        if (DateTime.TryParse(Console.ReadLine(), out DateTime date))\\n        {\\n            Console.Write(\\\"Enter event location: \\\");\\n            string location = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter maximum attendees: \\\");\\n            if (int.TryParse(Console.ReadLine(), out int maxAttendees))\\n            {\\n                Event newEvent = new Event\\n                {\\n                    Id = Guid.NewGuid(),\\n                    Name = name,\\n                    Date = date,\\n                    Location = location,\\n                    MaxAttendees = maxAttendees\\n                };\\n\\n                events.Add(newEvent);\\n                SaveEvents(events, filePath);\\n                Console.WriteLine(\\\"Event created successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid maximum attendees value.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid date format.\\\");\\n        }\\n    }\\n\\n    private void RegisterAttendee(List<Event> events, List<Attendee> attendees, string filePath)\\n    {\\n        if (events.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No events available for registration.\\\");\\n            return;\\n        }\\n\\n        ListEvents(events);\\n        Console.Write(\\\"Select event number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int eventIndex) && eventIndex > 0 && eventIndex <= events.Count)\\n        {\\n            Event selectedEvent = events[eventIndex - 1];\\n\\n            Console.Write(\\\"Enter attendee name: \\\");\\n            string name = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter attendee email: \\\");\\n            string email = Console.ReadLine();\\n\\n            int currentAttendees = attendees.Count(a => a.EventId == selectedEvent.Id);\\n            if (currentAttendees >= selectedEvent.MaxAttendees)\\n            {\\n                Console.WriteLine(\\\"Event is full. Cannot register more attendees.\\\");\\n                return;\\n            }\\n\\n            Attendee newAttendee = new Attendee\\n            {\\n                Id = Guid.NewGuid(),\\n                EventId = selectedEvent.Id,\\n                Name = name,\\n                Email = email,\\n                RegistrationDate = DateTime.Now\\n            };\\n\\n            attendees.Add(newAttendee);\\n            SaveAttendees(attendees, filePath);\\n            Console.WriteLine(\\\"Attendee registered successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid event selection.\\\");\\n        }\\n    }\\n\\n    private void ListEvents(List<Event> events)\\n    {\\n        if (events.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No events available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Events:\\\");\\n        for (int i = 0; i < events.Count; i++)\\n        {\\n            Console.WriteLine($\\\"{i + 1}. {events[i].Name} - {events[i].Date:yyyy-MM-dd} at {events[i].Location} (Max: {events[i].MaxAttendees})\\\");\\n        }\\n    }\\n\\n    private void ListEventAttendees(List<Event> events, List<Attendee> attendees)\\n    {\\n        if (events.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No events available.\\\");\\n            return;\\n        }\\n\\n        ListEvents(events);\\n        Console.Write(\\\"Select event number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int eventIndex) && eventIndex > 0 && eventIndex <= events.Count)\\n        {\\n            Event selectedEvent = events[eventIndex - 1];\\n            var eventAttendees = attendees.Where(a => a.EventId == selectedEvent.Id).ToList();\\n\\n            if (eventAttendees.Count == 0)\\n            {\\n                Console.WriteLine(\\\"No attendees registered for this event.\\\");\\n                return;\\n            }\\n\\n            Console.WriteLine($\\\"\\\\nAttendees for {selectedEvent.Name}:\\\");\\n            foreach (var attendee in eventAttendees)\\n            {\\n                Console.WriteLine($\\\"- {attendee.Name} ({attendee.Email}) registered on {attendee.RegistrationDate:yyyy-MM-dd}\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid event selection.\\\");\\n        }\\n    }\\n}\\n\\npublic class Event\\n{\\n    public Guid Id { get; set; }\\n    public string Name { get; set; }\\n    public DateTime Date { get; set; }\\n    public string Location { get; set; }\\n    public int MaxAttendees { get; set; }\\n}\\n\\npublic class Attendee\\n{\\n    public Guid Id { get; set; }\\n    public Guid EventId { get; set; }\\n    public string Name { get; set; }\\n    public string Email { get; set; }\\n    public DateTime RegistrationDate { get; set; }\\n}\",\n  \"name\": \"Event Registration Manager\",\n  \"description\": \"A module for managing event registrations and attendee lists with persistence to JSON files\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":2046,"total_tokens":2570,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":12},"system_fingerprint":"fp_3d5141a69a_prod0225"}