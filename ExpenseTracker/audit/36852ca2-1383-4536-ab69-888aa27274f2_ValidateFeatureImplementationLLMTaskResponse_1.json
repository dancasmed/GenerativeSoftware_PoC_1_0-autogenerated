{
  "isFeatureImplemented": false,
  "updatedSourceCodeFiles": [
    {
      "filename": "Module.cs",
      "source_code": "using SelfEvolvingSoftware.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Security.Cryptography;\nusing System.Text;\n\npublic class ExpenseTrackerModule : IGeneratedModule\n{\n    public string Name { get; set; } = \u0022Expense Tracker\u0022;\n    private string _dataFolder;\n    private User _currentUser;\n    private DataService _dataService;\n    private List\u003CUser\u003E _users;\n    private List\u003CCategory\u003E _categories;\n    private List\u003CExpense\u003E _expenses;\n\n    public bool Main(string dataFolder)\n    {\n        _dataFolder = dataFolder;\n        _dataService = new DataService(dataFolder);\n        Console.WriteLine(\u0022Initializing Expense Tracker Module...\u0022);\n\n        LoadData();\n\n        if (!HandleAuthentication())\n            return false;\n\n        while (true)\n        {\n            Console.WriteLine(\u0022\\nMain Menu:\u0022);\n            Console.WriteLine(\u00221. Add Expense\u0022);\n            Console.WriteLine(\u00222. View/Edit Expenses\u0022);\n            Console.WriteLine(\u00223. Generate Report\u0022);\n            Console.WriteLine(\u00224. Manage Categories\u0022);\n            Console.WriteLine(\u00225. Exit\u0022);\n            Console.Write(\u0022Select option: \u0022);\n\n            switch (Console.ReadLine())\n            {\n                case \u00221\u0022:\n                    AddExpense();\n                    break;\n                case \u00222\u0022:\n                    ViewEditExpenses();\n                    break;\n                case \u00223\u0022:\n                    GenerateMonthlyReport();\n                    break;\n                case \u00224\u0022:\n                    ManageCategories();\n                    break;\n                case \u00225\u0022:\n                    return true;\n                default:\n                    Console.WriteLine(\u0022Invalid option\u0022);\n                    break;\n            }\n        }\n    }\n\n    private void LoadData()\n    {\n        _users = _dataService.LoadData\u003CUser\u003E(\u0022users.json\u0022);\n        _categories = _dataService.LoadData\u003CCategory\u003E(\u0022categories.json\u0022);\n        _expenses = _dataService.LoadData\u003CExpense\u003E(\u0022expenses.json\u0022);\n\n        if (!_categories.Any(c =\u003E c.UserId == Guid.Empty))\n        {\n            _categories.AddRange(new[]\n            {\n                new Category { Id = Guid.NewGuid(), Name = \u0022Food\u0022, UserId = Guid.Empty },\n                new Category { Id = Guid.NewGuid(), Name = \u0022Transport\u0022, UserId = Guid.Empty },\n                new Category { Id = Guid.NewGuid(), Name = \u0022Housing\u0022, UserId = Guid.Empty }\n            });\n            _dataService.SaveData(\u0022categories.json\u0022, _categories);\n        }\n    }\n\n    private bool HandleAuthentication()\n    {\n        while (true)\n        {\n            Console.WriteLine(\u0022\\n1. Login\\n2. Register\\n3. Exit\u0022);\n            string choice = Console.ReadLine();\n\n            if (choice == \u00223\u0022) return false;\n\n            Console.Write(\u0022Username: \u0022);\n            string username = Console.ReadLine();\n            Console.Write(\u0022Password: \u0022);\n            string password = Console.ReadLine();\n\n            if (choice == \u00221\u0022)\n            {\n                var user = _users.FirstOrDefault(u =\u003E u.Username == username);\n                if (user != null \u0026\u0026 SecurityHelper.VerifyPassword(password, user.PasswordHash))\n                {\n                    _currentUser = user;\n                    return true;\n                }\n                Console.WriteLine(\u0022Invalid credentials\u0022);\n            }\n            else if (choice == \u00222\u0022)\n            {\n                if (_users.Any(u =\u003E u.Username == username))\n                {\n                    Console.WriteLine(\u0022Username exists\u0022);\n                    continue;\n                }\n\n                _currentUser = new User\n                {\n                    Id = Guid.NewGuid(),\n                    Username = username,\n                    PasswordHash = SecurityHelper.HashPassword(password)\n                };\n                _users.Add(_currentUser);\n                _dataService.SaveData(\u0022users.json\u0022, _users);\n                return true;\n            }\n        }\n    }\n\n    private void AddExpense()\n    {\n        Console.Write(\u0022Amount: \u0022);\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\n        {\n            Console.WriteLine(\u0022Invalid amount\u0022);\n            return;\n        }\n\n        Console.Write(\u0022Date (yyyy-MM-dd): \u0022);\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))\n        {\n            Console.WriteLine(\u0022Invalid date\u0022);\n            return;\n        }\n\n        Console.WriteLine(\u0022Available categories: \u0022 \u002B string.Join(\u0022, \u0022, _categories.Select(c =\u003E c.Name)));\n        Console.Write(\u0022Category name: \u0022);\n        string categoryName = Console.ReadLine();\n\n        var category = _categories.FirstOrDefault(c =\u003E c.Name.Equals(categoryName, StringComparison.OrdinalIgnoreCase));\n        if (category == null)\n        {\n            category = new Category\n            {\n                Id = Guid.NewGuid(),\n                Name = categoryName,\n                UserId = _currentUser.Id\n            };\n            _categories.Add(category);\n            _dataService.SaveData(\u0022categories.json\u0022, _categories);\n        }\n\n        Console.Write(\u0022Notes (optional): \u0022);\n        string notes = Console.ReadLine();\n\n        _expenses.Add(new Expense\n        {\n            Id = Guid.NewGuid(),\n            Amount = amount,\n            Date = date,\n            CategoryId = category.Id,\n            UserId = _currentUser.Id,\n            Notes = notes\n        });\n\n        _dataService.SaveData(\u0022expenses.json\u0022, _expenses);\n        Console.WriteLine(\u0022Expense added successfully\u0022);\n    }\n\n    private void ViewEditExpenses()\n    {\n        var userExpenses = _expenses.Where(e =\u003E e.UserId == _currentUser.Id).ToList();\n        if (!userExpenses.Any())\n        {\n            Console.WriteLine(\u0022No expenses found\u0022);\n            return;\n        }\n\n        for (int i = 0; i \u003C userExpenses.Count; i\u002B\u002B)\n        {\n            var expense = userExpenses[i];\n            var category = _categories.First(c =\u003E c.Id == expense.CategoryId);\n            Console.WriteLine(string.Format(\u0022{0}. {1} - {2} ({3}) {4}\u0022,\n                i \u002B 1,\n                expense.Date.ToString(\u0022yyyy-MM-dd\u0022),\n                expense.Amount,\n                category.Name,\n                expense.Notes));\n        }\n\n        Console.Write(\u0022Select expense to edit/delete (0 to cancel): \u0022);\n        if (!int.TryParse(Console.ReadLine(), out int selection) || selection == 0)\n            return;\n\n        if (selection \u003C 1 || selection \u003E userExpenses.Count)\n        {\n            Console.WriteLine(\u0022Invalid selection\u0022);\n            return;\n        }\n\n        var selectedExpense = userExpenses[selection - 1];\n        Console.WriteLine(\u00221. Edit\\n2. Delete\u0022);\n        string action = Console.ReadLine();\n\n        if (action == \u00221\u0022)\n        {\n            Console.Write(\u0022New amount (current: \u0022 \u002B selectedExpense.Amount \u002B \u0022): \u0022);\n            if (decimal.TryParse(Console.ReadLine(), out decimal newAmount))\n                selectedExpense.Amount = newAmount;\n\n            Console.Write(\u0022New date (yyyy-MM-dd) (current: \u0022 \u002B selectedExpense.Date.ToString(\u0022yyyy-MM-dd\u0022) \u002B \u0022): \u0022);\n            if (DateTime.TryParse(Console.ReadLine(), out DateTime newDate))\n                selectedExpense.Date = newDate;\n\n            Console.WriteLine(\u0022Current category: \u0022 \u002B _categories.First(c =\u003E c.Id == selectedExpense.CategoryId).Name);\n            Console.WriteLine(\u0022Available categories: \u0022 \u002B string.Join(\u0022, \u0022, _categories.Select(c =\u003E c.Name)));\n            Console.Write(\u0022New category name: \u0022);\n            string newCategoryName = Console.ReadLine();\n            var newCategory = _categories.FirstOrDefault(c =\u003E c.Name.Equals(newCategoryName, StringComparison.OrdinalIgnoreCase));\n            if (newCategory == null)\n            {\n                newCategory = new Category\n                {\n                    Id = Guid.NewGuid(),\n                    Name = newCategoryName,\n                    UserId = _currentUser.Id\n                };\n                _categories.Add(newCategory);\n                _dataService.SaveData(\u0022categories.json\u0022, _categories);\n            }\n            selectedExpense.CategoryId = newCategory.Id;\n\n            Console.Write(\u0022New notes (current: \u0022 \u002B selectedExpense.Notes \u002B \u0022): \u0022);\n            selectedExpense.Notes = Console.ReadLine();\n\n            _dataService.SaveData(\u0022expenses.json\u0022, _expenses);\n            Console.WriteLine(\u0022Expense updated\u0022);\n        }\n        else if (action == \u00222\u0022)\n        {\n            _expenses.Remove(selectedExpense);\n            _dataService.SaveData(\u0022expenses.json\u0022, _expenses);\n            Console.WriteLine(\u0022Expense deleted\u0022);\n        }\n    }\n\n    private void GenerateMonthlyReport()\n    {\n        Console.Write(\u0022Month (1-12): \u0022);\n        if (!int.TryParse(Console.ReadLine(), out int month) || month \u003C 1 || month \u003E 12)\n        {\n            Console.WriteLine(\u0022Invalid month\u0022);\n            return;\n        }\n\n        Console.Write(\u0022Year: \u0022);\n        if (!int.TryParse(Console.ReadLine(), out int year))\n        {\n            Console.WriteLine(\u0022Invalid year\u0022);\n            return;\n        }\n\n        var reportData = _expenses\n            .Where(e =\u003E e.UserId == _currentUser.Id \u0026\u0026 e.Date.Month == month \u0026\u0026 e.Date.Year == year)\n            .GroupBy(e =\u003E e.CategoryId)\n            .Select(g =\u003E new\n            {\n                Category = _categories.First(c =\u003E c.Id == g.Key).Name,\n                Total = g.Sum(e =\u003E e.Amount)\n            }).ToList();\n\n        Console.WriteLine(\u0022\\nMonthly Report:\u0022);\n        foreach (var item in reportData)\n        {\n            Console.WriteLine(string.Format(\u0022{0}: {1:C}\u0022, item.Category, item.Total));\n        }\n\n        decimal totalMonthly = reportData.Sum(item =\u003E item.Total);\n        Console.WriteLine($\u0022\\nTotal Monthly Expenses: {totalMonthly:C}\u0022);\n    }\n\n    private void ManageCategories()\n    {\n        while (true)\n        {\n            Console.WriteLine(\u0022\\nManage Categories:\u0022);\n            var userCategories = _categories\n                .Where(c =\u003E c.UserId == _currentUser.Id || c.UserId == Guid.Empty)\n                .OrderBy(c =\u003E c.UserId)\n                .ToList();\n\n            for (int i = 0; i \u003C userCategories.Count; i\u002B\u002B)\n            {\n                Console.WriteLine($\u0022{i \u002B 1}. {userCategories[i].Name} \u0022 \u002B\n                    $\u0022{(userCategories[i].UserId == Guid.Empty ? \u0022(System Default)\u0022 : \u0022\u0022)}\u0022);\n            }\n\n            Console.WriteLine(\u0022\\n1. Add Category\u0022);\n            Console.WriteLine(\u00222. Edit Category\u0022);\n            Console.WriteLine(\u00223. Delete Category\u0022);\n            Console.WriteLine(\u00224. Return to Main Menu\u0022);\n            Console.Write(\u0022Select option: \u0022);\n\n            switch (Console.ReadLine())\n            {\n                case \u00221\u0022:\n                    AddNewCategory();\n                    break;\n                case \u00222\u0022:\n                    EditExistingCategory(userCategories);\n                    break;\n                case \u00223\u0022:\n                    DeleteExistingCategory(userCategories);\n                    break;\n                case \u00224\u0022:\n                    return;\n                default:\n                    Console.WriteLine(\u0022Invalid option\u0022);\n                    break;\n            }\n        }\n    }\n\n    private void AddNewCategory()\n    {\n        Console.Write(\u0022Enter category name: \u0022);\n        string name = Console.ReadLine().Trim();\n\n        if (_categories.Any(c =\u003E c.Name.Equals(name, StringComparison.OrdinalIgnoreCase) \u0026\u0026 c.UserId == _currentUser.Id))\n        {\n            Console.WriteLine(\u0022Category already exists\u0022);\n            return;\n        }\n\n        _categories.Add(new Category\n        {\n            Id = Guid.NewGuid(),\n            Name = name,\n            UserId = _currentUser.Id\n        });\n        _dataService.SaveData(\u0022categories.json\u0022, _categories);\n        Console.WriteLine(\u0022Category added successfully\u0022);\n    }\n\n    private void EditExistingCategory(List\u003CCategory\u003E userCategories)\n    {\n        Console.Write(\u0022Enter category number to edit: \u0022);\n        if (!int.TryParse(Console.ReadLine(), out int index) || index \u003C 1 || index \u003E userCategories.Count)\n        {\n            Console.WriteLine(\u0022Invalid selection\u0022);\n            return;\n        }\n\n        var category = userCategories[index - 1];\n        if (category.UserId == Guid.Empty)\n        {\n            Console.WriteLine(\u0022System default categories cannot be modified\u0022);\n            return;\n        }\n\n        Console.Write(\u0022Enter new category name: \u0022);\n        string newName = Console.ReadLine().Trim();\n\n        if (_categories.Any(c =\u003E c.Name.Equals(newName, StringComparison.OrdinalIgnoreCase) \u0026\u0026 c.UserId == _currentUser.Id))\n        {\n            Console.WriteLine(\u0022Category already exists\u0022);\n            return;\n        }\n\n        category.Name = newName;\n        _dataService.SaveData(\u0022categories.json\u0022, _categories);\n        Console.WriteLine(\u0022Category updated successfully\u0022);\n    }\n\n    private void DeleteExistingCategory(List\u003CCategory\u003E userCategories)\n    {\n        Console.Write(\u0022Enter category number to delete: \u0022);\n        if (!int.TryParse(Console.ReadLine(), out int index) || index \u003C 1 || index \u003E userCategories.Count)\n        {\n            Console.WriteLine(\u0022Invalid selection\u0022);\n            return;\n        }\n\n        var category = userCategories[index - 1];\n        if (category.UserId == Guid.Empty)\n        {\n            Console.WriteLine(\u0022System default categories cannot be deleted\u0022);\n            return;\n        }\n\n        if (_expenses.Any(e =\u003E e.CategoryId == category.Id))\n        {\n            Console.WriteLine(\u0022Cannot delete category with associated expenses\u0022);\n            return;\n        }\n\n        _categories.Remove(category);\n        _dataService.SaveData(\u0022categories.json\u0022, _categories);\n        Console.WriteLine(\u0022Category deleted successfully\u0022);\n    }\n}\n\npublic class DataService\n{\n    private readonly string _dataFolder;\n\n    public DataService(string dataFolder)\n    {\n        _dataFolder = dataFolder;\n        Directory.CreateDirectory(dataFolder);\n    }\n\n    public List\u003CT\u003E LoadData\u003CT\u003E(string fileName)\n    {\n        string path = Path.Combine(_dataFolder, fileName);\n        if (!File.Exists(path)) return new List\u003CT\u003E();\n\n        string json = File.ReadAllText(path);\n        return JsonSerializer.Deserialize\u003CList\u003CT\u003E\u003E(json) ?? new List\u003CT\u003E();\n    }\n\n    public void SaveData\u003CT\u003E(string fileName, List\u003CT\u003E data)\n    {\n        string path = Path.Combine(_dataFolder, fileName);\n        string json = JsonSerializer.Serialize(data);\n        File.WriteAllText(path, json);\n    }\n}\n\npublic static class SecurityHelper\n{\n    public static string HashPassword(string password)\n    {\n        using var sha256 = SHA256.Create();\n        byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));\n        return Convert.ToBase64String(bytes);\n    }\n\n    public static bool VerifyPassword(string password, string storedHash)\n    {\n        return HashPassword(password) == storedHash;\n    }\n}\n\npublic class User\n{\n    public Guid Id { get; set; }\n    public string Username { get; set; }\n    public string PasswordHash { get; set; }\n}\n\npublic class Category\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public Guid UserId { get; set; }\n}\n\npublic class Expense\n{\n    public Guid Id { get; set; }\n    public decimal Amount { get; set; }\n    public DateTime Date { get; set; }\n    public Guid CategoryId { get; set; }\n    public string Notes { get; set; }\n    public Guid UserId { get; set; }\n}"
    }
  ],
  "required_nugets": []
}