{
  "model": "deepseek-reasoner",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant with high skills in software development. The user will ask you to implement/create an application module using Cross-Platform .NET 9 C# code that adheres to the following interface:\n\n\u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022\n\n### Requirements:\n- The generated code must avoid using external APIs if possible, in case an API is needed add it to the list of required APIS.\n_ If the generated code needs NuGets installed add the NuGet name to the list of required Nugets.\n- The response must be in JSON format.\n- The \u0060source_code\u0060 field must contain C# code only (avoid markdown notation).\n- Do not include the IGeneratedModule in the generated source code.\n- The generated code **must not include any instructions that begin with \u0060Console.WriteLine($\u0060**.\n- If data persistence is required, use JSON files stored in the \u0060dataFolder\u0060 parameter of the \u0060Main\u0060 method.\n- Ensure the generated module is as detailed and complete as possible.\n- The constructor of the generated module must not have any parameters.\n- The generated code MUST not call Exit method. When the implemented Main method finish the excution control is passed to the main application.\n- The generated code must print information in the console to let know the user the module is running.\n- The generated code must implement CRUPDS operations for the data models.\n\n### Example output:\n{\u0022source_code\u0022:\u0022GENERATED C# CODE\u0022,\u0022description\u0022: \u0022GENERATED DESCRIPTION FOR THE MODULE\u0022, \u0022required_apis\u0022=[{\u0022API_1\u0022},{\u0022API_2\u0022}], , \u0022required_nugets\u0022=[{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_1\u0022,\u0022nuget_version\u0022:\u00221.0.0\u0022 },{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_2\u0022,\u0022nuget_version\u0022:\u00222.0.0.0\u0022 }]}"
    },
    {
      "role": "user",
      "content": "Generate a Cross-Platform .NET 9 C# code that implements the next interface \u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022 the Main method is the start point for the module. The souce code will run on a console application. The generated code must not write strings to console like this Console.WriteLine($\u0022{variable}\u0022). The source code will be automaticallty compiled so avoid adding markdown notation or anything that is not c# code The module must: Design a software module that allows users to track daily expenses, categorize them, and generate monthly reports. The module should enable users to log expenses with details such as amount, date, category, and optional notes. Users should be able to view, edit, and delete expenses as needed. The system should support categorization of expenses into predefined or custom categories, and provide the ability to generate detailed monthly reports summarizing expenses by category. The module should ensure data integrity and provide a user-friendly interface for managing expenses.\n## Funcional Details ##\nLog daily expenses with details such as amount, date, category, and optional notes.\nCategorize expenses into predefined or custom categories.\nGenerate monthly reports summarizing expenses by category.\nView, edit, and delete expenses as needed.\n## Required features ## \nLog daily expenses with basic details (amount, date, category).\nBasic categorization of expenses.\nView and edit expenses.\nGenerate simple monthly reports.\n## User interaction ## \nUser logs in to the system.\nUser adds a new expense with details such as amount, date, category, and optional notes.\nUser views a list of expenses, filtered by date or category.\nUser edits or deletes an existing expense.\nUser generates a monthly report summarizing expenses by category.\n## Suggested data models ##\n**Expense**: \u0060id\u0060, \u0060amount\u0060, \u0060date\u0060, \u0060category_id\u0060, \u0060notes\u0060, \u0060user_id\u0060\n**Category**: \u0060id\u0060, \u0060name\u0060, \u0060description\u0060, \u0060user_id\u0060\n**User**: \u0060id\u0060, \u0060username\u0060, \u0060email\u0060, \u0060password_hash\u0060\n**Report**: \u0060id\u0060, \u0060month\u0060, \u0060year\u0060, \u0060user_id\u0060, \u0060generated_at\u0060"
    }
  ],
  "stream": false
}