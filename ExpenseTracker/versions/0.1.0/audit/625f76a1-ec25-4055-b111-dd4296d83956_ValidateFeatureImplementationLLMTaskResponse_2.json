{
  "isFeatureImplemented": false,
  "updatedSourceCodeFiles": [
    {
      "filename": "workspace\\ExpenseTracker\\src\\Module.cs",
      "source_code": "using SelfEvolvingSoftware.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\n\npublic class ExpenseTrackerModule : IGeneratedModule\n{\n    public string Name { get; set; } = \u0022Expense Tracker Module\u0022;\n    \n    private string _expensesPath;\n    private string _categoriesPath;\n    private string _reportsPath;\n    \n    public bool Main(string dataFolder)\n    {\n        Console.WriteLine(\u0022Initializing Expense Tracker Module...\u0022);\n        \n        _expensesPath = Path.Combine(dataFolder, \u0022expenses.json\u0022);\n        _categoriesPath = Path.Combine(dataFolder, \u0022categories.json\u0022);\n        _reportsPath = Path.Combine(dataFolder, \u0022reports.json\u0022);\n        \n        var expenseRepo = new ExpenseRepository(_expensesPath);\n        var categoryRepo = new CategoryRepository(_categoriesPath);\n        var reportRepo = new ReportRepository(_reportsPath);\n        \n        var categoryService = new CategoryService(categoryRepo);\n        var expenseService = new ExpenseService(expenseRepo, categoryService);\n        var reportService = new ReportService(expenseRepo, reportRepo);\n        \n        InitializeDefaultCategories(categoryService);\n        \n        while (ShowMainMenu(expenseService, categoryService, reportService)) { }\n        \n        return true;\n    }\n    \n    private void InitializeDefaultCategories(CategoryService service)\n    {\n        if (!service.GetAllCategories().Any())\n        {\n            service.AddCategory(new Category { Name = \u0022Food\u0022, BudgetLimit = 0 });\n            service.AddCategory(new Category { Name = \u0022Transportation\u0022, BudgetLimit = 0 });\n            service.AddCategory(new Category { Name = \u0022Housing\u0022, BudgetLimit = 0 });\n        }\n    }\n    \n    private bool ShowMainMenu(ExpenseService expenseService, CategoryService categoryService, ReportService reportService)\n    {\n        Console.WriteLine(\u0022\\nMain Menu:\u0022);\n        Console.WriteLine(\u00221. Add Expense\u0022);\n        Console.WriteLine(\u00222. List Expenses\u0022);\n        Console.WriteLine(\u00223. Edit Expense\u0022);\n        Console.WriteLine(\u00224. Delete Expense\u0022);\n        Console.WriteLine(\u00225. Manage Categories\u0022);\n        Console.WriteLine(\u00226. Generate Report\u0022);\n        Console.WriteLine(\u00227. Exit\u0022);\n        \n        switch (Console.ReadLine())\n        {\n            case \u00221\u0022: AddExpense(expenseService, categoryService); return true;\n            case \u00222\u0022: ListExpenses(expenseService); return true;\n            case \u00223\u0022: EditExpense(expenseService, categoryService); return true;\n            case \u00224\u0022: DeleteExpense(expenseService); return true;\n            case \u00225\u0022: ManageCategories(categoryService); return true;\n            case \u00226\u0022: GenerateReport(reportService, expenseService); return true;\n            case \u00227\u0022: return false;\n            default: Console.WriteLine(\u0022Invalid option\u0022); return true;\n        }\n    }\n    \n    private void AddExpense(ExpenseService service, CategoryService categoryService)\n    {\n        try\n        {\n            Console.WriteLine(\u0022Enter amount:\u0022);\n            var amount = decimal.Parse(Console.ReadLine());\n            \n            Console.WriteLine(\u0022Enter date (yyyy-MM-dd):\u0022);\n            var date = DateTime.Parse(Console.ReadLine());\n            \n            Console.WriteLine(\u0022Available categories:\u0022);\n            categoryService.GetAllCategories().ToList().ForEach(c =\u003E Console.WriteLine(c.Name));\n            Console.WriteLine(\u0022Enter category name:\u0022);\n            var categoryName = Console.ReadLine();\n            \n            Console.WriteLine(\u0022Enter description:\u0022);\n            var description = Console.ReadLine();\n            \n            var expense = new Expense\n            {\n                Amount = amount,\n                Date = date,\n                CategoryId = categoryService.GetCategoryByName(categoryName).Id,\n                Description = description\n            };\n            \n            service.AddExpense(expense);\n            Console.WriteLine(\u0022Expense added successfully\u0022);\n            \n            CheckBudgetAlert(expense, categoryService);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\u0022Error adding expense: \u0022 \u002B ex.Message);\n        }\n    }\n    \n    private void EditExpense(ExpenseService service, CategoryService categoryService)\n    {\n        try\n        {\n            Console.WriteLine(\u0022Enter expense ID to edit:\u0022);\n            var id = Console.ReadLine();\n            var expense = service.GetExpense(id);\n            \n            if (expense == null)\n            {\n                Console.WriteLine(\u0022Expense not found!\u0022);\n                return;\n            }\n            \n            Console.WriteLine(\u0022Enter new amount (current: \u0022 \u002B expense.Amount \u002B \u0022):\u0022);\n            var amountInput = Console.ReadLine();\n            if (!string.IsNullOrEmpty(amountInput))\n                expense.Amount = decimal.Parse(amountInput);\n            \n            Console.WriteLine(\u0022Enter new date (yyyy-MM-dd) (current: \u0022 \u002B expense.Date.ToString(\u0022yyyy-MM-dd\u0022) \u002B \u0022):\u0022);\n            var dateInput = Console.ReadLine();\n            if (!string.IsNullOrEmpty(dateInput))\n                expense.Date = DateTime.Parse(dateInput);\n            \n            Console.WriteLine(\u0022Available categories:\u0022);\n            categoryService.GetAllCategories().ToList().ForEach(c =\u003E Console.WriteLine(c.Name));\n            Console.WriteLine(\u0022Enter new category name (current: \u0022 \u002B categoryService.GetCategory(expense.CategoryId).Name \u002B \u0022):\u0022);\n            var categoryName = Console.ReadLine();\n            if (!string.IsNullOrEmpty(categoryName))\n            {\n                var category = categoryService.GetCategoryByName(categoryName);\n                if (category != null)\n                    expense.CategoryId = category.Id;\n                else\n                    Console.WriteLine(\u0022Category not found, keeping current category.\u0022);\n            }\n            \n            Console.WriteLine(\u0022Enter new description (current: \u0022 \u002B expense.Description \u002B \u0022):\u0022);\n            var description = Console.ReadLine();\n            if (!string.IsNullOrEmpty(description))\n                expense.Description = description;\n            \n            service.UpdateExpense(expense);\n            Console.WriteLine(\u0022Expense updated successfully\u0022);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\u0022Error editing expense: \u0022 \u002B ex.Message);\n        }\n    }\n    \n    private void DeleteExpense(ExpenseService service)\n    {\n        try\n        {\n            Console.WriteLine(\u0022Enter expense ID to delete:\u0022);\n            var id = Console.ReadLine();\n            var expense = service.GetExpense(id);\n            \n            if (expense == null)\n            {\n                Console.WriteLine(\u0022Expense not found!\u0022);\n                return;\n            }\n            \n            service.DeleteExpense(id);\n            Console.WriteLine(\u0022Expense deleted successfully\u0022);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\u0022Error deleting expense: \u0022 \u002B ex.Message);\n        }\n    }\n    \n    private void CheckBudgetAlert(Expense expense, CategoryService categoryService)\n    {\n        var category = categoryService.GetCategory(expense.CategoryId);\n        if (category.BudgetLimit \u003C= 0) return;\n        \n        var monthlyTotal = categoryService.GetMonthlyTotal(expense.CategoryId, DateTime.Now.Month);\n        if (monthlyTotal \u003E= category.BudgetLimit)\n        {\n            Console.WriteLine(\u0022ALERT: Budget limit exceeded for category \u0022 \u002B category.Name);\n        }\n        else if (monthlyTotal \u003E= category.BudgetLimit * 0.9m)\n        {\n            Console.WriteLine(\u0022WARNING: Approaching budget limit for category \u0022 \u002B category.Name);\n        }\n    }\n    \n    private void ListExpenses(ExpenseService service)\n    {\n        Console.WriteLine(\u0022\\nExpenses:\u0022);\n        service.GetAllExpenses().ForEach(e =\u003E\n            Console.WriteLine($\u0022{e.Id} - {e.Date:yyyy-MM-dd} - {e.Amount:C} - {e.Description}\u0022));\n    }\n    \n    private void ManageCategories(CategoryService service)\n    {\n        Console.WriteLine(\u0022\\nCategory Management:\u0022);\n        Console.WriteLine(\u00221. Add Category\u0022);\n        Console.WriteLine(\u00222. Set Budget Limit\u0022);\n        Console.WriteLine(\u00223. List Categories\u0022);\n        \n        switch (Console.ReadLine())\n        {\n            case \u00221\u0022:\n                Console.WriteLine(\u0022Enter category name:\u0022);\n                var name = Console.ReadLine();\n                service.AddCategory(new Category { Name = name });\n                break;\n            case \u00222\u0022:\n                Console.WriteLine(\u0022Enter category name:\u0022);\n                var categoryName = Console.ReadLine();\n                Console.WriteLine(\u0022Enter budget limit:\u0022);\n                var limit = decimal.Parse(Console.ReadLine());\n                var category = service.GetCategoryByName(categoryName);\n                category.BudgetLimit = limit;\n                service.UpdateCategory(category);\n                break;\n            case \u00223\u0022:\n                service.GetAllCategories().ForEach(c =\u003E \n                    Console.WriteLine($\u0022{c.Name} - Budget: {c.BudgetLimit:C}\u0022));\n                break;\n        }\n    }\n    \n    private void GenerateReport(ReportService reportService, ExpenseService expenseService)\n    {\n        Console.WriteLine(\u0022Enter start date (yyyy-MM-dd):\u0022);\n        var start = DateTime.Parse(Console.ReadLine());\n        Console.WriteLine(\u0022Enter end date (yyyy-MM-dd):\u0022);\n        var end = DateTime.Parse(Console.ReadLine());\n        \n        var report = reportService.GenerateReport(start, end);\n        \n        Console.WriteLine(\u0022\\nMonthly Report:\u0022);\n        Console.WriteLine(\u0022Total Expenses: \u0022 \u002B report.TotalExpenses.ToString(\u0022C\u0022));\n        Console.WriteLine(\u0022By Category:\u0022);\n        foreach (var item in report.ExpensesByCategory)\n        {\n            Console.WriteLine($\u0022{item.CategoryName}: {item.Total.ToString(\u0022C\u0022)}\u0022);\n        }\n    }\n}\n\npublic class Expense\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public decimal Amount { get; set; }\n    public DateTime Date { get; set; }\n    public string CategoryId { get; set; }\n    public string Description { get; set; }\n}\n\npublic class Category\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public string Name { get; set; }\n    public decimal BudgetLimit { get; set; }\n}\n\npublic class Report\n{\n    public string Id { get; set; } = Guid.NewGuid().ToString();\n    public DateTime StartDate { get; set; }\n    public DateTime EndDate { get; set; }\n    public decimal TotalExpenses { get; set; }\n    public List\u003CCategoryTotal\u003E ExpensesByCategory { get; set; } = new List\u003CCategoryTotal\u003E();\n}\n\npublic class CategoryTotal\n{\n    public string CategoryId { get; set; }\n    public string CategoryName { get; set; }\n    public decimal Total { get; set; }\n}\n\npublic class ExpenseRepository\n{\n    private readonly string _filePath;\n    \n    public ExpenseRepository(string filePath) =\u003E _filePath = filePath;\n    \n    public List\u003CExpense\u003E LoadExpenses() =\u003E File.Exists(_filePath) \n        ? JsonConvert.DeserializeObject\u003CList\u003CExpense\u003E\u003E(File.ReadAllText(_filePath)) \n        : new List\u003CExpense\u003E();\n    \n    public void SaveExpenses(List\u003CExpense\u003E expenses) =\u003E File.WriteAllText(_filePath, JsonConvert.SerializeObject(expenses));\n}\n\npublic class CategoryRepository\n{\n    private readonly string _filePath;\n    \n    public CategoryRepository(string filePath) =\u003E _filePath = filePath;\n    \n    public List\u003CCategory\u003E LoadCategories() =\u003E File.Exists(_filePath) \n        ? JsonConvert.DeserializeObject\u003CList\u003CCategory\u003E\u003E(File.ReadAllText(_filePath)) \n        : new List\u003CCategory\u003E();\n    \n    public void SaveCategories(List\u003CCategory\u003E categories) =\u003E File.WriteAllText(_filePath, JsonConvert.SerializeObject(categories));\n}\n\npublic class ReportRepository\n{\n    private readonly string _filePath;\n    \n    public ReportRepository(string filePath) =\u003E _filePath = filePath;\n    \n    public List\u003CReport\u003E LoadReports() =\u003E File.Exists(_filePath) \n        ? JsonConvert.DeserializeObject\u003CList\u003CReport\u003E\u003E(File.ReadAllText(_filePath)) \n        : new List\u003CReport\u003E();\n    \n    public void SaveReports(List\u003CReport\u003E reports) =\u003E File.WriteAllText(_filePath, JsonConvert.SerializeObject(reports));\n}\n\npublic class ExpenseService\n{\n    private readonly ExpenseRepository _repository;\n    private readonly CategoryService _categoryService;\n    \n    public ExpenseService(ExpenseRepository repository, CategoryService categoryService)\n    {\n        _repository = repository;\n        _categoryService = categoryService;\n    }\n    \n    public void AddExpense(Expense expense)\n    {\n        var expenses = _repository.LoadExpenses();\n        expenses.Add(expense);\n        _repository.SaveExpenses(expenses);\n    }\n    \n    public List\u003CExpense\u003E GetAllExpenses() =\u003E _repository.LoadExpenses();\n    \n    public Expense GetExpense(string id) =\u003E _repository.LoadExpenses().FirstOrDefault(e =\u003E e.Id == id);\n    \n    public void UpdateExpense(Expense expense)\n    {\n        var expenses = _repository.LoadExpenses();\n        var index = expenses.FindIndex(e =\u003E e.Id == expense.Id);\n        if (index \u003E= 0)\n        {\n            expenses[index] = expense;\n            _repository.SaveExpenses(expenses);\n        }\n    }\n    \n    public void DeleteExpense(string expenseId)\n    {\n        var expenses = _repository.LoadExpenses();\n        var expense = expenses.FirstOrDefault(e =\u003E e.Id == expenseId);\n        if (expense != null)\n        {\n            expenses.Remove(expense);\n            _repository.SaveExpenses(expenses);\n        }\n    }\n}\n\npublic class CategoryService\n{\n    private readonly CategoryRepository _repository;\n    \n    public CategoryService(CategoryRepository repository) =\u003E _repository = repository;\n    \n    public void AddCategory(Category category)\n    {\n        var categories = _repository.LoadCategories();\n        categories.Add(category);\n        _repository.SaveCategories(categories);\n    }\n    \n    public List\u003CCategory\u003E GetAllCategories() =\u003E _repository.LoadCategories();\n    \n    public Category GetCategory(string id) =\u003E _repository.LoadCategories().FirstOrDefault(c =\u003E c.Id == id);\n    \n    public Category GetCategoryByName(string name) =\u003E _repository.LoadCategories().FirstOrDefault(c =\u003E c.Name.Equals(name, StringComparison.OrdinalIgnoreCase));\n    \n    public void UpdateCategory(Category category)\n    {\n        var categories = _repository.LoadCategories();\n        var index = categories.FindIndex(c =\u003E c.Id == category.Id);\n        if (index \u003E= 0) categories[index] = category;\n        _repository.SaveCategories(categories);\n    }\n    \n    public decimal GetMonthlyTotal(string categoryId, int month)\n    {\n        var expenses = new ExpenseRepository(_expensesPath).LoadExpenses();\n        return expenses\n            .Where(e =\u003E e.CategoryId == categoryId \u0026\u0026 e.Date.Month == month)\n            .Sum(e =\u003E e.Amount);\n    }\n}\n\npublic class ReportService\n{\n    private readonly ExpenseRepository _expenseRepo;\n    private readonly ReportRepository _reportRepo;\n    \n    public ReportService(ExpenseRepository expenseRepo, ReportRepository reportRepo)\n    {\n        _expenseRepo = expenseRepo;\n        _reportRepo = reportRepo;\n    }\n    \n    public Report GenerateReport(DateTime start, DateTime end)\n    {\n        var expenses = _expenseRepo.LoadExpenses()\n            .Where(e =\u003E e.Date \u003E= start \u0026\u0026 e.Date \u003C= end)\n            .ToList();\n        \n        var report = new Report\n        {\n            StartDate = start,\n            EndDate = end,\n            TotalExpenses = expenses.Sum(e =\u003E e.Amount),\n            ExpensesByCategory = expenses\n                .GroupBy(e =\u003E e.CategoryId)\n                .Select(g =\u003E new CategoryTotal\n                {\n                    CategoryId = g.Key,\n                    Total = g.Sum(e =\u003E e.Amount)\n                }).ToList()\n        };\n        \n        var reports = _reportRepo.LoadReports();\n        reports.Add(report);\n        _reportRepo.SaveReports(reports);\n        \n        return report;\n    }\n}"
    }
  ],
  "required_nugets": []
}