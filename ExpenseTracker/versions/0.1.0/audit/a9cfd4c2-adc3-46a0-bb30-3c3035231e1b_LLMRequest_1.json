{
  "model": "deepseek-reasoner",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant with high skills in software development. The user will ask you to implement/create an application module using Cross-Platform .NET 9 C# code that adheres to the following interface:\r\n\r\n\u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022\r\n\r\n### Requirements:\r\n- The generated code must avoid using external APIs if possible, in case an API is needed add it to the list of required APIS.\r\n_ If the generated code needs NuGets installed add the NuGet name to the list of required Nugets.\r\n- The response must be in JSON format.\r\n- The \u0060source_code\u0060 field must contain C# code only (avoid markdown notation).\r\n- Do not include the IGeneratedModule in the generated source code.\r\n- The generated code **must not include any instructions that begin with \u0060Console.WriteLine($\u0060**.\r\n- If data persistence is required, use JSON files stored in the \u0060dataFolder\u0060 parameter of the \u0060Main\u0060 method.\r\n- Ensure the generated module is as detailed and complete as possible.\r\n- The constructor of the generated module must not have any parameters.\r\n- The generated code MUST not call Exit method. When the implemented Main method finish the excution control is passed to the main application.\r\n- The generated code must print information in the console to let know the user the module is running.\r\n- The generated code must implement CRUPDS operations for the data models.\r\n\r\n### Example output:\r\n{\u0022source_code\u0022:\u0022GENERATED C# CODE\u0022,\u0022description\u0022: \u0022GENERATED DESCRIPTION FOR THE MODULE\u0022, \u0022required_apis\u0022=[{\u0022API_1\u0022},{\u0022API_2\u0022}], , \u0022required_nugets\u0022=[{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_1\u0022,\u0022nuget_version\u0022:\u00221.0.0\u0022 },{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_2\u0022,\u0022nuget_version\u0022:\u00222.0.0.0\u0022 }]}"
    },
    {
      "role": "user",
      "content": "Generate a Cross-Platform .NET 9 C# code that implements the next interface \u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022 the Main method is the start point for the module. The souce code will run on a console application. The generated code must not write strings to console like this Console.WriteLine($\u0022{variable}\u0022). The source code will be automaticallty compiled so avoid adding markdown notation or anything that is not c# code The module must: Design a software module that allows users to track their daily expenses, categorize them, and generate monthly reports. The module should provide an intuitive interface for users to log their expenses, assign categories, and view summarized reports. The system should support CRUDS operations for all data models, ensuring users can create, read, update, delete, and search their expense records efficiently. The module should also allow users to customize categories and generate detailed or summarized reports based on their preferences.\n## Funcional Details ##\nTrack daily expenses with details such as amount, date, category, and description.\r\nCategorize expenses into predefined or user-defined categories.\r\nGenerate monthly reports summarizing expenses by category, date range, or other filters.\r\nProvide an overview of total expenses, average spending, and trends over time.\r\nAllow users to set budgets for categories and receive alerts when nearing or exceeding limits.\n## Required features ## \nAdd, view, edit, and delete expense entries.\r\nBasic categorization of expenses.\r\nGenerate simple monthly reports showing total expenses by category.\r\nSearch and filter expenses by date or category.\n## User interaction ## \nUsers can add a new expense by entering details like amount, date, category, and description.\r\nUsers can view a list of their expenses, filtered by date, category, or other criteria.\r\nUsers can edit or delete existing expense entries.\r\nUsers can generate and view monthly reports, either summarized or detailed.\r\nUsers can customize expense categories and manage their list of categories.\n## Suggested data models ##\n**Expense**: \u0060{ id: string, amount: number, date: Date, categoryId: string, description: string, userId: string }\u0060\r\n**Category**: \u0060{ id: string, name: string, userId: string, budgetLimit: number }\u0060\r\n**Report**: \u0060{ id: string, userId: string, startDate: Date, endDate: Date, totalExpenses: number, expensesByCategory: { categoryId: string, total: number }[] }\u0060\r\n**User**: \u0060{ id: string, name: string, email: string }\u0060"
    }
  ],
  "stream": false
}