
{"id":"0d986eed-ab41-4312-870c-eb6269a3bf29","object":"chat.completion","created":1743786042,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ExpenseTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Expense Tracker\\\";\\n\\n    private string _expensesFilePath;\\n    private string _categoriesFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Expense Tracker module is running...\\\");\\n        \\n        _expensesFilePath = Path.Combine(dataFolder, \\\"expenses.json\\\");\\n        _categoriesFilePath = Path.Combine(dataFolder, \\\"categories.json\\\");\\n\\n        InitializeFiles();\\n\\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddExpense();\\n                    break;\\n                case \\\"2\\\":\\n                    AddCategory();\\n                    break;\\n                case \\\"3\\\":\\n                    ViewMonthlyReport();\\n                    break;\\n                case \\\"4\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private void InitializeFiles()\\n    {\\n        if (!File.Exists(_expensesFilePath))\\n        {\\n            File.WriteAllText(_expensesFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_categoriesFilePath))\\n        {\\n            var defaultCategories = new List<string> { \\\"Food\\\", \\\"Transport\\\", \\\"Utilities\\\", \\\"Entertainment\\\" };\\n            File.WriteAllText(_categoriesFilePath, JsonSerializer.Serialize(defaultCategories));\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nExpense Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Expense\\\");\\n        Console.WriteLine(\\\"2. Add Category\\\");\\n        Console.WriteLine(\\\"3. View Monthly Report\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddExpense()\\n    {\\n        Console.Write(\\\"Enter expense amount: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount. Please enter a valid number.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter expense description: \\\");\\n        var description = Console.ReadLine();\\n\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(_categoriesFilePath));\\n        Console.WriteLine(\\\"Available categories:\\\");\\n        for (int i = 0; i < categories.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + categories[i]);\\n        }\\n\\n        Console.Write(\\\"Select category (number): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int categoryIndex) || categoryIndex < 1 || categoryIndex > categories.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid category selection.\\\");\\n            return;\\n        }\\n\\n        var expense = new Expense\\n        {\\n            Amount = amount,\\n            Description = description,\\n            Category = categories[categoryIndex - 1],\\n            Date = DateTime.Now\\n        };\\n\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(_expensesFilePath));\\n        expenses.Add(expense);\\n        File.WriteAllText(_expensesFilePath, JsonSerializer.Serialize(expenses));\\n\\n        Console.WriteLine(\\\"Expense added successfully.\\\");\\n    }\\n\\n    private void AddCategory()\\n    {\\n        Console.Write(\\\"Enter new category name: \\\");\\n        var categoryName = Console.ReadLine();\\n\\n        if (string.IsNullOrWhiteSpace(categoryName))\\n        {\\n            Console.WriteLine(\\\"Category name cannot be empty.\\\");\\n            return;\\n        }\\n\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(_categoriesFilePath));\\n        if (categories.Contains(categoryName))\\n        {\\n            Console.WriteLine(\\\"Category already exists.\\\");\\n            return;\\n        }\\n\\n        categories.Add(categoryName);\\n        File.WriteAllText(_categoriesFilePath, JsonSerializer.Serialize(categories));\\n\\n        Console.WriteLine(\\\"Category added successfully.\\\");\\n    }\\n\\n    private void ViewMonthlyReport()\\n    {\\n        Console.Write(\\\"Enter month (1-12): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int month) || month < 1 || month > 12)\\n        {\\n            Console.WriteLine(\\\"Invalid month.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter year: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int year))\\n        {\\n            Console.WriteLine(\\\"Invalid year.\\\");\\n            return;\\n        }\\n\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(_expensesFilePath));\\n        var monthlyExpenses = expenses.FindAll(e => e.Date.Month == month && e.Date.Year == year);\\n\\n        if (monthlyExpenses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No expenses found for the selected month.\\\");\\n            return;\\n        }\\n\\n        var report = new Dictionary<string, decimal>();\\n        decimal total = 0;\\n\\n        foreach (var expense in monthlyExpenses)\\n        {\\n            total += expense.Amount;\\n            if (report.ContainsKey(expense.Category))\\n            {\\n                report[expense.Category] += expense.Amount;\\n            }\\n            else\\n            {\\n                report[expense.Category] = expense.Amount;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nMonthly Expense Report:\\\");\\n        Console.WriteLine(\\\"----------------------\\\");\\n        foreach (var entry in report)\\n        {\\n            Console.WriteLine(entry.Key + \\\": \\\" + entry.Value.ToString(\\\"C\\\"));\\n        }\\n        Console.WriteLine(\\\"----------------------\\\");\\n        Console.WriteLine(\\\"Total: \\\" + total.ToString(\\\"C\\\"));\\n    }\\n\\n    private class Expense\\n    {\\n        public decimal Amount { get; set; }\\n        public string Description { get; set; }\\n        public string Category { get; set; }\\n        public DateTime Date { get; set; }\\n    }\\n}\",\n  \"name\": \"Expense Tracker\",\n  \"description\": \"A module to track daily expenses and categorize them for monthly reports\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1561,"total_tokens":2082,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}