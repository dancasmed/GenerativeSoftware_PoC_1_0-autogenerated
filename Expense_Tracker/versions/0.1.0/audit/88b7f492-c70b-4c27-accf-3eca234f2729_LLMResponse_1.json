
{"id":"7ddc121e-6344-42d0-8c75-ea4f36d65cc6","object":"chat.completion","created":1743765502,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ExpenseTrackerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Expense Tracker\\\";\\n\\n    private string expensesFilePath;\\n    private string categoriesFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Expense Tracker Module is running...\\\");\\n\\n        expensesFilePath = Path.Combine(dataFolder, \\\"expenses.json\\\");\\n        categoriesFilePath = Path.Combine(dataFolder, \\\"categories.json\\\");\\n\\n        InitializeFiles();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddExpense();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewMonthlyReport();\\n                    break;\\n                case \\\"3\\\":\\n                    ManageCategories();\\n                    break;\\n                case \\\"4\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private void InitializeFiles()\\n    {\\n        if (!File.Exists(expensesFilePath))\\n        {\\n            File.WriteAllText(expensesFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(categoriesFilePath))\\n        {\\n            var defaultCategories = new List<string> { \\\"Food\\\", \\\"Transport\\\", \\\"Utilities\\\", \\\"Entertainment\\\", \\\"Other\\\" };\\n            File.WriteAllText(categoriesFilePath, JsonSerializer.Serialize(defaultCategories));\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nExpense Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Expense\\\");\\n        Console.WriteLine(\\\"2. View Monthly Report\\\");\\n        Console.WriteLine(\\\"3. Manage Categories\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddExpense()\\n    {\\n        Console.Write(\\\"Enter expense amount: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount. Please enter a valid number.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter expense description: \\\");\\n        string description = Console.ReadLine();\\n\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(categoriesFilePath));\\n        Console.WriteLine(\\\"Available categories:\\\");\\n        for (int i = 0; i < categories.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + categories[i]);\\n        }\\n\\n        Console.Write(\\\"Select category (number): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int categoryIndex) || categoryIndex < 1 || categoryIndex > categories.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid category selection.\\\");\\n            return;\\n        }\\n\\n        string category = categories[categoryIndex - 1];\\n\\n        var expense = new Expense\\n        {\\n            Amount = amount,\\n            Description = description,\\n            Category = category,\\n            Date = DateTime.Now\\n        };\\n\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(expensesFilePath));\\n        expenses.Add(expense);\\n        File.WriteAllText(expensesFilePath, JsonSerializer.Serialize(expenses));\\n\\n        Console.WriteLine(\\\"Expense added successfully.\\\");\\n    }\\n\\n    private void ViewMonthlyReport()\\n    {\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(expensesFilePath));\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(categoriesFilePath));\\n\\n        Console.Write(\\\"Enter year and month (yyyy-MM): \\\");\\n        string yearMonthInput = Console.ReadLine();\\n\\n        if (!DateTime.TryParse(yearMonthInput + \\\"-01\\\", out DateTime targetMonth))\\n        {\\n            Console.WriteLine(\\\"Invalid date format. Please use yyyy-MM format.\\\");\\n            return;\\n        }\\n\\n        var monthlyExpenses = expenses.FindAll(e => e.Date.Year == targetMonth.Year && e.Date.Month == targetMonth.Month);\\n\\n        Console.WriteLine(\\\"\\\\nMonthly Report for \\\" + targetMonth.ToString(\\\"yyyy-MM\\\") + \\\":\\\");\\n        Console.WriteLine(\\\"Total Expenses: \\\" + monthlyExpenses.Sum(e => e.Amount).ToString(\\\"C\\\"));\\n\\n        Console.WriteLine(\\\"\\\\nExpenses by Category:\\\");\\n        foreach (var category in categories)\\n        {\\n            var categoryExpenses = monthlyExpenses.FindAll(e => e.Category == category);\\n            if (categoryExpenses.Count > 0)\\n            {\\n                Console.WriteLine(category + \\\": \\\" + categoryExpenses.Sum(e => e.Amount).ToString(\\\"C\\\") + \\\" (\\\" + categoryExpenses.Count + \\\" expenses)\\\");\\n            }\\n        }\\n    }\\n\\n    private void ManageCategories()\\n    {\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(categoriesFilePath));\\n\\n        Console.WriteLine(\\\"\\\\nCurrent Categories:\\\");\\n        for (int i = 0; i < categories.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + categories[i]);\\n        }\\n\\n        Console.WriteLine(\\\"\\\\n1. Add Category\\\");\\n        Console.WriteLine(\\\"2. Remove Category\\\");\\n        Console.WriteLine(\\\"3. Back to Main Menu\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n\\n        string input = Console.ReadLine();\\n        switch (input)\\n        {\\n            case \\\"1\\\":\\n                Console.Write(\\\"Enter new category name: \\\");\\n                string newCategory = Console.ReadLine();\\n                if (!string.IsNullOrWhiteSpace(newCategory) && !categories.Contains(newCategory))\\n                {\\n                    categories.Add(newCategory);\\n                    File.WriteAllText(categoriesFilePath, JsonSerializer.Serialize(categories));\\n                    Console.WriteLine(\\\"Category added successfully.\\\");\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid category name or category already exists.\\\");\\n                }\\n                break;\\n            case \\\"2\\\":\\n                Console.Write(\\\"Enter category number to remove: \\\");\\n                if (int.TryParse(Console.ReadLine(), out int removeIndex) && removeIndex > 0 && removeIndex <= categories.Count)\\n                {\\n                    categories.RemoveAt(removeIndex - 1);\\n                    File.WriteAllText(categoriesFilePath, JsonSerializer.Serialize(categories));\\n                    Console.WriteLine(\\\"Category removed successfully.\\\");\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid category number.\\\");\\n                }\\n                break;\\n            case \\\"3\\\":\\n                return;\\n            default:\\n                Console.WriteLine(\\\"Invalid option.\\\");\\n                break;\\n        }\\n    }\\n}\\n\\npublic class Expense\\n{\\n    public decimal Amount { get; set; }\\n    public string Description { get; set; }\\n    public string Category { get; set; }\\n    public DateTime Date { get; set; }\\n}\",\n  \"name\": \"Expense Tracker\",\n  \"description\": \"Tracks daily expenses and categorizes them for monthly reports\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1762,"total_tokens":2283,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}