
{"id":"ec8dc65e-d444-4f23-8696-91eff7ecf2bf","object":"chat.completion","created":1743761386,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ExpenseTrackerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Expense Tracker Module\\\";\\n\\n    private string _expensesFilePath;\\n    private string _categoriesFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Expense Tracker Module is running.\\\");\\n\\n        _expensesFilePath = Path.Combine(dataFolder, \\\"expenses.json\\\");\\n        _categoriesFilePath = Path.Combine(dataFolder, \\\"categories.json\\\");\\n\\n        InitializeFiles();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddExpense();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewExpenses();\\n                    break;\\n                case \\\"3\\\":\\n                    GenerateMonthlyReport();\\n                    break;\\n                case \\\"4\\\":\\n                    ManageCategories();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    private void InitializeFiles()\\n    {\\n        if (!File.Exists(_expensesFilePath))\\n        {\\n            File.WriteAllText(_expensesFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_categoriesFilePath))\\n        {\\n            var defaultCategories = new List<string> { \\\"Food\\\", \\\"Transport\\\", \\\"Utilities\\\", \\\"Entertainment\\\", \\\"Other\\\" };\\n            File.WriteAllText(_categoriesFilePath, JsonSerializer.Serialize(defaultCategories));\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nExpense Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Expense\\\");\\n        Console.WriteLine(\\\"2. View Expenses\\\");\\n        Console.WriteLine(\\\"3. Generate Monthly Report\\\");\\n        Console.WriteLine(\\\"4. Manage Categories\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddExpense()\\n    {\\n        Console.Write(\\\"Enter amount: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal amount))\\n        {\\n            Console.WriteLine(\\\"Invalid amount.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter description: \\\");\\n        string description = Console.ReadLine();\\n\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(_categoriesFilePath));\\n        Console.WriteLine(\\\"Available categories:\\\");\\n        for (int i = 0; i < categories.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + categories[i]);\\n        }\\n\\n        Console.Write(\\\"Select category (number): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int categoryIndex) || categoryIndex < 1 || categoryIndex > categories.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid category selection.\\\");\\n            return;\\n        }\\n\\n        string category = categories[categoryIndex - 1];\\n\\n        var expense = new Expense\\n        {\\n            Amount = amount,\\n            Description = description,\\n            Category = category,\\n            Date = DateTime.Now\\n        };\\n\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(_expensesFilePath));\\n        expenses.Add(expense);\\n        File.WriteAllText(_expensesFilePath, JsonSerializer.Serialize(expenses));\\n\\n        Console.WriteLine(\\\"Expense added successfully.\\\");\\n    }\\n\\n    private void ViewExpenses()\\n    {\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(_expensesFilePath));\\n\\n        if (expenses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No expenses recorded yet.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAll Expenses:\\\");\\n        foreach (var expense in expenses)\\n        {\\n            Console.WriteLine($\\\"{expense.Date:yyyy-MM-dd} - {expense.Category}: {expense.Amount:C} - {expense.Description}\\\");\\n        }\\n    }\\n\\n    private void GenerateMonthlyReport()\\n    {\\n        Console.Write(\\\"Enter year: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int year))\\n        {\\n            Console.WriteLine(\\\"Invalid year.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter month (1-12): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int month) || month < 1 || month > 12)\\n        {\\n            Console.WriteLine(\\\"Invalid month.\\\");\\n            return;\\n        }\\n\\n        var expenses = JsonSerializer.Deserialize<List<Expense>>(File.ReadAllText(_expensesFilePath));\\n        var monthlyExpenses = expenses.FindAll(e => e.Date.Year == year && e.Date.Month == month);\\n\\n        if (monthlyExpenses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No expenses recorded for this month.\\\");\\n            return;\\n        }\\n\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(_categoriesFilePath));\\n        var report = new Dictionary<string, decimal>();\\n\\n        foreach (var category in categories)\\n        {\\n            report[category] = 0;\\n        }\\n\\n        decimal total = 0;\\n        foreach (var expense in monthlyExpenses)\\n        {\\n            report[expense.Category] += expense.Amount;\\n            total += expense.Amount;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nMonthly Expense Report:\\\");\\n        Console.WriteLine($\\\"Month: {month}/{year}\\\");\\n        Console.WriteLine(\\\"----------------------------\\\");\\n\\n        foreach (var entry in report)\\n        {\\n            if (entry.Value > 0)\\n            {\\n                Console.WriteLine($\\\"{entry.Key}: {entry.Value:C}\\\");\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"----------------------------\\\");\\n        Console.WriteLine($\\\"Total: {total:C}\\\");\\n    }\\n\\n    private void ManageCategories()\\n    {\\n        var categories = JsonSerializer.Deserialize<List<string>>(File.ReadAllText(_categoriesFilePath));\\n\\n        bool managing = true;\\n        while (managing)\\n        {\\n            Console.WriteLine(\\\"\\\\nCurrent Categories:\\\");\\n            for (int i = 0; i < categories.Count; i++)\\n            {\\n                Console.WriteLine(i + 1 + \\\". \\\" + categories[i]);\\n            }\\n\\n            Console.WriteLine(\\\"\\\\n1. Add Category\\\");\\n            Console.WriteLine(\\\"2. Remove Category\\\");\\n            Console.WriteLine(\\\"3. Back to Main Menu\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    Console.Write(\\\"Enter new category name: \\\");\\n                    string newCategory = Console.ReadLine();\\n                    if (!string.IsNullOrWhiteSpace(newCategory) && !categories.Contains(newCategory))\\n                    {\\n                        categories.Add(newCategory);\\n                        File.WriteAllText(_categoriesFilePath, JsonSerializer.Serialize(categories));\\n                        Console.WriteLine(\\\"Category added successfully.\\\");\\n                    }\\n                    else\\n                    {\\n                        Console.WriteLine(\\\"Invalid category name or category already exists.\\\");\\n                    }\\n                    break;\\n                case \\\"2\\\":\\n                    Console.Write(\\\"Enter category number to remove: \\\");\\n                    if (int.TryParse(Console.ReadLine(), out int removeIndex) && removeIndex > 0 && removeIndex <= categories.Count)\\n                    {\\n                        categories.RemoveAt(removeIndex - 1);\\n                        File.WriteAllText(_categoriesFilePath, JsonSerializer.Serialize(categories));\\n                        Console.WriteLine(\\\"Category removed successfully.\\\");\\n                    }\\n                    else\\n                    {\\n                        Console.WriteLine(\\\"Invalid category number.\\\");\\n                    }\\n                    break;\\n                case \\\"3\\\":\\n                    managing = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n}\\n\\npublic class Expense\\n{\\n    public decimal Amount { get; set; }\\n    public string Description { get; set; }\\n    public string Category { get; set; }\\n    public DateTime Date { get; set; }\\n}\",\n  \"name\": \"Expense Tracker Module\",\n  \"description\": \"A module for tracking daily expenses, categorizing them, and generating monthly reports.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":2065,"total_tokens":2586,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":521},"system_fingerprint":"fp_3d5141a69a_prod0225"}