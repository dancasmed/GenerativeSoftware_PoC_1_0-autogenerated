
{"id":"8128fe22-4fb6-4ef9-92d1-329eebbc3caf","object":"chat.completion","created":1744175324,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class FamilyChoresModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Family Chores Manager\\\";\\n    \\n    private string _choresFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Family Chores Manager module...\\\");\\n        \\n        _choresFilePath = Path.Combine(dataFolder, \\\"chores.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        List<Chore> chores = LoadChores();\\n        \\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            Console.WriteLine(\\\"\\\\nFamily Chores Manager\\\");\\n            Console.WriteLine(\\\"1. Add Chore\\\");\\n            Console.WriteLine(\\\"2. View Chores\\\");\\n            Console.WriteLine(\\\"3. Mark Chore Complete\\\");\\n            Console.WriteLine(\\\"4. Remove Chore\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddChore(chores);\\n                    break;\\n                case \\\"2\\\":\\n                    ViewChores(chores);\\n                    break;\\n                case \\\"3\\\":\\n                    MarkChoreComplete(chores);\\n                    break;\\n                case \\\"4\\\":\\n                    RemoveChore(chores);\\n                    break;\\n                case \\\"5\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n            \\n            SaveChores(chores);\\n        }\\n        \\n        Console.WriteLine(\\\"Family Chores Manager module finished.\\\");\\n        return true;\\n    }\\n    \\n    private List<Chore> LoadChores()\\n    {\\n        if (!File.Exists(_choresFilePath))\\n        {\\n            return new List<Chore>();\\n        }\\n        \\n        string json = File.ReadAllText(_choresFilePath);\\n        return JsonSerializer.Deserialize<List<Chore>>(json);\\n    }\\n    \\n    private void SaveChores(List<Chore> chores)\\n    {\\n        string json = JsonSerializer.Serialize(chores);\\n        File.WriteAllText(_choresFilePath, json);\\n    }\\n    \\n    private void AddChore(List<Chore> chores)\\n    {\\n        Console.Write(\\\"Enter chore name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter assigned person: \\\");\\n        string assignedTo = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter due date (yyyy-MM-dd): \\\");\\n        if (DateTime.TryParse(Console.ReadLine(), out DateTime dueDate))\\n        {\\n            chores.Add(new Chore\\n            {\\n                Id = Guid.NewGuid(),\\n                Name = name,\\n                AssignedTo = assignedTo,\\n                DueDate = dueDate,\\n                IsCompleted = false\\n            });\\n            \\n            Console.WriteLine(\\\"Chore added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid date format. Chore not added.\\\");\\n        }\\n    }\\n    \\n    private void ViewChores(List<Chore> chores)\\n    {\\n        if (chores.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No chores found.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nChores List:\\\");\\n        Console.WriteLine(\\\"--------------------------------------------------\\\");\\n        Console.WriteLine(\\\"ID\\\\tName\\\\t\\\\tAssigned To\\\\tDue Date\\\\tStatus\\\");\\n        \\n        foreach (var chore in chores)\\n        {\\n            Console.WriteLine($\\\"{chore.Id}\\\\t{chore.Name}\\\\t{chore.AssignedTo}\\\\t{chore.DueDate:yyyy-MM-dd}\\\\t{(chore.IsCompleted ? \\\"Completed\\\" : \\\"Pending\\\")}\\\");\\n        }\\n    }\\n    \\n    private void MarkChoreComplete(List<Chore> chores)\\n    {\\n        ViewChores(chores);\\n        \\n        if (chores.Count == 0) return;\\n        \\n        Console.Write(\\\"Enter the ID of the chore to mark complete: \\\");\\n        if (Guid.TryParse(Console.ReadLine(), out Guid choreId))\\n        {\\n            var chore = chores.Find(c => c.Id == choreId);\\n            if (chore != null)\\n            {\\n                chore.IsCompleted = true;\\n                Console.WriteLine(\\\"Chore marked as complete.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Chore not found.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid ID format.\\\");\\n        }\\n    }\\n    \\n    private void RemoveChore(List<Chore> chores)\\n    {\\n        ViewChores(chores);\\n        \\n        if (chores.Count == 0) return;\\n        \\n        Console.Write(\\\"Enter the ID of the chore to remove: \\\");\\n        if (Guid.TryParse(Console.ReadLine(), out Guid choreId))\\n        {\\n            var chore = chores.Find(c => c.Id == choreId);\\n            if (chore != null)\\n            {\\n                chores.Remove(chore);\\n                Console.WriteLine(\\\"Chore removed successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Chore not found.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid ID format.\\\");\\n        }\\n    }\\n}\\n\\npublic class Chore\\n{\\n    public Guid Id { get; set; }\\n    public string Name { get; set; }\\n    public string AssignedTo { get; set; }\\n    public DateTime DueDate { get; set; }\\n    public bool IsCompleted { get; set; }\\n}\",\n  \"name\": \"Family Chores Manager\",\n  \"description\": \"A module for managing family chores and tracking their completion status.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":518,"completion_tokens":1501,"total_tokens":2019,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":70},"system_fingerprint":"fp_3d5141a69a_prod0225"}