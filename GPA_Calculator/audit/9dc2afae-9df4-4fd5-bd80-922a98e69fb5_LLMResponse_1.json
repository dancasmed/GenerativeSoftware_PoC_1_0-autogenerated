{"id":"a4ff45e8-2e0c-4054-96d9-60ddde8ad73f","object":"chat.completion","created":1743789207,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class GPACalculator : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"GPA Calculator\\\";\\n    \\n    private class Course\\n    {\\n        public string Name { get; set; }\\n        public double Grade { get; set; }\\n        public int Credits { get; set; }\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"GPA Calculator module is running...\\\");\\n        \\n        string filePath = Path.Combine(dataFolder, \\\"courses.json\\\");\\n        List<Course> courses;\\n        \\n        try\\n        {\\n            if (File.Exists(filePath))\\n            {\\n                string json = File.ReadAllText(filePath);\\n                courses = JsonSerializer.Deserialize<List<Course>>(json);\\n                Console.WriteLine(\\\"Loaded existing course data.\\\");\\n            }\\n            else\\n            {\\n                courses = new List<Course>();\\n                Console.WriteLine(\\\"No existing course data found. Starting fresh.\\\");\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading course data: \\\" + ex.Message);\\n            return false;\\n        }\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add Course\\\");\\n            Console.WriteLine(\\\"2. Calculate GPA\\\");\\n            Console.WriteLine(\\\"3. View Courses\\\");\\n            Console.WriteLine(\\\"4. Save and Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddCourse(courses);\\n                    break;\\n                case \\\"2\\\":\\n                    CalculateGPA(courses);\\n                    break;\\n                case \\\"3\\\":\\n                    ViewCourses(courses);\\n                    break;\\n                case \\\"4\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        try\\n        {\\n            string json = JsonSerializer.Serialize(courses);\\n            File.WriteAllText(filePath, json);\\n            Console.WriteLine(\\\"Course data saved successfully.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving course data: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private void AddCourse(List<Course> courses)\\n    {\\n        Console.Write(\\\"Enter course name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter grade (0-4 scale): \\\");\\n        if (!double.TryParse(Console.ReadLine(), out double grade) || grade < 0 || grade > 4)\\n        {\\n            Console.WriteLine(\\\"Invalid grade. Must be between 0 and 4.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter credits: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int credits) || credits <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid credits. Must be a positive integer.\\\");\\n            return;\\n        }\\n        \\n        courses.Add(new Course { Name = name, Grade = grade, Credits = credits });\\n        Console.WriteLine(\\\"Course added successfully.\\\");\\n    }\\n    \\n    private void CalculateGPA(List<Course> courses)\\n    {\\n        if (courses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No courses available to calculate GPA.\\\");\\n            return;\\n        }\\n        \\n        double totalGradePoints = 0;\\n        int totalCredits = 0;\\n        \\n        foreach (var course in courses)\\n        {\\n            totalGradePoints += course.Grade * course.Credits;\\n            totalCredits += course.Credits;\\n        }\\n        \\n        double gpa = totalGradePoints / totalCredits;\\n        Console.WriteLine(\\\"Calculated GPA: \\\" + gpa.ToString(\\\"0.00\\\"));\\n    }\\n    \\n    private void ViewCourses(List<Course> courses)\\n    {\\n        if (courses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No courses available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Current Courses:\\\");\\n        Console.WriteLine(\\\"----------------\\\");\\n        foreach (var course in courses)\\n        {\\n            Console.WriteLine(\\\"Name: \\\" + course.Name);\\n            Console.WriteLine(\\\"Grade: \\\" + course.Grade);\\n            Console.WriteLine(\\\"Credits: \\\" + course.Credits);\\n            Console.WriteLine(\\\"----------------\\\");\\n        }\\n    }\\n}\",\n  \"name\": \"GPA Calculator\",\n  \"description\": \"A module that calculates GPA based on course grades and credits, with persistent storage of course data.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"7.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1239,"total_tokens":1759,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":72},"system_fingerprint":"fp_3d5141a69a_prod0225"}