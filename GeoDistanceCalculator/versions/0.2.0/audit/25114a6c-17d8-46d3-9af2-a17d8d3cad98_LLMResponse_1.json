{"id":"06454faa-b6ac-4f6b-9624-337ffdf71903","object":"chat.completion","created":1743799819,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class GeoDistanceCalculator : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"GeoDistanceCalculator\\\";\\n\\n    public GeoDistanceCalculator() { }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"GeoDistanceCalculator module is running.\\\");\\n        Console.WriteLine(\\\"Calculating distance between two geographical coordinates.\\\");\\n\\n        try\\n        {\\n            var configPath = Path.Combine(dataFolder, \\\"coordinates.json\\\");\\n            if (!File.Exists(configPath))\\n            {\\n                Console.WriteLine(\\\"No coordinates file found. Creating a default one.\\\");\\n                var defaultCoords = new Coordinates\\n                {\\n                    Latitude1 = 40.7128,\\n                    Longitude1 = -74.0060,\\n                    Latitude2 = 34.0522,\\n                    Longitude2 = -118.2437\\n                };\\n                File.WriteAllText(configPath, JsonSerializer.Serialize(defaultCoords));\\n            }\\n\\n            var json = File.ReadAllText(configPath);\\n            var coords = JsonSerializer.Deserialize<Coordinates>(json);\\n\\n            if (coords == null)\\n            {\\n                Console.WriteLine(\\\"Failed to deserialize coordinates.\\\");\\n                return false;\\n            }\\n\\n            double distance = CalculateDistance(coords.Latitude1, coords.Longitude1, coords.Latitude2, coords.Longitude2);\\n            Console.WriteLine(\\\"Distance between the two points is \\\" + distance.ToString(\\\"F2\\\") + \\\" kilometers.\\\");\\n\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)\\n    {\\n        const double R = 6371; // Earth's radius in kilometers\\n\\n        double dLat = ToRadians(lat2 - lat1);\\n        double dLon = ToRadians(lon2 - lon1);\\n\\n        double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +\\n                   Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *\\n                   Math.Sin(dLon / 2) * Math.Sin(dLon / 2);\\n\\n        double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\\n        return R * c;\\n    }\\n\\n    private double ToRadians(double angle)\\n    {\\n        return Math.PI * angle / 180.0;\\n    }\\n\\n    private class Coordinates\\n    {\\n        public double Latitude1 { get; set; }\\n        public double Longitude1 { get; set; }\\n        public double Latitude2 { get; set; }\\n        public double Longitude2 { get; set; }\\n    }\\n}\",\n  \"name\": \"GeoDistanceCalculator\",\n  \"description\": \"Calculates the distance between two geographical coordinates using the Haversine formula.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":756,"total_tokens":1275,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}