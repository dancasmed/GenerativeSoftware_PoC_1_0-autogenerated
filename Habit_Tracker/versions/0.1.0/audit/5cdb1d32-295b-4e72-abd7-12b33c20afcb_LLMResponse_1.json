{"id":"2d5727bb-8025-48cb-b7bf-9d2e272ab588","object":"chat.completion","created":1743799418,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class HabitTrackerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Habit Tracker\\\";\\n\\n    private string habitsFilePath;\\n    private Dictionary<string, List<DateTime>> habits;\\n\\n    public HabitTrackerModule()\\n    {\\n        habits = new Dictionary<string, List<DateTime>>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        habitsFilePath = Path.Combine(dataFolder, \\\"habits.json\\\");\\n        \\n        try\\n        {\\n            LoadHabits();\\n            Console.WriteLine(\\\"Habit Tracker module started successfully.\\\");\\n            \\n            bool running = true;\\n            while (running)\\n            {\\n                Console.WriteLine(\\\"\\\\nHabit Tracker Menu:\\\");\\n                Console.WriteLine(\\\"1. Add Habit\\\");\\n                Console.WriteLine(\\\"2. Log Habit Completion\\\");\\n                Console.WriteLine(\\\"3. View Progress\\\");\\n                Console.WriteLine(\\\"4. Exit\\\");\\n                Console.Write(\\\"Enter your choice: \\\");\\n                \\n                if (!int.TryParse(Console.ReadLine(), out int choice))\\n                {\\n                    Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n                    continue;\\n                }\\n                \\n                switch (choice)\\n                {\\n                    case 1:\\n                        AddHabit();\\n                        break;\\n                    case 2:\\n                        LogHabitCompletion();\\n                        break;\\n                    case 3:\\n                        ViewProgress();\\n                        break;\\n                    case 4:\\n                        running = false;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            \\n            SaveHabits();\\n            Console.WriteLine(\\\"Habit Tracker module finished.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error in Habit Tracker module: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void LoadHabits()\\n    {\\n        if (File.Exists(habitsFilePath))\\n        {\\n            string json = File.ReadAllText(habitsFilePath);\\n            habits = JsonSerializer.Deserialize<Dictionary<string, List<DateTime>>>(json);\\n        }\\n    }\\n\\n    private void SaveHabits()\\n    {\\n        string json = JsonSerializer.Serialize(habits);\\n        File.WriteAllText(habitsFilePath, json);\\n    }\\n\\n    private void AddHabit()\\n    {\\n        Console.Write(\\\"Enter habit name: \\\");\\n        string habitName = Console.ReadLine();\\n        \\n        if (string.IsNullOrWhiteSpace(habitName))\\n        {\\n            Console.WriteLine(\\\"Habit name cannot be empty.\\\");\\n            return;\\n        }\\n        \\n        if (!habits.ContainsKey(habitName))\\n        {\\n            habits.Add(habitName, new List<DateTime>());\\n            Console.WriteLine(\\\"Habit added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Habit already exists.\\\");\\n        }\\n    }\\n\\n    private void LogHabitCompletion()\\n    {\\n        if (habits.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No habits available. Please add a habit first.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Available habits:\\\");\\n        int index = 1;\\n        foreach (var habit in habits.Keys)\\n        {\\n            Console.WriteLine(index + \\\". \\\" + habit);\\n            index++;\\n        }\\n        \\n        Console.Write(\\\"Select habit to log (number): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int choice) || choice < 1 || choice > habits.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid selection.\\\");\\n            return;\\n        }\\n        \\n        string selectedHabit = new List<string>(habits.Keys)[choice - 1];\\n        habits[selectedHabit].Add(DateTime.Today);\\n        Console.WriteLine(\\\"Habit logged successfully for today.\\\");\\n    }\\n\\n    private void ViewProgress()\\n    {\\n        if (habits.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No habits available. Please add a habit first.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nHabit Progress Charts:\\\");\\n        \\n        foreach (var habit in habits)\\n        {\\n            Console.WriteLine(\\\"\\\\nHabit: \\\" + habit.Key);\\n            \\n            // Calculate streak\\n            int streak = CalculateStreak(habit.Value);\\n            Console.WriteLine(\\\"Current Streak: \\\" + streak + \\\" days\\\");\\n            \\n            // Simple bar chart for last 7 days\\n            Console.WriteLine(\\\"Last 7 Days:\\\");\\n            for (int i = 6; i >= 0; i--)\\n            {\\n                DateTime date = DateTime.Today.AddDays(-i);\\n                bool completed = habit.Value.Contains(date);\\n                \\n                Console.Write(date.ToString(\\\"ddd\\\") + \\\": \\\");\\n                Console.Write(completed ? \\\"[X]\\\" : \\\"[ ]\\\");\\n                Console.WriteLine();\\n            }\\n        }\\n    }\\n\\n    private int CalculateStreak(List<DateTime> dates)\\n    {\\n        if (dates.Count == 0) return 0;\\n        \\n        dates.Sort();\\n        dates.Reverse();\\n        \\n        int streak = 0;\\n        DateTime currentDate = DateTime.Today;\\n        \\n        foreach (var date in dates)\\n        {\\n            if (date.Date == currentDate.Date)\\n            {\\n                streak++;\\n                currentDate = currentDate.AddDays(-1);\\n            }\\n            else if (date.Date < currentDate.Date)\\n            {\\n                break;\\n            }\\n        }\\n        \\n        return streak;\\n    }\\n}\",\n  \"name\": \"Habit Tracker\",\n  \"description\": \"Tracks daily habits and visualizes progress using simple charts and streak counters.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1473,"total_tokens":1994,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}