{"id":"976ba7d7-2625-4a60-942b-82a2fe147df1","object":"chat.completion","created":1744175968,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class HikingLogModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Hiking Log Manager\\\";\\n\\n    private string logFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Hiking Log Manager module is running.\\\");\\n        logFilePath = Path.Combine(dataFolder, \\\"hiking_logs.json\\\");\\n\\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddHikingLog();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewAllLogs();\\n                    break;\\n                case \\\"3\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Exiting Hiking Log Manager.\\\");\\n        return true;\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nHiking Log Manager\\\");\\n        Console.WriteLine(\\\"1. Add a new hiking log\\\");\\n        Console.WriteLine(\\\"2. View all hiking logs\\\");\\n        Console.WriteLine(\\\"3. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddHikingLog()\\n    {\\n        Console.Write(\\\"Enter location: \\\");\\n        string location = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter distance (km): \\\");\\n        if (!double.TryParse(Console.ReadLine(), out double distance))\\n        {\\n            Console.WriteLine(\\\"Invalid distance value.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))\\n        {\\n            Console.WriteLine(\\\"Invalid date format.\\\");\\n            return;\\n        }\\n\\n        var log = new HikingLog\\n        {\\n            Location = location,\\n            Distance = distance,\\n            Date = date\\n        };\\n\\n        List<HikingLog> logs = LoadLogs();\\n        logs.Add(log);\\n        SaveLogs(logs);\\n\\n        Console.WriteLine(\\\"Hiking log added successfully.\\\");\\n    }\\n\\n    private void ViewAllLogs()\\n    {\\n        List<HikingLog> logs = LoadLogs();\\n\\n        if (logs.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No hiking logs found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAll Hiking Logs:\\\");\\n        foreach (var log in logs)\\n        {\\n            Console.WriteLine($\\\"{log.Date:yyyy-MM-dd} - {log.Location}: {log.Distance} km\\\");\\n        }\\n    }\\n\\n    private List<HikingLog> LoadLogs()\\n    {\\n        if (!File.Exists(logFilePath))\\n        {\\n            return new List<HikingLog>();\\n        }\\n\\n        string json = File.ReadAllText(logFilePath);\\n        return JsonSerializer.Deserialize<List<HikingLog>>(json) ?? new List<HikingLog>();\\n    }\\n\\n    private void SaveLogs(List<HikingLog> logs)\\n    {\\n        string json = JsonSerializer.Serialize(logs);\\n        File.WriteAllText(logFilePath, json);\\n    }\\n}\\n\\npublic class HikingLog\\n{\\n    public string Location { get; set; }\\n    public double Distance { get; set; }\\n    public DateTime Date { get; set; }\\n}\",\n  \"name\": \"Hiking Log Manager\",\n  \"description\": \"A module for managing hiking logs with distance, location, and date information.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":942,"total_tokens":1465,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}