
{"id":"6cbe0ffa-524b-4cf4-8b47-8c885c80e0a7","object":"chat.completion","created":1744174293,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class HomeApplianceMaintenanceTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Home Appliance Maintenance Tracker\\\";\\n\\n    private string _appliancesFilePath;\\n    private List<Appliance> _appliances;\\n\\n    public HomeApplianceMaintenanceTracker()\\n    {\\n        _appliances = new List<Appliance>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Home Appliance Maintenance Tracker module is running.\\\");\\n        _appliancesFilePath = Path.Combine(dataFolder, \\\"appliances.json\\\");\\n\\n        LoadAppliances();\\n        CheckMaintenanceReminders();\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add new appliance\\\");\\n            Console.WriteLine(\\\"2. View all appliances\\\");\\n            Console.WriteLine(\\\"3. Update maintenance date\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddAppliance();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewAppliances();\\n                    break;\\n                case \\\"3\\\":\\n                    UpdateMaintenanceDate();\\n                    break;\\n                case \\\"4\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveAppliances();\\n        return true;\\n    }\\n\\n    private void LoadAppliances()\\n    {\\n        if (File.Exists(_appliancesFilePath))\\n        {\\n            string json = File.ReadAllText(_appliancesFilePath);\\n            _appliances = JsonSerializer.Deserialize<List<Appliance>>(json) ?? new List<Appliance>();\\n        }\\n    }\\n\\n    private void SaveAppliances()\\n    {\\n        string json = JsonSerializer.Serialize(_appliances);\\n        File.WriteAllText(_appliancesFilePath, json);\\n    }\\n\\n    private void CheckMaintenanceReminders()\\n    {\\n        DateTime today = DateTime.Today;\\n        bool hasReminders = false;\\n\\n        foreach (var appliance in _appliances)\\n        {\\n            if (appliance.NextMaintenanceDate <= today)\\n            {\\n                Console.WriteLine($\\\"Reminder: {appliance.Name} needs maintenance! Last maintained on: {appliance.LastMaintenanceDate.ToShortDateString()}\\\");\\n                hasReminders = true;\\n            }\\n        }\\n\\n        if (!hasReminders)\\n        {\\n            Console.WriteLine(\\\"No maintenance reminders at this time.\\\");\\n        }\\n    }\\n\\n    private void AddAppliance()\\n    {\\n        Console.Write(\\\"Enter appliance name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter maintenance interval in months: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int interval) || interval <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid interval. Please enter a positive number.\\\");\\n            return;\\n        }\\n\\n        var appliance = new Appliance\\n        {\\n            Name = name,\\n            MaintenanceIntervalMonths = interval,\\n            LastMaintenanceDate = DateTime.Today,\\n            NextMaintenanceDate = DateTime.Today.AddMonths(interval)\\n        };\\n\\n        _appliances.Add(appliance);\\n        Console.WriteLine(\\\"Appliance added successfully.\\\");\\n    }\\n\\n    private void ViewAppliances()\\n    {\\n        if (_appliances.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No appliances registered.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nRegistered Appliances:\\\");\\n        foreach (var appliance in _appliances)\\n        {\\n            Console.WriteLine($\\\"Name: {appliance.Name}\\\");\\n            Console.WriteLine($\\\"Last Maintenance: {appliance.LastMaintenanceDate.ToShortDateString()}\\\");\\n            Console.WriteLine($\\\"Next Maintenance: {appliance.NextMaintenanceDate.ToShortDateString()}\\\");\\n            Console.WriteLine($\\\"Maintenance Interval: {appliance.MaintenanceIntervalMonths} months\\\");\\n            Console.WriteLine();\\n        }\\n    }\\n\\n    private void UpdateMaintenanceDate()\\n    {\\n        if (_appliances.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No appliances registered.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"Select an appliance to update:\\\");\\n        for (int i = 0; i < _appliances.Count; i++)\\n        {\\n            Console.WriteLine($\\\"{i + 1}. {_appliances[i].Name}\\\");\\n        }\\n\\n        if (!int.TryParse(Console.ReadLine(), out int selection) || selection < 1 || selection > _appliances.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid selection.\\\");\\n            return;\\n        }\\n\\n        var appliance = _appliances[selection - 1];\\n        appliance.LastMaintenanceDate = DateTime.Today;\\n        appliance.NextMaintenanceDate = DateTime.Today.AddMonths(appliance.MaintenanceIntervalMonths);\\n\\n        Console.WriteLine($\\\"Maintenance date updated for {appliance.Name}. Next maintenance due on {appliance.NextMaintenanceDate.ToShortDateString()}.\\\");\\n    }\\n\\n    private class Appliance\\n    {\\n        public string Name { get; set; }\\n        public int MaintenanceIntervalMonths { get; set; }\\n        public DateTime LastMaintenanceDate { get; set; }\\n        public DateTime NextMaintenanceDate { get; set; }\\n    }\\n}\",\n  \"name\": \"Home Appliance Maintenance Tracker\",\n  \"description\": \"Tracks home appliance maintenance schedules and provides reminders when maintenance is due.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":518,"completion_tokens":1432,"total_tokens":1950,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":70},"system_fingerprint":"fp_3d5141a69a_prod0225"}