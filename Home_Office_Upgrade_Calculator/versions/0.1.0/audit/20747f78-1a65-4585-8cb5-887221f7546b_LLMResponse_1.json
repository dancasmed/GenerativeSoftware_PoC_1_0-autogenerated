
{"id":"7a9d838d-88b4-42a5-b40d-61157f07c790","object":"chat.completion","created":1744186243,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class HomeOfficeUpgradeCalculator : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Home Office Upgrade Calculator\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Home Office Upgrade Calculator...\\\");\\n        \\n        try\\n        {\\n            string configPath = Path.Combine(dataFolder, \\\"home_office_config.json\\\");\\n            string resultPath = Path.Combine(dataFolder, \\\"home_office_result.json\\\");\\n            \\n            if (!File.Exists(configPath))\\n            {\\n                CreateDefaultConfig(configPath);\\n                Console.WriteLine(\\\"Default configuration file created. Please edit it and run again.\\\");\\n                return false;\\n            }\\n            \\n            var config = LoadConfig(configPath);\\n            var result = CalculateCosts(config);\\n            \\n            SaveResult(resultPath, result);\\n            \\n            Console.WriteLine(\\\"Calculation completed successfully!\\\");\\n            Console.WriteLine(\\\"Total Cost: \\\" + result.TotalCost.ToString(\\\"C\\\"));\\n            Console.WriteLine(\\\"Results saved to: \\\" + resultPath);\\n            \\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private void CreateDefaultConfig(string path)\\n    {\\n        var defaultConfig = new HomeOfficeConfig\\n        {\\n            TechnologyItems = new List<TechnologyItem>\\n            {\\n                new TechnologyItem { Name = \\\"Laptop\\\", Price = 999.99m, Quantity = 1 },\\n                new TechnologyItem { Name = \\\"Monitor\\\", Price = 249.99m, Quantity = 2 },\\n                new TechnologyItem { Name = \\\"Keyboard\\\", Price = 79.99m, Quantity = 1 },\\n                new TechnologyItem { Name = \\\"Mouse\\\", Price = 49.99m, Quantity = 1 },\\n                new TechnologyItem { Name = \\\"Docking Station\\\", Price = 199.99m, Quantity = 1 }\\n            },\\n            FurnitureItems = new List<FurnitureItem>\\n            {\\n                new FurnitureItem { Name = \\\"Desk\\\", Price = 399.99m, Quantity = 1 },\\n                new FurnitureItem { Name = \\\"Chair\\\", Price = 299.99m, Quantity = 1 },\\n                new FurnitureItem { Name = \\\"Shelving Unit\\\", Price = 149.99m, Quantity = 1 }\\n            },\\n            TaxRate = 0.08m,\\n            ShippingCost = 49.99m\\n        };\\n        \\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        string json = JsonSerializer.Serialize(defaultConfig, options);\\n        File.WriteAllText(path, json);\\n    }\\n    \\n    private HomeOfficeConfig LoadConfig(string path)\\n    {\\n        string json = File.ReadAllText(path);\\n        return JsonSerializer.Deserialize<HomeOfficeConfig>(json);\\n    }\\n    \\n    private CalculationResult CalculateCosts(HomeOfficeConfig config)\\n    {\\n        decimal techSubtotal = 0m;\\n        decimal furnitureSubtotal = 0m;\\n        \\n        foreach (var item in config.TechnologyItems)\\n        {\\n            techSubtotal += item.Price * item.Quantity;\\n        }\\n        \\n        foreach (var item in config.FurnitureItems)\\n        {\\n            furnitureSubtotal += item.Price * item.Quantity;\\n        }\\n        \\n        decimal subtotal = techSubtotal + furnitureSubtotal;\\n        decimal tax = subtotal * config.TaxRate;\\n        decimal total = subtotal + tax + config.ShippingCost;\\n        \\n        return new CalculationResult\\n        {\\n            TechnologySubtotal = techSubtotal,\\n            FurnitureSubtotal = furnitureSubtotal,\\n            Subtotal = subtotal,\\n            Tax = tax,\\n            ShippingCost = config.ShippingCost,\\n            TotalCost = total,\\n            CalculatedAt = DateTime.Now\\n        };\\n    }\\n    \\n    private void SaveResult(string path, CalculationResult result)\\n    {\\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        string json = JsonSerializer.Serialize(result, options);\\n        File.WriteAllText(path, json);\\n    }\\n}\\n\\npublic class HomeOfficeConfig\\n{\\n    public List<TechnologyItem> TechnologyItems { get; set; }\\n    public List<FurnitureItem> FurnitureItems { get; set; }\\n    public decimal TaxRate { get; set; }\\n    public decimal ShippingCost { get; set; }\\n}\\n\\npublic class TechnologyItem\\n{\\n    public string Name { get; set; }\\n    public decimal Price { get; set; }\\n    public int Quantity { get; set; }\\n}\\n\\npublic class FurnitureItem\\n{\\n    public string Name { get; set; }\\n    public decimal Price { get; set; }\\n    public int Quantity { get; set; }\\n}\\n\\npublic class CalculationResult\\n{\\n    public decimal TechnologySubtotal { get; set; }\\n    public decimal FurnitureSubtotal { get; set; }\\n    public decimal Subtotal { get; set; }\\n    public decimal Tax { get; set; }\\n    public decimal ShippingCost { get; set; }\\n    public decimal TotalCost { get; set; }\\n    public DateTime CalculatedAt { get; set; }\\n}\",\n  \"name\": \"Home Office Upgrade Calculator\",\n  \"description\": \"Calculates the total cost of a home office upgrade including technology and furniture items with tax and shipping.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":529,"completion_tokens":1336,"total_tokens":1865,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":17},"system_fingerprint":"fp_3d5141a69a_prod0225"}