
{"id":"fa9ee61e-a6f7-4986-a0cf-b36696ec45be","object":"chat.completion","created":1744179005,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class HotelBookingManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Hotel Booking Manager\\\";\\n\\n    private string _dataFolder;\\n    private List<Room> _rooms;\\n    private List<Booking> _bookings;\\n    private const string RoomsFileName = \\\"rooms.json\\\";\\n    private const string BookingsFileName = \\\"bookings.json\\\";\\n\\n    public HotelBookingManager()\\n    {\\n        _rooms = new List<Room>();\\n        _bookings = new List<Booking>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        _dataFolder = dataFolder;\\n        Console.WriteLine(\\\"Initializing Hotel Booking Manager...\\\");\\n        \\n        LoadData();\\n        \\n        if (_rooms.Count == 0)\\n        {\\n            InitializeSampleRooms();\\n            SaveRooms();\\n        }\\n        \\n        Console.WriteLine(\\\"Hotel Booking Manager is ready.\\\");\\n        Console.WriteLine(\\\"Sample rooms have been initialized if no existing data was found.\\\");\\n        \\n        return true;\\n    }\\n\\n    private void LoadData()\\n    {\\n        try\\n        {\\n            string roomsPath = Path.Combine(_dataFolder, RoomsFileName);\\n            if (File.Exists(roomsPath))\\n            {\\n                string roomsJson = File.ReadAllText(roomsPath);\\n                _rooms = JsonSerializer.Deserialize<List<Room>>(roomsJson);\\n            }\\n\\n            string bookingsPath = Path.Combine(_dataFolder, BookingsFileName);\\n            if (File.Exists(bookingsPath))\\n            {\\n                string bookingsJson = File.ReadAllText(bookingsPath);\\n                _bookings = JsonSerializer.Deserialize<List<Booking>>(bookingsJson);\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void SaveRooms()\\n    {\\n        try\\n        {\\n            string roomsPath = Path.Combine(_dataFolder, RoomsFileName);\\n            string roomsJson = JsonSerializer.Serialize(_rooms);\\n            File.WriteAllText(roomsPath, roomsJson);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving rooms: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void SaveBookings()\\n    {\\n        try\\n        {\\n            string bookingsPath = Path.Combine(_dataFolder, BookingsFileName);\\n            string bookingsJson = JsonSerializer.Serialize(_bookings);\\n            File.WriteAllText(bookingsPath, bookingsJson);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving bookings: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void InitializeSampleRooms()\\n    {\\n        _rooms.Add(new Room { Id = 1, Type = \\\"Single\\\", PricePerNight = 100, IsAvailable = true });\\n        _rooms.Add(new Room { Id = 2, Type = \\\"Double\\\", PricePerNight = 150, IsAvailable = true });\\n        _rooms.Add(new Room { Id = 3, Type = \\\"Suite\\\", PricePerNight = 250, IsAvailable = true });\\n    }\\n\\n    public bool BookRoom(int roomId, string guestName, DateTime checkInDate, DateTime checkOutDate)\\n    {\\n        var room = _rooms.Find(r => r.Id == roomId);\\n        if (room == null || !room.IsAvailable)\\n        {\\n            Console.WriteLine(\\\"Room not available or does not exist.\\\");\\n            return false;\\n        }\\n\\n        var booking = new Booking\\n        {\\n            Id = _bookings.Count + 1,\\n            RoomId = roomId,\\n            GuestName = guestName,\\n            CheckInDate = checkInDate,\\n            CheckOutDate = checkOutDate,\\n            TotalPrice = room.PricePerNight * (checkOutDate - checkInDate).Days\\n        };\\n\\n        _bookings.Add(booking);\\n        room.IsAvailable = false;\\n        \\n        SaveRooms();\\n        SaveBookings();\\n        \\n        Console.WriteLine(\\\"Booking successful!\\\");\\n        return true;\\n    }\\n\\n    public List<Room> GetAvailableRooms()\\n    {\\n        return _rooms.FindAll(r => r.IsAvailable);\\n    }\\n\\n    public List<Booking> GetAllBookings()\\n    {\\n        return _bookings;\\n    }\\n}\\n\\npublic class Room\\n{\\n    public int Id { get; set; }\\n    public string Type { get; set; }\\n    public decimal PricePerNight { get; set; }\\n    public bool IsAvailable { get; set; }\\n}\\n\\npublic class Booking\\n{\\n    public int Id { get; set; }\\n    public int RoomId { get; set; }\\n    public string GuestName { get; set; }\\n    public DateTime CheckInDate { get; set; }\\n    public DateTime CheckOutDate { get; set; }\\n    public decimal TotalPrice { get; set; }\\n}\",\n  \"name\": \"Hotel Booking Manager\",\n  \"description\": \"A module to manage hotel bookings with room availability and pricing functionality.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"7.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":1300,"total_tokens":1824,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":12},"system_fingerprint":"fp_3d5141a69a_prod0225"}