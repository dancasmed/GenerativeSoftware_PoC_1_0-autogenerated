{"id":"1ef7ab99-75d8-4c81-8c84-6c339cb152c0","object":"chat.completion","created":1743799573,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class HouseCleaningModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"House Cleaning Schedule Manager\\\";\\n    \\n    private string scheduleFilePath;\\n    \\n    public HouseCleaningModule()\\n    {\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        scheduleFilePath = Path.Combine(dataFolder, \\\"cleaning_schedule.json\\\");\\n        \\n        Console.WriteLine(\\\"House Cleaning Schedule Manager is running\\\");\\n        Console.WriteLine(\\\"Loading cleaning schedule...\\\");\\n        \\n        var schedule = LoadSchedule();\\n        \\n        bool continueRunning = true;\\n        while (continueRunning)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. View cleaning schedule\\\");\\n            Console.WriteLine(\\\"2. Add cleaning task\\\");\\n            Console.WriteLine(\\\"3. Mark task as completed\\\");\\n            Console.WriteLine(\\\"4. Remove task\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    ViewSchedule(schedule);\\n                    break;\\n                case \\\"2\\\":\\n                    schedule = AddTask(schedule);\\n                    break;\\n                case \\\"3\\\":\\n                    schedule = MarkTaskCompleted(schedule);\\n                    break;\\n                case \\\"4\\\":\\n                    schedule = RemoveTask(schedule);\\n                    break;\\n                case \\\"5\\\":\\n                    continueRunning = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveSchedule(schedule);\\n        Console.WriteLine(\\\"Cleaning schedule saved. Exiting...\\\");\\n        \\n        return true;\\n    }\\n    \\n    private List<CleaningTask> LoadSchedule()\\n    {\\n        try\\n        {\\n            if (File.Exists(scheduleFilePath))\\n            {\\n                var json = File.ReadAllText(scheduleFilePath);\\n                return JsonSerializer.Deserialize<List<CleaningTask>>(json);\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading schedule: \\\" + ex.Message);\\n        }\\n        \\n        return new List<CleaningTask>();\\n    }\\n    \\n    private void SaveSchedule(List<CleaningTask> schedule)\\n    {\\n        try\\n        {\\n            var options = new JsonSerializerOptions { WriteIndented = true };\\n            var json = JsonSerializer.Serialize(schedule, options);\\n            File.WriteAllText(scheduleFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving schedule: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void ViewSchedule(List<CleaningTask> schedule)\\n    {\\n        if (schedule.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No cleaning tasks scheduled.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nCleaning Schedule:\\\");\\n        for (int i = 0; i < schedule.Count; i++)\\n        {\\n            var task = schedule[i];\\n            Console.WriteLine($\\\"{i + 1}. {task.TaskName} - {task.Frequency} ({(task.IsCompleted ? \\\"Completed\\\" : \\\"Pending\\\")})\\\");\\n        }\\n    }\\n    \\n    private List<CleaningTask> AddTask(List<CleaningTask> schedule)\\n    {\\n        Console.Write(\\\"Enter task name: \\\");\\n        var taskName = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter frequency (e.g., Daily, Weekly, Monthly): \\\");\\n        var frequency = Console.ReadLine();\\n        \\n        schedule.Add(new CleaningTask\\n        {\\n            TaskName = taskName,\\n            Frequency = frequency,\\n            IsCompleted = false\\n        });\\n        \\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n        return schedule;\\n    }\\n    \\n    private List<CleaningTask> MarkTaskCompleted(List<CleaningTask> schedule)\\n    {\\n        ViewSchedule(schedule);\\n        \\n        if (schedule.Count == 0) return schedule;\\n        \\n        Console.Write(\\\"Enter task number to mark as completed: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int taskNumber) && taskNumber > 0 && taskNumber <= schedule.Count)\\n        {\\n            schedule[taskNumber - 1].IsCompleted = true;\\n            Console.WriteLine(\\\"Task marked as completed.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid task number.\\\");\\n        }\\n        \\n        return schedule;\\n    }\\n    \\n    private List<CleaningTask> RemoveTask(List<CleaningTask> schedule)\\n    {\\n        ViewSchedule(schedule);\\n        \\n        if (schedule.Count == 0) return schedule;\\n        \\n        Console.Write(\\\"Enter task number to remove: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int taskNumber) && taskNumber > 0 && taskNumber <= schedule.Count)\\n        {\\n            schedule.RemoveAt(taskNumber - 1);\\n            Console.WriteLine(\\\"Task removed successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid task number.\\\");\\n        }\\n        \\n        return schedule;\\n    }\\n}\\n\\npublic class CleaningTask\\n{\\n    public string TaskName { get; set; }\\n    public string Frequency { get; set; }\\n    public bool IsCompleted { get; set; }\\n}\",\n  \"name\": \"House Cleaning Schedule Manager\",\n  \"description\": \"A module to manage and track house cleaning tasks with scheduling capabilities\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1412,"total_tokens":1931,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}