
{"id":"d13331f1-5f8b-467e-acbf-17e27d031f34","object":"chat.completion","created":1744185648,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class JobPortalModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Job Portal Simulator\\\";\\n\\n    private string resumesFilePath;\\n    private string applicationsFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Job Portal Module is running...\\\");\\n\\n        resumesFilePath = Path.Combine(dataFolder, \\\"resumes.json\\\");\\n        applicationsFilePath = Path.Combine(dataFolder, \\\"applications.json\\\");\\n\\n        InitializeFiles();\\n\\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            var choice = Console.ReadLine();\\n\\n            switch (choice)\\n            {\\n                case \\\"1\\\":\\n                    AddResume();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewResumes();\\n                    break;\\n                case \\\"3\\\":\\n                    ApplyForJob();\\n                    break;\\n                case \\\"4\\\":\\n                    ViewApplications();\\n                    break;\\n                case \\\"5\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Job Portal Module finished.\\\");\\n        return true;\\n    }\\n\\n    private void InitializeFiles()\\n    {\\n        if (!File.Exists(resumesFilePath))\\n        {\\n            File.WriteAllText(resumesFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(applicationsFilePath))\\n        {\\n            File.WriteAllText(applicationsFilePath, \\\"[]\\\");\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nJob Portal Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Resume\\\");\\n        Console.WriteLine(\\\"2. View Resumes\\\");\\n        Console.WriteLine(\\\"3. Apply for Job\\\");\\n        Console.WriteLine(\\\"4. View Applications\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Enter your choice: \\\");\\n    }\\n\\n    private void AddResume()\\n    {\\n        Console.Write(\\\"Enter your name: \\\");\\n        var name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter your skills (comma separated): \\\");\\n        var skills = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter your experience (years): \\\");\\n        var experienceInput = Console.ReadLine();\\n        if (!int.TryParse(experienceInput, out int experience))\\n        {\\n            Console.WriteLine(\\\"Invalid experience value. Resume not added.\\\");\\n            return;\\n        }\\n\\n        var resumes = LoadResumes();\\n        resumes.Add(new Resume\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Name = name,\\n            Skills = skills.Split(','),\\n            Experience = experience\\n        });\\n\\n        SaveResumes(resumes);\\n        Console.WriteLine(\\\"Resume added successfully.\\\");\\n    }\\n\\n    private void ViewResumes()\\n    {\\n        var resumes = LoadResumes();\\n\\n        if (resumes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No resumes found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Resumes:\\\");\\n        foreach (var resume in resumes)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + resume.Id);\\n            Console.WriteLine(\\\"Name: \\\" + resume.Name);\\n            Console.WriteLine(\\\"Skills: \\\" + string.Join(\\\", \\\", resume.Skills));\\n            Console.WriteLine(\\\"Experience: \\\" + resume.Experience + \\\" years\\\");\\n            Console.WriteLine(\\\"--------------------\\\");\\n        }\\n    }\\n\\n    private void ApplyForJob()\\n    {\\n        var resumes = LoadResumes();\\n        if (resumes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No resumes available to apply with.\\\");\\n            return;\\n        }\\n\\n        ViewResumes();\\n        Console.Write(\\\"Enter resume ID to apply with: \\\");\\n        var resumeId = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter job title: \\\");\\n        var jobTitle = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter company name: \\\");\\n        var companyName = Console.ReadLine();\\n\\n        var applications = LoadApplications();\\n        applications.Add(new JobApplication\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            ResumeId = resumeId,\\n            JobTitle = jobTitle,\\n            CompanyName = companyName,\\n            ApplicationDate = DateTime.Now\\n        });\\n\\n        SaveApplications(applications);\\n        Console.WriteLine(\\\"Application submitted successfully.\\\");\\n    }\\n\\n    private void ViewApplications()\\n    {\\n        var applications = LoadApplications();\\n        var resumes = LoadResumes();\\n\\n        if (applications.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No applications found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nJob Applications:\\\");\\n        foreach (var app in applications)\\n        {\\n            var resume = resumes.Find(r => r.Id == app.ResumeId);\\n            Console.WriteLine(\\\"Application ID: \\\" + app.Id);\\n            Console.WriteLine(\\\"Job Title: \\\" + app.JobTitle);\\n            Console.WriteLine(\\\"Company: \\\" + app.CompanyName);\\n            Console.WriteLine(\\\"Applicant: \\\" + (resume?.Name ?? \\\"Unknown\\\"));\\n            Console.WriteLine(\\\"Date: \\\" + app.ApplicationDate.ToString(\\\"yyyy-MM-dd\\\"));\\n            Console.WriteLine(\\\"--------------------\\\");\\n        }\\n    }\\n\\n    private List<Resume> LoadResumes()\\n    {\\n        var json = File.ReadAllText(resumesFilePath);\\n        return JsonSerializer.Deserialize<List<Resume>>(json) ?? new List<Resume>();\\n    }\\n\\n    private void SaveResumes(List<Resume> resumes)\\n    {\\n        var json = JsonSerializer.Serialize(resumes);\\n        File.WriteAllText(resumesFilePath, json);\\n    }\\n\\n    private List<JobApplication> LoadApplications()\\n    {\\n        var json = File.ReadAllText(applicationsFilePath);\\n        return JsonSerializer.Deserialize<List<JobApplication>>(json) ?? new List<JobApplication>();\\n    }\\n\\n    private void SaveApplications(List<JobApplication> applications)\\n    {\\n        var json = JsonSerializer.Serialize(applications);\\n        File.WriteAllText(applicationsFilePath, json);\\n    }\\n}\\n\\npublic class Resume\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string[] Skills { get; set; }\\n    public int Experience { get; set; }\\n}\\n\\npublic class JobApplication\\n{\\n    public string Id { get; set; }\\n    public string ResumeId { get; set; }\\n    public string JobTitle { get; set; }\\n    public string CompanyName { get; set; }\\n    public DateTime ApplicationDate { get; set; }\\n}\",\n  \"name\": \"Job Portal Simulator\",\n  \"description\": \"A module that simulates a basic online job portal with functionality to manage resumes and job applications.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":1745,"total_tokens":2271,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":14},"system_fingerprint":"fp_3d5141a69a_prod0225"}