

{"id":"3a7a05df-39a0-40f3-9c6a-081c145f9d55","object":"chat.completion","created":1744182917,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class LibraryLendingModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Library Digital Lending Manager\\\";\\n    \\n    private string _booksFilePath;\\n    private string _usersFilePath;\\n    private string _loansFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Library Digital Lending Manager...\\\");\\n        \\n        // Initialize file paths\\n        _booksFilePath = Path.Combine(dataFolder, \\\"books.json\\\");\\n        _usersFilePath = Path.Combine(dataFolder, \\\"users.json\\\");\\n        _loansFilePath = Path.Combine(dataFolder, \\\"loans.json\\\");\\n        \\n        // Ensure data directory exists\\n        Directory.CreateDirectory(dataFolder);\\n        \\n        // Initialize files if they don't exist\\n        InitializeFile(_booksFilePath, new List<Book>());\\n        InitializeFile(_usersFilePath, new List<User>());\\n        InitializeFile(_loansFilePath, new List<Loan>());\\n        \\n        // Main menu loop\\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nLibrary Digital Lending Manager\\\");\\n            Console.WriteLine(\\\"1. Manage Books\\\");\\n            Console.WriteLine(\\\"2. Manage Users\\\");\\n            Console.WriteLine(\\\"3. Manage Loans\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    ManageBooks();\\n                    break;\\n                case \\\"2\\\":\\n                    ManageUsers();\\n                    break;\\n                case \\\"3\\\":\\n                    ManageLoans();\\n                    break;\\n                case \\\"4\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        Console.WriteLine(\\\"Library Digital Lending Manager is shutting down...\\\");\\n        return true;\\n    }\\n    \\n    private void InitializeFile<T>(string filePath, T defaultValue)\\n    {\\n        if (!File.Exists(filePath))\\n        {\\n            string json = JsonSerializer.Serialize(defaultValue);\\n            File.WriteAllText(filePath, json);\\n        }\\n    }\\n    \\n    private void ManageBooks()\\n    {\\n        bool back = false;\\n        while (!back)\\n        {\\n            Console.WriteLine(\\\"\\\\nBook Management\\\");\\n            Console.WriteLine(\\\"1. List All Books\\\");\\n            Console.WriteLine(\\\"2. Add New Book\\\");\\n            Console.WriteLine(\\\"3. Remove Book\\\");\\n            Console.WriteLine(\\\"4. Back\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    ListBooks();\\n                    break;\\n                case \\\"2\\\":\\n                    AddBook();\\n                    break;\\n                case \\\"3\\\":\\n                    RemoveBook();\\n                    break;\\n                case \\\"4\\\":\\n                    back = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private void ListBooks()\\n    {\\n        var books = JsonSerializer.Deserialize<List<Book>>(File.ReadAllText(_booksFilePath));\\n        Console.WriteLine(\\\"\\\\nList of Books:\\\");\\n        foreach (var book in books)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + book.Id + \\\", Title: \\\" + book.Title + \\\", Author: \\\" + book.Author + \\\", Available: \\\" + (book.IsAvailable ? \\\"Yes\\\" : \\\"No\\\"));\\n        }\\n    }\\n    \\n    private void AddBook()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n        Console.Write(\\\"Enter book author: \\\");\\n        string author = Console.ReadLine();\\n        \\n        var books = JsonSerializer.Deserialize<List<Book>>(File.ReadAllText(_booksFilePath));\\n        books.Add(new Book\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Title = title,\\n            Author = author,\\n            IsAvailable = true\\n        });\\n        \\n        File.WriteAllText(_booksFilePath, JsonSerializer.Serialize(books));\\n        Console.WriteLine(\\\"Book added successfully.\\\");\\n    }\\n    \\n    private void RemoveBook()\\n    {\\n        Console.Write(\\\"Enter book ID to remove: \\\");\\n        string id = Console.ReadLine();\\n        \\n        var books = JsonSerializer.Deserialize<List<Book>>(File.ReadAllText(_booksFilePath));\\n        var book = books.Find(b => b.Id == id);\\n        \\n        if (book != null)\\n        {\\n            books.Remove(book);\\n            File.WriteAllText(_booksFilePath, JsonSerializer.Serialize(books));\\n            Console.WriteLine(\\\"Book removed successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Book not found.\\\");\\n        }\\n    }\\n    \\n    private void ManageUsers()\\n    {\\n        bool back = false;\\n        while (!back)\\n        {\\n            Console.WriteLine(\\\"\\\\nUser Management\\\");\\n            Console.WriteLine(\\\"1. List All Users\\\");\\n            Console.WriteLine(\\\"2. Add New User\\\");\\n            Console.WriteLine(\\\"3. Remove User\\\");\\n            Console.WriteLine(\\\"4. Back\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    ListUsers();\\n                    break;\\n                case \\\"2\\\":\\n                    AddUser();\\n                    break;\\n                case \\\"3\\\":\\n                    RemoveUser();\\n                    break;\\n                case \\\"4\\\":\\n                    back = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private void ListUsers()\\n    {\\n        var users = JsonSerializer.Deserialize<List<User>>(File.ReadAllText(_usersFilePath));\\n        Console.WriteLine(\\\"\\\\nList of Users:\\\");\\n        foreach (var user in users)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + user.Id + \\\", Name: \\\" + user.Name + \\\", Email: \\\" + user.Email);\\n        }\\n    }\\n    \\n    private void AddUser()\\n    {\\n        Console.Write(\\\"Enter user name: \\\");\\n        string name = Console.ReadLine();\\n        Console.Write(\\\"Enter user email: \\\");\\n        string email = Console.ReadLine();\\n        \\n        var users = JsonSerializer.Deserialize<List<User>>(File.ReadAllText(_usersFilePath));\\n        users.Add(new User\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Name = name,\\n            Email = email\\n        });\\n        \\n        File.WriteAllText(_usersFilePath, JsonSerializer.Serialize(users));\\n        Console.WriteLine(\\\"User added successfully.\\\");\\n    }\\n    \\n    private void RemoveUser()\\n    {\\n        Console.Write(\\\"Enter user ID to remove: \\\");\\n        string id = Console.ReadLine();\\n        \\n        var users = JsonSerializer.Deserialize<List<User>>(File.ReadAllText(_usersFilePath));\\n        var user = users.Find(u => u.Id == id);\\n        \\n        if (user != null)\\n        {\\n            users.Remove(user);\\n            File.WriteAllText(_usersFilePath, JsonSerializer.Serialize(users));\\n            Console.WriteLine(\\\"User removed successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"User not found.\\\");\\n        }\\n    }\\n    \\n    private void ManageLoans()\\n    {\\n        bool back = false;\\n        while (!back)\\n        {\\n            Console.WriteLine(\\\"\\\\nLoan Management\\\");\\n            Console.WriteLine(\\\"1. List All Loans\\\");\\n            Console.WriteLine(\\\"2. Create New Loan\\\");\\n            Console.WriteLine(\\\"3. Return Book\\\");\\n            Console.WriteLine(\\\"4. Back\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    ListLoans();\\n                    break;\\n                case \\\"2\\\":\\n                    CreateLoan();\\n                    break;\\n                case \\\"3\\\":\\n                    ReturnBook();\\n                    break;\\n                case \\\"4\\\":\\n                    back = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private void ListLoans()\\n    {\\n        var loans = JsonSerializer.Deserialize<List<Loan>>(File.ReadAllText(_loansFilePath));\\n        var books = JsonSerializer.Deserialize<List<Book>>(File.ReadAllText(_booksFilePath));\\n        var users = JsonSerializer.Deserialize<List<User>>(File.ReadAllText(_usersFilePath));\\n        \\n        Console.WriteLine(\\\"\\\\nList of Active Loans:\\\");\\n        foreach (var loan in loans)\\n        {\\n            if (!loan.IsReturned)\\n            {\\n                var book = books.Find(b => b.Id == loan.BookId);\\n                var user = users.Find(u => u.Id == loan.UserId);\\n                \\n                Console.WriteLine(\\\"Loan ID: \\\" + loan.Id + \\\", Book: \\\" + book.Title + \\\", User: \\\" + user.Name + \\\", Due Date: \\\" + loan.DueDate.ToString(\\\"yyyy-MM-dd\\\"));\\n            }\\n        }\\n    }\\n    \\n    private void CreateLoan()\\n    {\\n        Console.Write(\\\"Enter user ID: \\\");\\n        string userId = Console.ReadLine();\\n        Console.Write(\\\"Enter book ID: \\\");\\n        string bookId = Console.ReadLine();\\n        \\n        var users = JsonSerializer.Deserialize<List<User>>(File.ReadAllText(_usersFilePath));\\n        var books = JsonSerializer.Deserialize<List<Book>>(File.ReadAllText(_booksFilePath));\\n        \\n        var user = users.Find(u => u.Id == userId);\\n        var book = books.Find(b => b.Id == bookId);\\n        \\n        if (user == null)\\n        {\\n            Console.WriteLine(\\\"User not found.\\\");\\n            return;\\n        }\\n        \\n        if (book == null)\\n        {\\n            Console.WriteLine(\\\"Book not found.\\\");\\n            return;\\n        }\\n        \\n        if (!book.IsAvailable)\\n        {\\n            Console.WriteLine(\\\"Book is not available for loan.\\\");\\n            return;\\n        }\\n        \\n        // Update book availability\\n        book.IsAvailable = false;\\n        File.WriteAllText(_booksFilePath, JsonSerializer.Serialize(books));\\n        \\n        // Create loan\\n        var loans = JsonSerializer.Deserialize<List<Loan>>(File.ReadAllText(_loansFilePath));\\n        loans.Add(new Loan\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            BookId = bookId,\\n            UserId = userId,\\n            LoanDate = DateTime.Now,\\n            DueDate = DateTime.Now.AddDays(14),\\n            IsReturned = false\\n        });\\n        \\n        File.WriteAllText(_loansFilePath, JsonSerializer.Serialize(loans));\\n        Console.WriteLine(\\\"Loan created successfully. Due date: \\\" + DateTime.Now.AddDays(14).ToString(\\\"yyyy-MM-dd\\\"));\\n    }\\n    \\n    private void ReturnBook()\\n    {\\n        Console.Write(\\\"Enter loan ID: \\\");\\n        string loanId = Console.ReadLine();\\n        \\n        var loans = JsonSerializer.Deserialize<List<Loan>>(File.ReadAllText(_loansFilePath));\\n        var loan = loans.Find(l => l.Id == loanId);\\n        \\n        if (loan == null || loan.IsReturned)\\n        {\\n            Console.WriteLine(\\\"Loan not found or already returned.\\\");\\n            return;\\n        }\\n        \\n        // Update loan status\\n        loan.IsReturned = true;\\n        loan.ReturnDate = DateTime.Now;\\n        \\n        // Update book availability\\n        var books = JsonSerializer.Deserialize<List<Book>>(File.ReadAllText(_booksFilePath));\\n        var book = books.Find(b => b.Id == loan.BookId);\\n        book.IsAvailable = true;\\n        \\n        File.WriteAllText(_loansFilePath, JsonSerializer.Serialize(loans));\\n        File.WriteAllText(_booksFilePath, JsonSerializer.Serialize(books));\\n        \\n        Console.WriteLine(\\\"Book returned successfully.\\\");\\n    }\\n}\\n\\npublic class Book\\n{\\n    public string Id { get; set; }\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public bool IsAvailable { get; set; }\\n}\\n\\npublic class User\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Email { get; set; }\\n}\\n\\npublic class Loan\\n{\\n    public string Id { get; set; }\\n    public string BookId { get; set; }\\n    public string UserId { get; set; }\\n    public DateTime LoanDate { get; set; }\\n    public DateTime DueDate { get; set; }\\n    public DateTime? ReturnDate { get; set; }\\n    public bool IsReturned { get; set; }\\n}\",\n  \"name\": \"Library Digital Lending Manager\",\n  \"description\": \"A comprehensive tool for managing a library's digital lending process including book inventory, user management, and loan tracking.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":3316,"total_tokens":3839,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}