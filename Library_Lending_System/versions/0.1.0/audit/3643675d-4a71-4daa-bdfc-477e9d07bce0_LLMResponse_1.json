
{"id":"cca1226d-d94c-4dd0-857e-2f0f2353c2b6","object":"chat.completion","created":1744180354,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class LibraryLendingSystem : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Library Lending System\\\";\\n\\n    private string _booksFilePath;\\n    private string _loansFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Library Lending System is running...\\\");\\n\\n        _booksFilePath = Path.Combine(dataFolder, \\\"books.json\\\");\\n        _loansFilePath = Path.Combine(dataFolder, \\\"loans.json\\\");\\n\\n        InitializeDataFiles();\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\"\\\\nLibrary Lending System Menu:\\\");\\n            Console.WriteLine(\\\"1. Add Book\\\");\\n            Console.WriteLine(\\\"2. List Books\\\");\\n            Console.WriteLine(\\\"3. Lend Book\\\");\\n            Console.WriteLine(\\\"4. Return Book\\\");\\n            Console.WriteLine(\\\"5. List Loans\\\");\\n            Console.WriteLine(\\\"6. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            var input = Console.ReadLine();\\n            if (int.TryParse(input, out int option))\\n            {\\n                switch (option)\\n                {\\n                    case 1:\\n                        AddBook();\\n                        break;\\n                    case 2:\\n                        ListBooks();\\n                        break;\\n                    case 3:\\n                        LendBook();\\n                        break;\\n                    case 4:\\n                        ReturnBook();\\n                        break;\\n                    case 5:\\n                        ListLoans();\\n                        break;\\n                    case 6:\\n                        exit = true;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Library Lending System is shutting down...\\\");\\n        return true;\\n    }\\n\\n    private void InitializeDataFiles()\\n    {\\n        if (!Directory.Exists(Path.GetDirectoryName(_booksFilePath)))\\n        {\\n            Directory.CreateDirectory(Path.GetDirectoryName(_booksFilePath));\\n        }\\n\\n        if (!File.Exists(_booksFilePath))\\n        {\\n            File.WriteAllText(_booksFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_loansFilePath))\\n        {\\n            File.WriteAllText(_loansFilePath, \\\"[]\\\");\\n        }\\n    }\\n\\n    private void AddBook()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        string title = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter author: \\\");\\n        string author = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter ISBN: \\\");\\n        string isbn = Console.ReadLine();\\n\\n        var books = GetBooks();\\n        books.Add(new Book\\n        {\\n            Id = Guid.NewGuid(),\\n            Title = title,\\n            Author = author,\\n            ISBN = isbn,\\n            Available = true\\n        });\\n\\n        SaveBooks(books);\\n        Console.WriteLine(\\\"Book added successfully.\\\");\\n    }\\n\\n    private void ListBooks()\\n    {\\n        var books = GetBooks();\\n        Console.WriteLine(\\\"\\\\nAvailable Books:\\\");\\n        foreach (var book in books)\\n        {\\n            Console.WriteLine($\\\"{book.Title} by {book.Author} (ISBN: {book.ISBN}) - {(book.Available ? \\\"Available\\\" : \\\"On Loan\\\")}\\\");\\n        }\\n    }\\n\\n    private void LendBook()\\n    {\\n        ListBooks();\\n        Console.Write(\\\"\\\\nEnter ISBN of book to lend: \\\");\\n        string isbn = Console.ReadLine();\\n\\n        var books = GetBooks();\\n        var book = books.Find(b => b.ISBN == isbn && b.Available);\\n\\n        if (book == null)\\n        {\\n            Console.WriteLine(\\\"Book not found or already on loan.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter borrower name: \\\");\\n        string borrower = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter loan duration (days): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int days))\\n        {\\n            Console.WriteLine(\\\"Invalid duration.\\\");\\n            return;\\n        }\\n\\n        var loans = GetLoans();\\n        var dueDate = DateTime.Now.AddDays(days);\\n\\n        loans.Add(new Loan\\n        {\\n            Id = Guid.NewGuid(),\\n            BookId = book.Id,\\n            Borrower = borrower,\\n            LoanDate = DateTime.Now,\\n            DueDate = dueDate,\\n            Returned = false\\n        });\\n\\n        book.Available = false;\\n        SaveBooks(books);\\n        SaveLoans(loans);\\n\\n        Console.WriteLine($\\\"Book '{book.Title}' lent to {borrower} until {dueDate.ToShortDateString()}.\\\");\\n    }\\n\\n    private void ReturnBook()\\n    {\\n        Console.Write(\\\"Enter ISBN of book to return: \\\");\\n        string isbn = Console.ReadLine();\\n\\n        var books = GetBooks();\\n        var book = books.Find(b => b.ISBN == isbn && !b.Available);\\n\\n        if (book == null)\\n        {\\n            Console.WriteLine(\\\"Book not found or already returned.\\\");\\n            return;\\n        }\\n\\n        var loans = GetLoans();\\n        var loan = loans.Find(l => l.BookId == book.Id && !l.Returned);\\n\\n        if (loan == null)\\n        {\\n            Console.WriteLine(\\\"Loan record not found.\\\");\\n            return;\\n        }\\n\\n        loan.Returned = true;\\n        loan.ActualReturnDate = DateTime.Now;\\n        book.Available = true;\\n\\n        SaveBooks(books);\\n        SaveLoans(loans);\\n\\n        Console.WriteLine($\\\"Book '{book.Title}' returned successfully.\\\");\\n    }\\n\\n    private void ListLoans()\\n    {\\n        var loans = GetLoans();\\n        var books = GetBooks();\\n\\n        Console.WriteLine(\\\"\\\\nCurrent Loans:\\\");\\n        foreach (var loan in loans)\\n        {\\n            if (!loan.Returned)\\n            {\\n                var book = books.Find(b => b.Id == loan.BookId);\\n                Console.WriteLine($\\\"{book?.Title ?? \\\"Unknown Book\\\"} loaned to {loan.Borrower} until {loan.DueDate.ToShortDateString()}\\\");\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nReturned Loans:\\\");\\n        foreach (var loan in loans)\\n        {\\n            if (loan.Returned && loan.ActualReturnDate.HasValue)\\n            {\\n                var book = books.Find(b => b.Id == loan.BookId);\\n                Console.WriteLine($\\\"{book?.Title ?? \\\"Unknown Book\\\"} returned by {loan.Borrower} on {loan.ActualReturnDate.Value.ToShortDateString()}\\\");\\n            }\\n        }\\n    }\\n\\n    private List<Book> GetBooks()\\n    {\\n        var json = File.ReadAllText(_booksFilePath);\\n        return JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();\\n    }\\n\\n    private void SaveBooks(List<Book> books)\\n    {\\n        var json = JsonSerializer.Serialize(books);\\n        File.WriteAllText(_booksFilePath, json);\\n    }\\n\\n    private List<Loan> GetLoans()\\n    {\\n        var json = File.ReadAllText(_loansFilePath);\\n        return JsonSerializer.Deserialize<List<Loan>>(json) ?? new List<Loan>();\\n    }\\n\\n    private void SaveLoans(List<Loan> loans)\\n    {\\n        var json = JsonSerializer.Serialize(loans);\\n        File.WriteAllText(_loansFilePath, json);\\n    }\\n}\\n\\npublic class Book\\n{\\n    public Guid Id { get; set; }\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public string ISBN { get; set; }\\n    public bool Available { get; set; }\\n}\\n\\npublic class Loan\\n{\\n    public Guid Id { get; set; }\\n    public Guid BookId { get; set; }\\n    public string Borrower { get; set; }\\n    public DateTime LoanDate { get; set; }\\n    public DateTime DueDate { get; set; }\\n    public bool Returned { get; set; }\\n    public DateTime? ActualReturnDate { get; set; }\\n}\",\n  \"name\": \"Library Lending System\",\n  \"description\": \"A system to manage a library's book lending process including adding books, lending, returning, and tracking loans.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"7.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":2145,"total_tokens":2668,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}