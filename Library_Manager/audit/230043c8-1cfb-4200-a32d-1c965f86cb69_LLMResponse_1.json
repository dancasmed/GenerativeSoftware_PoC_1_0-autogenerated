{"id":"7f1d8d69-965c-42c0-bd1b-4402d70cd8cb","object":"chat.completion","created":1743764558,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class LibraryManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Library Manager\\\";\\n    \\n    private List<Book> _books;\\n    private string _dataFilePath;\\n    \\n    public LibraryManager()\\n    {\\n        _books = new List<Book>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Library Manager module is running.\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"library_data.json\\\");\\n        \\n        try\\n        {\\n            LoadBooks();\\n            \\n            bool exit = false;\\n            while (!exit)\\n            {\\n                Console.WriteLine(\\\"\\\\nOptions:\\\");\\n                Console.WriteLine(\\\"1. Add a book\\\");\\n                Console.WriteLine(\\\"2. Search by title\\\");\\n                Console.WriteLine(\\\"3. Search by author\\\");\\n                Console.WriteLine(\\\"4. List all books\\\");\\n                Console.WriteLine(\\\"5. Exit\\\");\\n                Console.Write(\\\"Select an option: \\\");\\n                \\n                var input = Console.ReadLine();\\n                \\n                switch (input)\\n                {\\n                    case \\\"1\\\":\\n                        AddBook();\\n                        break;\\n                    case \\\"2\\\":\\n                        SearchByTitle();\\n                        break;\\n                    case \\\"3\\\":\\n                        SearchByAuthor();\\n                        break;\\n                    case \\\"4\\\":\\n                        ListAllBooks();\\n                        break;\\n                    case \\\"5\\\":\\n                        exit = true;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            \\n            SaveBooks();\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private void LoadBooks()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            var json = File.ReadAllText(_dataFilePath);\\n            _books = JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();\\n        }\\n    }\\n    \\n    private void SaveBooks()\\n    {\\n        var json = JsonSerializer.Serialize(_books);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n    \\n    private void AddBook()\\n    {\\n        Console.Write(\\\"Enter book title: \\\");\\n        var title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter book author: \\\");\\n        var author = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter publication year: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int year))\\n        {\\n            _books.Add(new Book { Title = title, Author = author, Year = year });\\n            Console.WriteLine(\\\"Book added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid year. Book not added.\\\");\\n        }\\n    }\\n    \\n    private void SearchByTitle()\\n    {\\n        Console.Write(\\\"Enter title to search: \\\");\\n        var searchTerm = Console.ReadLine();\\n        \\n        var results = _books.Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();\\n        DisplayResults(results, \\\"Books found by title:\\\");\\n    }\\n    \\n    private void SearchByAuthor()\\n    {\\n        Console.Write(\\\"Enter author to search: \\\");\\n        var searchTerm = Console.ReadLine();\\n        \\n        var results = _books.Where(b => b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();\\n        DisplayResults(results, \\\"Books found by author:\\\");\\n    }\\n    \\n    private void ListAllBooks()\\n    {\\n        DisplayResults(_books, \\\"All books in library:\\\");\\n    }\\n    \\n    private void DisplayResults(List<Book> books, string header)\\n    {\\n        if (books.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No books found.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(header);\\n        foreach (var book in books)\\n        {\\n            Console.WriteLine($\\\"{book.Title} by {book.Author} ({book.Year})\\\");\\n        }\\n    }\\n}\\n\\npublic class Book\\n{\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public int Year { get; set; }\\n}\",\n  \"name\": \"Library Manager\",\n  \"description\": \"A module for managing a library of books with search functionality by title or author.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":1162,"total_tokens":1685,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}