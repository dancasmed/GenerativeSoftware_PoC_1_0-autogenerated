
{"id":"a71981fd-770b-41f2-9810-18e5550816bb","object":"chat.completion","created":1744174628,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class LoanManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Loan Manager\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Loan Manager module is running.\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n\\n        string loansFilePath = Path.Combine(dataFolder, \\\"loans.json\\\");\\n        List<Loan> loans = LoadLoans(loansFilePath);\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add a new loan\\\");\\n            Console.WriteLine(\\\"2. View all loans\\\");\\n            Console.WriteLine(\\\"3. Generate payment schedule\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddLoan(loans);\\n                    break;\\n                case \\\"2\\\":\\n                    ViewLoans(loans);\\n                    break;\\n                case \\\"3\\\":\\n                    GeneratePaymentSchedule(loans);\\n                    break;\\n                case \\\"4\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n\\n            SaveLoans(loans, loansFilePath);\\n        }\\n\\n        return true;\\n    }\\n\\n    private List<Loan> LoadLoans(string filePath)\\n    {\\n        if (File.Exists(filePath))\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return JsonSerializer.Deserialize<List<Loan>>(json) ?? new List<Loan>();\\n        }\\n        return new List<Loan>();\\n    }\\n\\n    private void SaveLoans(List<Loan> loans, string filePath)\\n    {\\n        string json = JsonSerializer.Serialize(loans);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private void AddLoan(List<Loan> loans)\\n    {\\n        Console.Write(\\\"Enter borrower name: \\\");\\n        string borrowerName = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter loan amount: \\\");\\n        decimal amount = decimal.Parse(Console.ReadLine());\\n\\n        Console.Write(\\\"Enter annual interest rate (%): \\\");\\n        double interestRate = double.Parse(Console.ReadLine());\\n\\n        Console.Write(\\\"Enter loan term in months: \\\");\\n        int termMonths = int.Parse(Console.ReadLine());\\n\\n        loans.Add(new Loan\\n        {\\n            Id = Guid.NewGuid(),\\n            BorrowerName = borrowerName,\\n            Amount = amount,\\n            AnnualInterestRate = interestRate,\\n            TermMonths = termMonths,\\n            StartDate = DateTime.Now\\n        });\\n\\n        Console.WriteLine(\\\"Loan added successfully.\\\");\\n    }\\n\\n    private void ViewLoans(List<Loan> loans)\\n    {\\n        if (loans.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No loans found.\\\");\\n            return;\\n        }\\n\\n        foreach (var loan in loans)\\n        {\\n            Console.WriteLine(\\\"\\\\nLoan ID: \\\" + loan.Id);\\n            Console.WriteLine(\\\"Borrower: \\\" + loan.BorrowerName);\\n            Console.WriteLine(\\\"Amount: \\\" + loan.Amount.ToString(\\\"C\\\"));\\n            Console.WriteLine(\\\"Interest Rate: \\\" + loan.AnnualInterestRate + \\\"%\\\");\\n            Console.WriteLine(\\\"Term: \\\" + loan.TermMonths + \\\" months\\\");\\n            Console.WriteLine(\\\"Start Date: \\\" + loan.StartDate.ToShortDateString());\\n        }\\n    }\\n\\n    private void GeneratePaymentSchedule(List<Loan> loans)\\n    {\\n        if (loans.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No loans found.\\\");\\n            return;\\n        }\\n\\n        ViewLoans(loans);\\n        Console.Write(\\\"\\\\nEnter the Loan ID to generate schedule: \\\");\\n        string loanIdInput = Console.ReadLine();\\n\\n        if (Guid.TryParse(loanIdInput, out Guid loanId))\\n        {\\n            Loan selectedLoan = loans.Find(l => l.Id == loanId);\\n            if (selectedLoan != null)\\n            {\\n                Console.WriteLine(\\\"\\\\nPayment Schedule for \\\" + selectedLoan.BorrowerName);\\n                Console.WriteLine(\\\"Loan Amount: \\\" + selectedLoan.Amount.ToString(\\\"C\\\"));\\n                Console.WriteLine(\\\"Annual Interest Rate: \\\" + selectedLoan.AnnualInterestRate + \\\"%\\\");\\n                Console.WriteLine(\\\"Term: \\\" + selectedLoan.TermMonths + \\\" months\\\");\\n                Console.WriteLine(\\\"\\\\nPayment #\\\\tDate\\\\t\\\\tPayment\\\\t\\\\tPrincipal\\\\tInterest\\\\tRemaining Balance\\\");\\n\\n                decimal monthlyRate = (decimal)(selectedLoan.AnnualInterestRate / 100 / 12);\\n                decimal monthlyPayment = selectedLoan.Amount * monthlyRate * (decimal)Math.Pow(1 + (double)monthlyRate, selectedLoan.TermMonths) / \\n                                        (decimal)(Math.Pow(1 + (double)monthlyRate, selectedLoan.TermMonths) - 1);\\n                decimal remainingBalance = selectedLoan.Amount;\\n\\n                for (int i = 1; i <= selectedLoan.TermMonths; i++)\\n                {\\n                    DateTime paymentDate = selectedLoan.StartDate.AddMonths(i);\\n                    decimal interestPayment = remainingBalance * monthlyRate;\\n                    decimal principalPayment = monthlyPayment - interestPayment;\\n                    remainingBalance -= principalPayment;\\n\\n                    if (i == selectedLoan.TermMonths)\\n                    {\\n                        principalPayment += remainingBalance;\\n                        monthlyPayment += remainingBalance;\\n                        remainingBalance = 0;\\n                    }\\n\\n                    Console.WriteLine($\\\"{i}\\\\t\\\\t{paymentDate.ToShortDateString()}\\\\t{monthlyPayment.ToString(\\\"C\\\")}\\\\t\\\\t{principalPayment.ToString(\\\"C\\\")}\\\\t\\\\t{interestPayment.ToString(\\\"C\\\")}\\\\t\\\\t{remainingBalance.ToString(\\\"C\\\")}\\\");\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Loan not found.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid Loan ID format.\\\");\\n        }\\n    }\\n}\\n\\npublic class Loan\\n{\\n    public Guid Id { get; set; }\\n    public string BorrowerName { get; set; }\\n    public decimal Amount { get; set; }\\n    public double AnnualInterestRate { get; set; }\\n    public int TermMonths { get; set; }\\n    public DateTime StartDate { get; set; }\\n}\",\n  \"name\": \"Loan Manager\",\n  \"description\": \"A module for managing personal loans and generating payment schedules.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1661,"total_tokens":2180,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":71},"system_fingerprint":"fp_3d5141a69a_prod0225"}