{"id":"4a8fe378-1ae7-4963-90fe-48989ce73229","object":"chat.completion","created":1744175821,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class MazeGeneratorSolver : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Maze Generator and Solver\\\";\\n\\n    private int _width;\\n    private int _height;\\n    private int[,] _maze;\\n    private Random _random;\\n\\n    public MazeGeneratorSolver()\\n    {\\n        _random = new Random();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Maze Generator and Solver module...\\\");\\n        \\n        _width = 10;\\n        _height = 10;\\n        _maze = new int[_width, _height];\\n\\n        GenerateMaze();\\n        Console.WriteLine(\\\"Maze generated successfully.\\\");\\n\\n        string mazeFilePath = Path.Combine(dataFolder, \\\"maze.json\\\");\\n        SaveMazeToFile(mazeFilePath);\\n        Console.WriteLine(\\\"Maze saved to \\\" + mazeFilePath);\\n\\n        bool isSolved = SolveMaze(0, 0, _width - 1, _height - 1);\\n        if (isSolved)\\n        {\\n            Console.WriteLine(\\\"Maze solved successfully.\\\");\\n            string solutionFilePath = Path.Combine(dataFolder, \\\"maze_solution.json\\\");\\n            SaveMazeToFile(solutionFilePath);\\n            Console.WriteLine(\\\"Maze solution saved to \\\" + solutionFilePath);\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Failed to solve the maze.\\\");\\n        }\\n\\n        return isSolved;\\n    }\\n\\n    private void GenerateMaze()\\n    {\\n        for (int x = 0; x < _width; x++)\\n        {\\n            for (int y = 0; y < _height; y++)\\n            {\\n                _maze[x, y] = _random.Next(0, 2); // 0 for wall, 1 for path\\n            }\\n        }\\n        // Ensure start and end are paths\\n        _maze[0, 0] = 1;\\n        _maze[_width - 1, _height - 1] = 1;\\n    }\\n\\n    private bool SolveMaze(int startX, int startY, int endX, int endY)\\n    {\\n        var visited = new bool[_width, _height];\\n        return SolveMazeUtil(startX, startY, endX, endY, visited);\\n    }\\n\\n    private bool SolveMazeUtil(int x, int y, int endX, int endY, bool[,] visited)\\n    {\\n        if (x == endX && y == endY)\\n        {\\n            return true;\\n        }\\n\\n        if (IsValidMove(x, y, visited))\\n        {\\n            visited[x, y] = true;\\n\\n            // Mark the path\\n            _maze[x, y] = 2;\\n\\n            // Move right\\n            if (SolveMazeUtil(x + 1, y, endX, endY, visited))\\n                return true;\\n\\n            // Move down\\n            if (SolveMazeUtil(x, y + 1, endX, endY, visited))\\n                return true;\\n\\n            // Move left\\n            if (SolveMazeUtil(x - 1, y, endX, endY, visited))\\n                return true;\\n\\n            // Move up\\n            if (SolveMazeUtil(x, y - 1, endX, endY, visited))\\n                return true;\\n\\n            // Backtrack\\n            _maze[x, y] = 1;\\n        }\\n\\n        return false;\\n    }\\n\\n    private bool IsValidMove(int x, int y, bool[,] visited)\\n    {\\n        return x >= 0 && x < _width && y >= 0 && y < _height && _maze[x, y] == 1 && !visited[x, y];\\n    }\\n\\n    private void SaveMazeToFile(string filePath)\\n    {\\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        string jsonString = JsonSerializer.Serialize(_maze, options);\\n        File.WriteAllText(filePath, jsonString);\\n    }\\n}\",\n  \"name\": \"Maze Generator and Solver\",\n  \"description\": \"A module that generates a random maze and attempts to solve it using a backtracking algorithm. The maze and its solution are saved as JSON files in the specified data folder.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1071,"total_tokens":1590,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}