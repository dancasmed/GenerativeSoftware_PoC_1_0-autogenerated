{"id":"ab9a0961-1179-4939-850a-37d5bc99a6ef","object":"chat.completion","created":1744180080,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class MazeGeneratorSolver : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Maze Generator and Solver\\\";\\n\\n    private int _width;\\n    private int _height;\\n    private Random _random;\\n    private List<List<bool>> _maze;\\n    private List<List<bool>> _solution;\\n\\n    public MazeGeneratorSolver()\\n    {\\n        _random = new Random();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Maze Generator and Solver module is running...\\\");\\n        Console.WriteLine(\\\"Generating a random maze...\\\");\\n\\n        _width = 10;\\n        _height = 10;\\n        GenerateMaze();\\n\\n        Console.WriteLine(\\\"Maze generated successfully.\\\");\\n        Console.WriteLine(\\\"Solving the maze...\\\");\\n\\n        SolveMaze();\\n\\n        Console.WriteLine(\\\"Maze solved successfully.\\\");\\n\\n        SaveMazeToFile(dataFolder);\\n        SaveSolutionToFile(dataFolder);\\n\\n        Console.WriteLine(\\\"Maze and solution saved to files.\\\");\\n\\n        return true;\\n    }\\n\\n    private void GenerateMaze()\\n    {\\n        _maze = new List<List<bool>>();\\n        for (int i = 0; i < _height; i++)\\n        {\\n            _maze.Add(new List<bool>());\\n            for (int j = 0; j < _width; j++)\\n            {\\n                _maze[i].Add(_random.Next(0, 2) == 0);\\n            }\\n        }\\n\\n        _maze[0][0] = true;\\n        _maze[_height - 1][_width - 1] = true;\\n    }\\n\\n    private void SolveMaze()\\n    {\\n        _solution = new List<List<bool>>();\\n        for (int i = 0; i < _height; i++)\\n        {\\n            _solution.Add(new List<bool>());\\n            for (int j = 0; j < _width; j++)\\n            {\\n                _solution[i].Add(false);\\n            }\\n        }\\n\\n        SolveMazeRecursive(0, 0);\\n    }\\n\\n    private bool SolveMazeRecursive(int x, int y)\\n    {\\n        if (x < 0 || y < 0 || x >= _width || y >= _height || !_maze[y][x] || _solution[y][x])\\n        {\\n            return false;\\n        }\\n\\n        _solution[y][x] = true;\\n\\n        if (x == _width - 1 && y == _height - 1)\\n        {\\n            return true;\\n        }\\n\\n        if (SolveMazeRecursive(x + 1, y) || SolveMazeRecursive(x, y + 1) ||\\n            SolveMazeRecursive(x - 1, y) || SolveMazeRecursive(x, y - 1))\\n        {\\n            return true;\\n        }\\n\\n        _solution[y][x] = false;\\n        return false;\\n    }\\n\\n    private void SaveMazeToFile(string dataFolder)\\n    {\\n        string filePath = Path.Combine(dataFolder, \\\"maze.json\\\");\\n        string json = JsonSerializer.Serialize(_maze);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private void SaveSolutionToFile(string dataFolder)\\n    {\\n        string filePath = Path.Combine(dataFolder, \\\"solution.json\\\");\\n        string json = JsonSerializer.Serialize(_solution);\\n        File.WriteAllText(filePath, json);\\n    }\\n}\",\n  \"name\": \"Maze Generator and Solver\",\n  \"description\": \"A module that generates random mazes and solves them using a recursive backtracking algorithm.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":944,"total_tokens":1467,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}