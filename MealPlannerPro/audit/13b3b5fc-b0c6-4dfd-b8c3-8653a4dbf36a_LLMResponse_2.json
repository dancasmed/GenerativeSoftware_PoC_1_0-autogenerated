{
  "choices": [
    {
      "message": {
        "content": "\u0060\u0060\u0060json\n{\n  \u0022isFeatureImplemented\u0022: false,\n  \u0022updatedSourceCodeFiles\u0022: [\n    {\n      \u0022filename\u0022: \u0022Module.cs\u0022,\n      \u0022source_code\u0022: \u0022using SelfEvolvingSoftware.Interfaces;\\nusing System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\nusing System.Linq;\\n\\npublic class Meal\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public List\u003CIngredient\u003E Ingredients { get; set; }\\n    public int Calories { get; set; }\\n    public int PreparationTime { get; set; }\\n    public List\u003Cstring\u003E DietaryTags { get; set; }\\n}\\n\\npublic class Ingredient\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Category { get; set; }\\n    public double Quantity { get; set; }\\n    public string Unit { get; set; }\\n}\\n\\npublic class MealPlan\\n{\\n    public string Id { get; set; }\\n    public string UserId { get; set; }\\n    public DateTime StartDate { get; set; }\\n    public DateTime EndDate { get; set; }\\n    public List\u003CDay\u003E Days { get; set; }\\n}\\n\\npublic class Day\\n{\\n    public DateTime Date { get; set; }\\n    public List\u003CMeal\u003E Meals { get; set; }\\n    public int TotalCalories { get; set; }\\n}\\n\\npublic class GroceryList\\n{\\n    public string Id { get; set; }\\n    public string MealPlanId { get; set; }\\n    public List\u003CGroceryItem\u003E Items { get; set; }\\n    public int TotalItems { get; set; }\\n}\\n\\npublic class GroceryItem\\n{\\n    public string Id { get; set; }\\n    public string IngredientId { get; set; }\\n    public string Name { get; set; }\\n    public string Category { get; set; }\\n    public double Quantity { get; set; }\\n    public string Unit { get; set; }\\n    public bool Checked { get; set; }\\n}\\n\\npublic class User\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public List\u003Cstring\u003E DietaryPreferences { get; set; }\\n    public List\u003Cstring\u003E DietaryRestrictions { get; set; }\\n    public int CalorieTarget { get; set; }\\n}\\n\\npublic class DataStorage\\n{\\n    private string dataFolder;\\n    private JsonSerializerOptions jsonOptions;\\n\\n    public DataStorage(string folder)\\n    {\\n        dataFolder = folder;\\n        jsonOptions = new JsonSerializerOptions { WriteIndented = true, PropertyNameCaseInsensitive = true };\\n    }\\n\\n    public List\u003CUser\u003E LoadUsers() =\u003E Load\u003CList\u003CUser\u003E\u003E(\\\u0022users.json\\\u0022);\\n    public List\u003CMeal\u003E LoadMeals() =\u003E Load\u003CList\u003CMeal\u003E\u003E(\\\u0022meals.json\\\u0022);\\n    public List\u003CMealPlan\u003E LoadMealPlans() =\u003E Load\u003CList\u003CMealPlan\u003E\u003E(\\\u0022mealplans.json\\\u0022);\\n    public List\u003CGroceryList\u003E LoadGroceryLists() =\u003E Load\u003CList\u003CGroceryList\u003E\u003E(\\\u0022grocerylists.json\\\u0022);\\n\\n    public void SaveUsers(List\u003CUser\u003E data) =\u003E Save(\\\u0022users.json\\\u0022, data);\\n    public void SaveMeals(List\u003CMeal\u003E data) =\u003E Save(\\\u0022meals.json\\\u0022, data);\\n    public void SaveMealPlans(List\u003CMealPlan\u003E data) =\u003E Save(\\\u0022mealplans.json\\\u0022, data);\\n    public void SaveGroceryLists(List\u003CGroceryList\u003E data) =\u003E Save(\\\u0022grocerylists.json\\\u0022, data);\\n\\n    private T Load\u003CT\u003E(string filename) where T : new()\\n    {\\n        string path = Path.Combine(dataFolder, filename);\\n        if (File.Exists(path))\\n            return JsonSerializer.Deserialize\u003CT\u003E(File.ReadAllText(path), jsonOptions);\\n        return new T();\\n    }\\n\\n    private void Save\u003CT\u003E(string filename, T data)\\n    {\\n        string path = Path.Combine(dataFolder, filename);\\n        File.WriteAllText(path, JsonSerializer.Serialize(data, jsonOptions));\\n    }\\n}\\n\\npublic class MealPlannerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\u0022Meal Planner Module\\\u0022;\\n    private DataStorage dataStorage;\\n    private User currentUser;\\n    private List\u003CMeal\u003E meals;\\n    private List\u003CMealPlan\u003E mealPlans;\\n    private List\u003CGroceryList\u003E groceryLists;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\u0022Meal Planner Module is running.\\\u0022);\\n        dataStorage = new DataStorage(dataFolder);\\n        LoadData();\\n        InitializeUser();\\n        MainMenu();\\n        return true;\\n    }\\n\\n    private void LoadData()\\n    {\\n        meals = dataStorage.LoadMeals();\\n        mealPlans = dataStorage.LoadMealPlans();\\n        groceryLists = dataStorage.LoadGroceryLists();\\n    }\\n\\n    private void SaveData()\\n    {\\n        dataStorage.SaveMeals(meals);\\n        dataStorage.SaveMealPlans(mealPlans);\\n        dataStorage.SaveGroceryLists(groceryLists);\\n    }\\n\\n    private void InitializeUser()\\n    {\\n        var users = dataStorage.LoadUsers();\\n        if (!users.Any())\\n        {\\n            currentUser = new User\\n            {\\n                Id = Guid.NewGuid().ToString(),\\n                Name = \\\u0022Default User\\\u0022,\\n                DietaryPreferences = new List\u003Cstring\u003E(),\\n                DietaryRestrictions = new List\u003Cstring\u003E(),\\n                CalorieTarget = 2000\\n            };\\n            users.Add(currentUser);\\n            dataStorage.SaveUsers(users);\\n        }\\n        else\\n        {\\n            currentUser = users.First();\\n        }\\n    }\\n\\n    private void MainMenu()\\n    {\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nMain Menu:\\\u0022);\\n            Console.WriteLine(\\\u00221. Manage Meals\\\u0022);\\n            Console.WriteLine(\\\u00222. Manage Meal Plans\\\u0022);\\n            Console.WriteLine(\\\u00223. Generate Grocery List\\\u0022);\\n            Console.WriteLine(\\\u00224. Manage User Settings\\\u0022);  // Changed from \\\u0022View\\\u0022 to \\\u0022Manage\\\u0022\\n            Console.WriteLine(\\\u00225. Exit\\\u0022);\\n            Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022: ManageMeals(); break;\\n                case \\\u00222\\\u0022: ManageMealPlans(); break;\\n                case \\\u00223\\\u0022: GenerateGroceryList(); break;\\n                case \\\u00224\\\u0022: ManageUserSettings(); break;  // Changed to ManageUserSettings\\n                case \\\u00225\\\u0022: exit = true; break;\\n                default: Console.WriteLine(\\\u0022Invalid option\\\u0022); break;\\n            }\\n        }\\n        SaveData();\\n    }\\n\\n    private void ManageMeals()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nManage Meals:\\\u0022);\\n        Console.WriteLine(\\\u00221. Create Meal\\\u0022);\\n        Console.WriteLine(\\\u00222. List Meals\\\u0022);\\n        Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n        switch (Console.ReadLine())\\n        {\\n            case \\\u00221\\\u0022: CreateMeal(); break;\\n            case \\\u00222\\\u0022: ListMeals(); break;\\n            default: Console.WriteLine(\\\u0022Invalid option\\\u0022); break;\\n        }\\n    }\\n\\n    // ... (Keep existing CreateMeal, ListMeals, ManageMealPlans methods unchanged)\\n\\n    private void ManageUserSettings()\\n    {\\n        bool back = false;\\n        while (!back)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nUser Settings:\\\u0022);\\n            Console.WriteLine(\\\u00221. View Current Settings\\\u0022);\\n            Console.WriteLine(\\\u00222. Edit Settings\\\u0022);\\n            Console.WriteLine(\\\u00223. Back to Main Menu\\\u0022);\\n            Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    ViewUserSettings();\\n                    break;\\n                case \\\u00222\\\u0022:\\n                    EditUserSettings();\\n                    break;\\n                case \\\u00223\\\u0022:\\n                    back = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    private void ViewUserSettings()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nCurrent User Settings:\\\u0022);\\n        Console.WriteLine($\\\u0022Name: {currentUser.Name}\\\u0022);\\n        Console.WriteLine($\\\u0022Calorie Target: {currentUser.CalorieTarget}\\\u0022);\\n        Console.WriteLine($\\\u0022Dietary Preferences: {string.Join(\\\u0022, \\\u0022, currentUser.DietaryPreferences)}\\\u0022);\\n        Console.WriteLine($\\\u0022Dietary Restrictions: {string.Join(\\\u0022, \\\u0022, currentUser.DietaryRestrictions)}\\\u0022);\\n    }\\n\\n    private void EditUserSettings()\\n    {\\n        bool editing = true;\\n        while (editing)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nEdit Settings:\\\u0022);\\n            Console.WriteLine(\\\u00221. Change Name\\\u0022);\\n            Console.WriteLine(\\\u00222. Change Calorie Target\\\u0022);\\n            Console.WriteLine(\\\u00223. Manage Dietary Preferences\\\u0022);\\n            Console.WriteLine(\\\u00224. Manage Dietary Restrictions\\\u0022);\\n            Console.WriteLine(\\\u00225. Finish Editing\\\u0022);\\n            Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    Console.Write(\\\u0022Enter new name: \\\u0022);\\n                    currentUser.Name = Console.ReadLine();\\n                    break;\\n                case \\\u00222\\\u0022:\\n                    Console.Write(\\\u0022Enter new calorie target: \\\u0022);\\n                    int.TryParse(Console.ReadLine(), out int newTarget);\\n                    currentUser.CalorieTarget = newTarget;\\n                    break;\\n                case \\\u00223\\\u0022:\\n                    ManageDietaryItems(currentUser.DietaryPreferences, \\\u0022preferences\\\u0022);\\n                    break;\\n                case \\\u00224\\\u0022:\\n                    ManageDietaryItems(currentUser.DietaryRestrictions, \\\u0022restrictions\\\u0022);\\n                    break;\\n                case \\\u00225\\\u0022:\\n                    editing = false;\\n                    // Save updated user data\\n                    var users = dataStorage.LoadUsers();\\n                    users[users.FindIndex(u =\u003E u.Id == currentUser.Id)] = currentUser;\\n                    dataStorage.SaveUsers(users);\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    private void ManageDietaryItems(List\u003Cstring\u003E items, string type)\\n    {\\n        bool managing = true;\\n        while (managing)\\n        {\\n            Console.WriteLine($\\\u0022\\\\nCurrent Dietary {type}:\\\u0022);\\n            if (items.Any())\\n                Console.WriteLine(string.Join(\\\u0022, \\\u0022, items));\\n            else\\n                Console.WriteLine(\\\u0022None specified\\\u0022);\\n\\n            Console.WriteLine(\\\u00221. Add item\\\u0022);\\n            Console.WriteLine(\\\u00222. Remove item\\\u0022);\\n            Console.WriteLine(\\\u00223. Back\\\u0022);\\n            Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    Console.Write(\\\u0022Enter item to add: \\\u0022);\\n                    var addItem = Console.ReadLine();\\n                    if (!string.IsNullOrWhiteSpace(addItem) \u0026\u0026 !items.Contains(addItem))\\n                        items.Add(addItem);\\n                    break;\\n                case \\\u00222\\\u0022:\\n                    if (items.Any())\\n                    {\\n                        Console.Write(\\\u0022Enter item to remove: \\\u0022);\\n                        var removeItem = Console.ReadLine();\\n                        items.Remove(removeItem);\\n                    }\\n                    break;\\n                case \\\u00223\\\u0022:\\n                    managing = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    // ... (Keep remaining existing methods unchanged)\\n}\\n\u0022\n    }\n  ],\n  \u0022required_nugets\u0022: []\n}\n\u0060\u0060\u0060"
      }
    }
  ]
}