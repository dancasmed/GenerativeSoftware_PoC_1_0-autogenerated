{
  "choices": [
    {
      "message": {
        "content": "\u0060\u0060\u0060json\n{\n  \u0022isFeatureImplemented\u0022: false,\n  \u0022updatedSourceCodeFiles\u0022: [\n    {\n      \u0022filename\u0022: \u0022Module.cs\u0022,\n      \u0022source_code\u0022: \u0022using SelfEvolvingSoftware.Interfaces;\\nusing System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\nusing System.Linq;\\n\\npublic class Meal\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public List\u003CIngredient\u003E Ingredients { get; set; }\\n    public int Calories { get; set; }\\n    public int PreparationTime { get; set; }\\n    public List\u003Cstring\u003E DietaryTags { get; set; }\\n}\\n\\npublic class Ingredient\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Category { get; set; }\\n    public double Quantity { get; set; }\\n    public string Unit { get; set; }\\n}\\n\\npublic class MealPlan\\n{\\n    public string Id { get; set; }\\n    public string UserId { get; set; }\\n    public DateTime StartDate { get; set; }\\n    public DateTime EndDate { get; set; }\\n    public List\u003CDay\u003E Days { get; set; }\\n}\\n\\npublic class Day\\n{\\n    public DateTime Date { get; set; }\\n    public List\u003CMeal\u003E Meals { get; set; }\\n    public int TotalCalories { get; set; }\\n}\\n\\npublic class GroceryList\\n{\\n    public string Id { get; set; }\\n    public string MealPlanId { get; set; }\\n    public List\u003CGroceryItem\u003E Items { get; set; }\\n    public int TotalItems { get; set; }\\n}\\n\\npublic class GroceryItem\\n{\\n    public string Id { get; set; }\\n    public string IngredientId { get; set; }\\n    public string Name { get; set; }\\n    public string Category { get; set; }\\n    public double Quantity { get; set; }\\n    public string Unit { get; set; }\\n    public bool Checked { get; set; }\\n}\\n\\npublic class User\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public List\u003Cstring\u003E DietaryPreferences { get; set; }\\n    public List\u003Cstring\u003E DietaryRestrictions { get; set; }\\n    public int CalorieTarget { get; set; }\\n}\\n\\npublic class DataStorage\\n{\\n    private string dataFolder;\\n    private JsonSerializerOptions jsonOptions;\\n\\n    public DataStorage(string folder)\\n    {\\n        dataFolder = folder;\\n        jsonOptions = new JsonSerializerOptions { WriteIndented = true, PropertyNameCaseInsensitive = true };\\n    }\\n\\n    public List\u003CUser\u003E LoadUsers() =\u003E Load\u003CList\u003CUser\u003E\u003E(\\\u0022users.json\\\u0022);\\n    public List\u003CMeal\u003E LoadMeals() =\u003E Load\u003CList\u003CMeal\u003E\u003E(\\\u0022meals.json\\\u0022);\\n    public List\u003CMealPlan\u003E LoadMealPlans() =\u003E Load\u003CList\u003CMealPlan\u003E\u003E(\\\u0022mealplans.json\\\u0022);\\n    public List\u003CGroceryList\u003E LoadGroceryLists() =\u003E Load\u003CList\u003CGroceryList\u003E\u003E(\\\u0022grocerylists.json\\\u0022);\\n\\n    public void SaveUsers(List\u003CUser\u003E data) =\u003E Save(\\\u0022users.json\\\u0022, data);\\n    public void SaveMeals(List\u003CMeal\u003E data) =\u003E Save(\\\u0022meals.json\\\u0022, data);\\n    public void SaveMealPlans(List\u003CMealPlan\u003E data) =\u003E Save(\\\u0022mealplans.json\\\u0022, data);\\n    public void SaveGroceryLists(List\u003CGroceryList\u003E data) =\u003E Save(\\\u0022grocerylists.json\\\u0022, data);\\n\\n    private T Load\u003CT\u003E(string filename) where T : new()\\n    {\\n        string path = Path.Combine(dataFolder, filename);\\n        if (File.Exists(path))\\n            return JsonSerializer.Deserialize\u003CT\u003E(File.ReadAllText(path), jsonOptions);\\n        return new T();\\n    }\\n\\n    private void Save\u003CT\u003E(string filename, T data)\\n    {\\n        string path = Path.Combine(dataFolder, filename);\\n        File.WriteAllText(path, JsonSerializer.Serialize(data, jsonOptions));\\n    }\\n}\\n\\npublic class MealPlannerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\u0022Meal Planner Module\\\u0022;\\n    private DataStorage dataStorage;\\n    private List\u003CUser\u003E users;\\n    private User currentUser;\\n    private List\u003CMeal\u003E meals;\\n    private List\u003CMealPlan\u003E mealPlans;\\n    private List\u003CGroceryList\u003E groceryLists;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\u0022Meal Planner Module is running.\\\u0022);\\n        dataStorage = new DataStorage(dataFolder);\\n        LoadData();\\n        InitializeUser();\\n        MainMenu();\\n        return true;\\n    }\\n\\n    private void LoadData()\\n    {\\n        users = dataStorage.LoadUsers();\\n        meals = dataStorage.LoadMeals();\\n        mealPlans = dataStorage.LoadMealPlans();\\n        groceryLists = dataStorage.LoadGroceryLists();\\n    }\\n\\n    private void SaveData()\\n    {\\n        dataStorage.SaveUsers(users);\\n        dataStorage.SaveMeals(meals);\\n        dataStorage.SaveMealPlans(mealPlans);\\n        dataStorage.SaveGroceryLists(groceryLists);\\n    }\\n\\n    private void InitializeUser()\\n    {\\n        if (!users.Any())\\n        {\\n            currentUser = new User\\n            {\\n                Id = Guid.NewGuid().ToString(),\\n                Name = \\\u0022Default User\\\u0022,\\n                DietaryPreferences = new List\u003Cstring\u003E(),\\n                DietaryRestrictions = new List\u003Cstring\u003E(),\\n                CalorieTarget = 2000\\n            };\\n            users.Add(currentUser);\\n            dataStorage.SaveUsers(users);\\n        }\\n        else\\n        {\\n            currentUser = users.First();\\n        }\\n    }\\n\\n    private void MainMenu()\\n    {\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nMain Menu:\\\u0022);\\n            Console.WriteLine(\\\u00221. Manage Meals\\\u0022);\\n            Console.WriteLine(\\\u00222. Manage Meal Plans\\\u0022);\\n            Console.WriteLine(\\\u00223. Generate Grocery List\\\u0022);\\n            Console.WriteLine(\\\u00224. Manage User Settings\\\u0022);\\n            Console.WriteLine(\\\u00225. Exit\\\u0022);\\n            Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022: ManageMeals(); break;\\n                case \\\u00222\\\u0022: ManageMealPlans(); break;\\n                case \\\u00223\\\u0022: GenerateGroceryList(); break;\\n                case \\\u00224\\\u0022: ManageUserSettings(); break;\\n                case \\\u00225\\\u0022: exit = true; break;\\n                default: Console.WriteLine(\\\u0022Invalid option\\\u0022); break;\\n            }\\n        }\\n        SaveData();\\n    }\\n\\n    private void ManageUserSettings()\\n    {\\n        bool back = false;\\n        while (!back)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nUser Settings Management:\\\u0022);\\n            Console.WriteLine(\\\u00221. View Current Settings\\\u0022);\\n            Console.WriteLine(\\\u00222. Edit Name\\\u0022);\\n            Console.WriteLine(\\\u00223. Edit Calorie Target\\\u0022);\\n            Console.WriteLine(\\\u00224. Edit Dietary Preferences\\\u0022);\\n            Console.WriteLine(\\\u00225. Edit Dietary Restrictions\\\u0022);\\n            Console.WriteLine(\\\u00226. Return to Main Menu\\\u0022);\\n            Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022: ViewUserSettings(); break;\\n                case \\\u00222\\\u0022: EditUserField(\\\u0022Name\\\u0022); break;\\n                case \\\u00223\\\u0022: EditUserField(\\\u0022CalorieTarget\\\u0022); break;\\n                case \\\u00224\\\u0022: EditDietaryPreferences(); break;\\n                case \\\u00225\\\u0022: EditDietaryRestrictions(); break;\\n                case \\\u00226\\\u0022: back = true; break;\\n                default: Console.WriteLine(\\\u0022Invalid option\\\u0022); break;\\n            }\\n        }\\n    }\\n\\n    private void ViewUserSettings()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nCurrent User Settings:\\\u0022);\\n        Console.WriteLine($\\\u0022Name: {currentUser.Name}\\\u0022);\\n        Console.WriteLine($\\\u0022Calorie Target: {currentUser.CalorieTarget}\\\u0022);\\n        Console.WriteLine($\\\u0022Dietary Preferences: {string.Join(\\\u0022, \\\u0022, currentUser.DietaryPreferences)}\\\u0022);\\n        Console.WriteLine($\\\u0022Dietary Restrictions: {string.Join(\\\u0022, \\\u0022, currentUser.DietaryRestrictions)}\\\u0022);\\n    }\\n\\n    private void EditUserField(string field)\\n    {\\n        Console.Write($\\\u0022Enter new {field}: \\\u0022);\\n        var input = Console.ReadLine();\\n\\n        switch (field)\\n        {\\n            case \\\u0022Name\\\u0022:\\n                currentUser.Name = input;\\n                break;\\n            case \\\u0022CalorieTarget\\\u0022:\\n                if (int.TryParse(input, out int target))\\n                    currentUser.CalorieTarget = target;\\n                else\\n                    Console.WriteLine(\\\u0022Invalid number format\\\u0022);\\n                break;\\n        }\\n\\n        // Update users list and save\\n        var index = users.FindIndex(u =\u003E u.Id == currentUser.Id);\\n        if (index != -1) users[index] = currentUser;\\n        dataStorage.SaveUsers(users);\\n        Console.WriteLine(\\\u0022Settings updated successfully\\\u0022);\\n    }\\n\\n    private void EditDietaryPreferences()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nCurrent Dietary Preferences: \\\u0022 \u002B string.Join(\\\u0022, \\\u0022, currentUser.DietaryPreferences));\\n        Console.Write(\\\u0022Enter new preferences (comma-separated): \\\u0022);\\n        var input = Console.ReadLine();\\n        currentUser.DietaryPreferences = input.Split(\u0027,\u0027)\\n            .Select(s =\u003E s.Trim())\\n            .Where(s =\u003E !string.IsNullOrWhiteSpace(s))\\n            .ToList();\\n\\n        // Update users list and save\\n        var index = users.FindIndex(u =\u003E u.Id == currentUser.Id);\\n        if (index != -1) users[index] = currentUser;\\n        dataStorage.SaveUsers(users);\\n        Console.WriteLine(\\\u0022Preferences updated successfully\\\u0022);\\n    }\\n\\n    private void EditDietaryRestrictions()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nCurrent Dietary Restrictions: \\\u0022 \u002B string.Join(\\\u0022, \\\u0022, currentUser.DietaryRestrictions));\\n        Console.Write(\\\u0022Enter new restrictions (comma-separated): \\\u0022);\\n        var input = Console.ReadLine();\\n        currentUser.DietaryRestrictions = input.Split(\u0027,\u0027)\\n            .Select(s =\u003E s.Trim())\\n            .Where(s =\u003E !string.IsNullOrWhiteSpace(s))\\n            .ToList();\\n\\n        // Update users list and save\\n        var index = users.FindIndex(u =\u003E u.Id == currentUser.Id);\\n        if (index != -1) users[index] = currentUser;\\n        dataStorage.SaveUsers(users);\\n        Console.WriteLine(\\\u0022Restrictions updated successfully\\\u0022);\\n    }\\n\\n    // Rest of the original class methods remain unchanged below...\\n    private void ManageMeals()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nManage Meals:\\\u0022);\\n        Console.WriteLine(\\\u00221. Create Meal\\\u0022);\\n        Console.WriteLine(\\\u00222. List Meals\\\u0022);\\n        Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n        switch (Console.ReadLine())\\n        {\\n            case \\\u00221\\\u0022: CreateMeal(); break;\\n            case \\\u00222\\\u0022: ListMeals(); break;\\n            default: Console.WriteLine(\\\u0022Invalid option\\\u0022); break;\\n        }\\n    }\\n\\n    private void CreateMeal()\\n    {\\n        var meal = new Meal\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Ingredients = new List\u003CIngredient\u003E()\\n        };\\n\\n        Console.Write(\\\u0022Enter meal name: \\\u0022);\\n        meal.Name = Console.ReadLine();\\n        Console.Write(\\\u0022Enter description: \\\u0022);\\n        meal.Description = Console.ReadLine();\\n        Console.Write(\\\u0022Enter calories: \\\u0022);\\n        int.TryParse(Console.ReadLine(), out int calories);\\n        meal.Calories = calories;\\n\\n        bool addingIngredients = true;\\n        while (addingIngredients)\\n        {\\n            var ingredient = new Ingredient\\n            {\\n                Id = Guid.NewGuid().ToString()\\n            };\\n            Console.Write(\\\u0022Enter ingredient name (or \u0027done\u0027 to finish): \\\u0022);\\n            var nameInput = Console.ReadLine();\\n            if (nameInput?.ToLower() == \\\u0022done\\\u0022) break;\\n\\n            ingredient.Name = nameInput;\\n            Console.Write(\\\u0022Enter category: \\\u0022);\\n            ingredient.Category = Console.ReadLine();\\n            Console.Write(\\\u0022Enter quantity: \\\u0022);\\n            double.TryParse(Console.ReadLine(), out double quantity);\\n            ingredient.Quantity = quantity;\\n            Console.Write(\\\u0022Enter unit: \\\u0022);\\n            ingredient.Unit = Console.ReadLine();\\n\\n            meal.Ingredients.Add(ingredient);\\n        }\\n\\n        meals.Add(meal);\\n        Console.WriteLine(\\\u0022Meal created successfully.\\\u0022);\\n    }\\n\\n    private void ListMeals()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nAll Meals:\\\u0022);\\n        foreach (var meal in meals)\\n            Console.WriteLine($\\\u0022{meal.Name} - {meal.Calories} calories ({meal.Ingredients.Count} ingredients)\\\u0022);\\n    }\\n\\n    private void ManageMealPlans()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nManage Meal Plans:\\\u0022);\\n        Console.WriteLine(\\\u00221. Create Meal Plan\\\u0022);\\n        Console.WriteLine(\\\u00222. View Meal Plans\\\u0022);\\n        Console.WriteLine(\\\u00223. Add Meals to Plan\\\u0022);\\n        Console.Write(\\\u0022Enter choice: \\\u0022);\\n\\n        switch (Console.ReadLine())\\n        {\\n            case \\\u00221\\\u0022: CreateMealPlan(); break;\\n            case \\\u00222\\\u0022: ViewMealPlans(); break;\\n            case \\\u00223\\\u0022: AddMealsToPlan(); break;\\n            default: Console.WriteLine(\\\u0022Invalid option\\\u0022); break;\\n        }\\n    }\\n\\n    private void CreateMealPlan()\\n    {\\n        var plan = new MealPlan\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            UserId = currentUser.Id,\\n            Days = new List\u003CDay\u003E()\\n        };\\n\\n        Console.Write(\\\u0022Enter start date (yyyy-mm-dd): \\\u0022);\\n        DateTime.TryParse(Console.ReadLine(), out DateTime startDate);\\n        plan.StartDate = startDate;\\n        plan.EndDate = startDate.AddDays(6);\\n\\n        // Initialize empty days\\n        for (int i = 0; i \u003C 7; i\u002B\u002B)\\n        {\\n            plan.Days.Add(new Day\\n            {\\n                Date = startDate.AddDays(i),\\n                Meals = new List\u003CMeal\u003E(),\\n                TotalCalories = 0\\n            });\\n        }\\n\\n        mealPlans.Add(plan);\\n        Console.WriteLine(\\\u0022Meal plan created for week starting \\\u0022 \u002B startDate.ToShortDateString());\\n    }\\n\\n    private void ViewMealPlans()\\n    {\\n        Console.WriteLine(\\\u0022\\\\nCurrent Meal Plans:\\\u0022);\\n        for (int i = 0; i \u003C mealPlans.Count; i\u002B\u002B)\\n        {\\n            Console.WriteLine($\\\u0022{i \u002B 1}. {mealPlans[i].StartDate.ToShortDateString()} to {mealPlans[i].EndDate.ToShortDateString()}\\\u0022);\\n        }\\n\\n        Console.Write(\\\u0022\\\\nSelect meal plan to view details (0 to cancel): \\\u0022);\\n        if (int.TryParse(Console.ReadLine(), out int selection) \u0026\u0026 selection \u003E 0 \u0026\u0026 selection \u003C= mealPlans.Count)\\n        {\\n            var selectedPlan = mealPlans[selection - 1];\\n            Console.WriteLine(\\\u0022\\\\nMeal Plan Details:\\\u0022);\\n            foreach (var day in selectedPlan.Days)\\n            {\\n                Console.WriteLine($\\\u0022{day.Date.ToShortDateString()}: {day.Meals.Count} meals - Total Calories: {day.TotalCalories} (Target: {currentUser.CalorieTarget})\\\u0022);\\n                foreach (var meal in day.Meals)\\n                {\\n                    Console.WriteLine($\\\u0022- {meal.Name} ({meal.Calories} calories)\\\u0022);\\n                }\\n                if (day.TotalCalories \u003E currentUser.CalorieTarget)\\n                {\\n                    Console.WriteLine(\\\u0022WARNING: Exceeds daily calorie target!\\\u0022);\\n                }\\n            }\\n        }\\n    }\\n\\n    private void AddMealsToPlan()\\n    {\\n        if (!mealPlans.Any())\\n        {\\n            Console.WriteLine(\\\u0022No meal plans available\\\u0022);\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\u0022\\\\nSelect Meal Plan:\\\u0022);\\n        for (int i = 0; i \u003C mealPlans.Count; i\u002B\u002B)\\n        {\\n            Console.WriteLine($\\\u0022{i \u002B 1}. {mealPlans[i].StartDate.ToShortDateString()} to {mealPlans[i].EndDate.ToShortDateString()}\\\u0022);\\n        }\\n\\n        Console.Write(\\\u0022Enter selection: \\\u0022);\\n        if (!int.TryParse(Console.ReadLine(), out int planIndex) || planIndex \u003C 1 || planIndex \u003E mealPlans.Count)\\n        {\\n            Console.WriteLine(\\\u0022Invalid selection\\\u0022);\\n            return;\\n        }\\n\\n        var selectedPlan = mealPlans[planIndex - 1];\\n\\n        Console.WriteLine(\\\u0022\\\\nSelect Day:\\\u0022);\\n        for (int i = 0; i \u003C selectedPlan.Days.Count;"
      }
    }
  ]
}