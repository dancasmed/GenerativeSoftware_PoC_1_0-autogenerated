{"id":"fcd3bd22-242c-4767-b00b-739bb0d00bcb","object":"chat.completion","created":1743788957,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class MoodTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Mood Tracker\\\";\\n    \\n    private string _dataFilePath;\\n    private const string DataFileName = \\\"mood_entries.json\\\";\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Mood Tracker module is running...\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, DataFileName);\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        List<MoodEntry> entries = LoadEntries();\\n        \\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add mood entry\\\");\\n            Console.WriteLine(\\\"2. View weekly summary\\\");\\n            Console.WriteLine(\\\"3. Exit module\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            if (input == \\\"1\\\")\\n            {\\n                AddMoodEntry(entries);\\n            }\\n            else if (input == \\\"2\\\")\\n            {\\n                GenerateWeeklySummary(entries);\\n            }\\n            else if (input == \\\"3\\\")\\n            {\\n                SaveEntries(entries);\\n                Console.WriteLine(\\\"Saving data and exiting Mood Tracker module.\\\");\\n                return true;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n            }\\n        }\\n    }\\n    \\n    private List<MoodEntry> LoadEntries()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            string json = File.ReadAllText(_dataFilePath);\\n            return JsonSerializer.Deserialize<List<MoodEntry>>(json) ?? new List<MoodEntry>();\\n        }\\n        return new List<MoodEntry>();\\n    }\\n    \\n    private void SaveEntries(List<MoodEntry> entries)\\n    {\\n        string json = JsonSerializer.Serialize(entries);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n    \\n    private void AddMoodEntry(List<MoodEntry> entries)\\n    {\\n        Console.Write(\\\"Enter your mood (1-5 where 1=Very Bad, 5=Excellent): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int moodRating) && moodRating >= 1 && moodRating <= 5)\\n        {\\n            Console.Write(\\\"Enter optional notes: \\\");\\n            string notes = Console.ReadLine();\\n            \\n            entries.Add(new MoodEntry\\n            {\\n                Date = DateTime.Now,\\n                Rating = moodRating,\\n                Notes = notes\\n            });\\n            \\n            Console.WriteLine(\\\"Mood entry added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid mood rating. Please enter a number between 1 and 5.\\\");\\n        }\\n    }\\n    \\n    private void GenerateWeeklySummary(List<MoodEntry> entries)\\n    {\\n        DateTime oneWeekAgo = DateTime.Now.AddDays(-7);\\n        var weeklyEntries = entries.FindAll(e => e.Date >= oneWeekAgo);\\n        \\n        if (weeklyEntries.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No mood entries found for the past week.\\\");\\n            return;\\n        }\\n        \\n        double average = weeklyEntries.Average(e => e.Rating);\\n        int bestDay = weeklyEntries.Max(e => e.Rating);\\n        int worstDay = weeklyEntries.Min(e => e.Rating);\\n        \\n        Console.WriteLine(\\\"\\\\nWeekly Mood Summary:\\\");\\n        Console.WriteLine(\\\"--------------------\\\");\\n        Console.WriteLine(\\\"Average mood: \\\" + average.ToString(\\\"0.0\\\"));\\n        Console.WriteLine(\\\"Best day rating: \\\" + bestDay);\\n        Console.WriteLine(\\\"Worst day rating: \\\" + worstDay);\\n        Console.WriteLine(\\\"Total entries: \\\" + weeklyEntries.Count);\\n        Console.WriteLine(\\\"\\\\nRecent entries:\\\");\\n        \\n        foreach (var entry in weeklyEntries.OrderByDescending(e => e.Date).Take(5))\\n        {\\n            Console.WriteLine($\\\"{entry.Date:yyyy-MM-dd}: {entry.Rating} - {entry.Notes}\\\");\\n        }\\n    }\\n}\\n\\npublic class MoodEntry\\n{\\n    public DateTime Date { get; set; }\\n    public int Rating { get; set; }\\n    public string Notes { get; set; }\\n}\",\n  \"name\": \"Mood Tracker\",\n  \"description\": \"Tracks daily mood entries and generates weekly summaries stored in JSON format\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1156,"total_tokens":1676,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}