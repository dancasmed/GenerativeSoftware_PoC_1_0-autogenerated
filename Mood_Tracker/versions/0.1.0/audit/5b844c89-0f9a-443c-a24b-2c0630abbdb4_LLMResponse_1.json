{"id":"f8fe663d-da64-49df-b9d0-b48dfef9a659","object":"chat.completion","created":1743793344,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class MoodTrackerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Mood Tracker\\\";\\n\\n    private string moodDataPath;\\n    private const string MoodDataFileName = \\\"mood_entries.json\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Mood Tracker Module is running...\\\");\\n        \\n        moodDataPath = Path.Combine(dataFolder, MoodDataFileName);\\n        \\n        bool continueRunning = true;\\n        while (continueRunning)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add today's mood\\\");\\n            Console.WriteLine(\\\"2. View weekly summary\\\");\\n            Console.WriteLine(\\\"3. Exit module\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddMoodEntry();\\n                    break;\\n                case \\\"2\\\":\\n                    GenerateWeeklySummary();\\n                    break;\\n                case \\\"3\\\":\\n                    continueRunning = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void AddMoodEntry()\\n    {\\n        Console.WriteLine(\\\"\\\\nRate your mood today (1-5, where 1 is very bad and 5 is excellent):\\\");\\n        if (!int.TryParse(Console.ReadLine(), out int rating) || rating < 1 || rating > 5)\\n        {\\n            Console.WriteLine(\\\"Invalid rating. Please enter a number between 1 and 5.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Add a note about your mood (optional):\\\");\\n        string note = Console.ReadLine();\\n        \\n        MoodEntry newEntry = new MoodEntry\\n        {\\n            Date = DateTime.Today,\\n            Rating = rating,\\n            Note = note\\n        };\\n        \\n        List<MoodEntry> entries = LoadMoodEntries();\\n        entries.Add(newEntry);\\n        SaveMoodEntries(entries);\\n        \\n        Console.WriteLine(\\\"Mood entry saved successfully!\\\");\\n    }\\n    \\n    private void GenerateWeeklySummary()\\n    {\\n        List<MoodEntry> entries = LoadMoodEntries();\\n        DateTime oneWeekAgo = DateTime.Today.AddDays(-7);\\n        \\n        var weeklyEntries = entries.FindAll(e => e.Date >= oneWeekAgo);\\n        \\n        if (weeklyEntries.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No mood entries found for the past week.\\\");\\n            return;\\n        }\\n        \\n        double averageRating = 0;\\n        foreach (var entry in weeklyEntries)\\n        {\\n            averageRating += entry.Rating;\\n        }\\n        averageRating /= weeklyEntries.Count;\\n        \\n        Console.WriteLine(\\\"\\\\nWeekly Mood Summary:\\\");\\n        Console.WriteLine(\\\"------------------------\\\");\\n        Console.WriteLine(\\\"Entries count: \\\" + weeklyEntries.Count);\\n        Console.WriteLine(\\\"Average mood rating: \\\" + averageRating.ToString(\\\"0.0\\\"));\\n        Console.WriteLine(\\\"------------------------\\\");\\n        \\n        foreach (var entry in weeklyEntries)\\n        {\\n            Console.WriteLine(entry.Date.ToString(\\\"yyyy-MM-dd\\\") + \\\": \\\" + entry.Rating + \\\"/5\\\");\\n            if (!string.IsNullOrEmpty(entry.Note))\\n            {\\n                Console.WriteLine(\\\"   Note: \\\" + entry.Note);\\n            }\\n        }\\n    }\\n    \\n    private List<MoodEntry> LoadMoodEntries()\\n    {\\n        if (!File.Exists(moodDataPath))\\n        {\\n            return new List<MoodEntry>();\\n        }\\n        \\n        string json = File.ReadAllText(moodDataPath);\\n        return JsonSerializer.Deserialize<List<MoodEntry>>(json);\\n    }\\n    \\n    private void SaveMoodEntries(List<MoodEntry> entries)\\n    {\\n        string json = JsonSerializer.Serialize(entries);\\n        File.WriteAllText(moodDataPath, json);\\n    }\\n}\\n\\npublic class MoodEntry\\n{\\n    public DateTime Date { get; set; }\\n    public int Rating { get; set; }\\n    public string Note { get; set; }\\n}\",\n  \"name\": \"Mood Tracker\",\n  \"description\": \"Tracks daily mood entries and generates weekly summaries\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1128,"total_tokens":1648,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}