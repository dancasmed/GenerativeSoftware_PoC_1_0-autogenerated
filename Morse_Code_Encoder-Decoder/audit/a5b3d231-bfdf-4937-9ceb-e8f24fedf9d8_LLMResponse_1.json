
{"id":"f93d2c92-1fdf-4433-af7e-eb90fde7577f","object":"chat.completion","created":1744171679,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text;\\n\\npublic class MorseCodeModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Morse Code Encoder/Decoder\\\";\\n\\n    private readonly Dictionary<char, string> _morseCodeMap = new Dictionary<char, string>()\\n    {\\n        {'A', \\\".-\\\"}, {'B', \\\"-...\\\"}, {'C', \\\"-.-.\\\"}, {'D', \\\"-..\\\"}, {'E', \\\".\\\"},\\n        {'F', \\\"..-.\\\"}, {'G', \\\"--.\\\"}, {'H', \\\"....\\\"}, {'I', \\\"..\\\"}, {'J', \\\".---\\\"},\\n        {'K', \\\"-.-\\\"}, {'L', \\\".-..\\\"}, {'M', \\\"--\\\"}, {'N', \\\"-.\\\"}, {'O', \\\"---\\\"},\\n        {'P', \\\".--.\\\"}, {'Q', \\\"--.-\\\"}, {'R', \\\".-.\\\"}, {'S', \\\"...\\\"}, {'T', \\\"-\\\"},\\n        {'U', \\\"..-\\\"}, {'V', \\\"...-\\\"}, {'W', \\\".--\\\"}, {'X', \\\"-..-\\\"}, {'Y', \\\"-.--\\\"},\\n        {'Z', \\\"--..\\\"}, {'0', \\\"-----\\\"}, {'1', \\\".----\\\"}, {'2', \\\"..---\\\"}, {'3', \\\"...--\\\"},\\n        {'4', \\\"....-\\\"}, {'5', \\\".....\\\"}, {'6', \\\"-....\\\"}, {'7', \\\"--...\\\"}, {'8', \\\"---..\\\"},\\n        {'9', \\\"----.\\\"}, {' ', \\\"/\\\"}, {'.', \\\".-.-.-\\\"}, {',', \\\"--..--\\\"}, {'?', \\\"..--..\\\"},\\n        {'!', \\\"-.-.--\\\"}, {'\\\\\\\"', \\\".-..-.\\\"}, {'\\\\'', \\\".----.\\\"}, {'(', \\\"-.--.\\\"}, {')', \\\"-.--.-\\\"},\\n        {'&', \\\".-...\\\"}, {':', \\\"---...\\\"}, {';', \\\"-.-.-.\\\"}, {'=', \\\"-...-\\\"}, {'+', \\\".-.-.\\\"},\\n        {'-', \\\"-....-\\\"}, {'_', \\\"..--.-\\\"}, {'@', \\\".--.-.\\\"}, {'$', \\\"...-..-\\\"}, {'¿', \\\"..-.-\\\"},\\n        {'¡', \\\"--...-\\\"}\\n    };\\n\\n    private readonly Dictionary<string, char> _reverseMorseCodeMap;\\n\\n    public MorseCodeModule()\\n    {\\n        _reverseMorseCodeMap = new Dictionary<string, char>();\\n        foreach (var pair in _morseCodeMap)\\n        {\\n            _reverseMorseCodeMap[pair.Value] = pair.Key;\\n        }\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Morse Code Encoder/Decoder Module\\\");\\n        Console.WriteLine(\\\"--------------------------------\\\");\\n        Console.WriteLine(\\\"Options:\\\");\\n        Console.WriteLine(\\\"1. Encode text to Morse code\\\");\\n        Console.WriteLine(\\\"2. Decode Morse code to text\\\");\\n        Console.WriteLine(\\\"3. Exit\\\");\\n\\n        while (true)\\n        {\\n            Console.Write(\\\"\\\\nSelect an option (1-3): \\\");\\n            var input = Console.ReadLine();\\n\\n            if (string.IsNullOrWhiteSpace(input))\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please try again.\\\");\\n                continue;\\n            }\\n\\n            if (input == \\\"3\\\")\\n            {\\n                Console.WriteLine(\\\"Exiting Morse Code Module...\\\");\\n                return true;\\n            }\\n\\n            if (input == \\\"1\\\")\\n            {\\n                Console.Write(\\\"Enter text to encode: \\\");\\n                var text = Console.ReadLine()?.ToUpper();\\n                if (string.IsNullOrWhiteSpace(text))\\n                {\\n                    Console.WriteLine(\\\"No text provided.\\\");\\n                    continue;\\n                }\\n\\n                try\\n                {\\n                    var morseCode = EncodeToMorse(text);\\n                    Console.WriteLine(\\\"Encoded Morse code: \\\" + morseCode);\\n                    SaveToFile(dataFolder, \\\"encoded.txt\\\", morseCode);\\n                }\\n                catch (Exception ex)\\n                {\\n                    Console.WriteLine(\\\"Error encoding: \\\" + ex.Message);\\n                }\\n            }\\n            else if (input == \\\"2\\\")\\n            {\\n                Console.Write(\\\"Enter Morse code to decode (separate letters with space, words with '/'): \\\");\\n                var morseCode = Console.ReadLine();\\n                if (string.IsNullOrWhiteSpace(morseCode))\\n                {\\n                    Console.WriteLine(\\\"No Morse code provided.\\\");\\n                    continue;\\n                }\\n\\n                try\\n                {\\n                    var text = DecodeFromMorse(morseCode);\\n                    Console.WriteLine(\\\"Decoded text: \\\" + text);\\n                    SaveToFile(dataFolder, \\\"decoded.txt\\\", text);\\n                }\\n                catch (Exception ex)\\n                {\\n                    Console.WriteLine(\\\"Error decoding: \\\" + ex.Message);\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n            }\\n        }\\n    }\\n\\n    private string EncodeToMorse(string text)\\n    {\\n        var result = new StringBuilder();\\n        foreach (char c in text)\\n        {\\n            if (_morseCodeMap.TryGetValue(c, out string morse))\\n            {\\n                result.Append(morse + \\\" \\\");\\n            }\\n            else\\n            {\\n                throw new ArgumentException($\\\"Character '{c}' cannot be encoded to Morse code.\\\");\\n            }\\n        }\\n        return result.ToString().Trim();\\n    }\\n\\n    private string DecodeFromMorse(string morseCode)\\n    {\\n        var words = morseCode.Split(new[] { \\\" / \\\" }, StringSplitOptions.None);\\n        var result = new StringBuilder();\\n\\n        foreach (var word in words)\\n        {\\n            var letters = word.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\\n            foreach (var letter in letters)\\n            {\\n                if (_reverseMorseCodeMap.TryGetValue(letter, out char c))\\n                {\\n                    result.Append(c);\\n                }\\n                else\\n                {\\n                    throw new ArgumentException($\\\"Morse code '{letter}' cannot be decoded to a character.\\\");\\n                }\\n            }\\n            result.Append(' ');\\n        }\\n\\n        return result.ToString().Trim();\\n    }\\n\\n    private void SaveToFile(string dataFolder, string fileName, string content)\\n    {\\n        try\\n        {\\n            if (!Directory.Exists(dataFolder))\\n            {\\n                Directory.CreateDirectory(dataFolder);\\n            }\\n\\n            var filePath = Path.Combine(dataFolder, fileName);\\n            File.WriteAllText(filePath, content);\\n            Console.WriteLine(\\\"Result saved to: \\\" + filePath);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving file: \\\" + ex.Message);\\n        }\\n    }\\n}\",\n  \"name\": \"Morse Code Encoder/Decoder\",\n  \"description\": \"Provides functionality to encode text to Morse code and decode Morse code back to text. Results are saved to JSON files in the specified data folder.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1717,"total_tokens":2236,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":519},"system_fingerprint":"fp_3d5141a69a_prod0225"}