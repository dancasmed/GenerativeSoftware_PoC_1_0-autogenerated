
{"id":"cc0f047a-5edf-4b8c-ad80-678fdbc84ce1","object":"chat.completion","created":1743800527,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text;\\n\\npublic class MorseCodeModule\\n{\\n    public string Name { get; set; } = \\\"Morse Code Encoder/Decoder\\\";\\n\\n    private readonly Dictionary<char, string> _morseCodeMap = new Dictionary<char, string>\\n    {\\n        {'A', \\\".-\\\"}, {'B', \\\"-...\\\"}, {'C', \\\"-.-.\\\"}, {'D', \\\"-..\\\"}, {'E', \\\".\\\"},\\n        {'F', \\\"..-.\\\"}, {'G', \\\"--.\\\"}, {'H', \\\"....\\\"}, {'I', \\\"..\\\"}, {'J', \\\".---\\\"},\\n        {'K', \\\"-.-\\\"}, {'L', \\\".-..\\\"}, {'M', \\\"--\\\"}, {'N', \\\"-.\\\"}, {'O', \\\"---\\\"},\\n        {'P', \\\".--.\\\"}, {'Q', \\\"--.-\\\"}, {'R', \\\".-.\\\"}, {'S', \\\"...\\\"}, {'T', \\\"-\\\"},\\n        {'U', \\\"..-\\\"}, {'V', \\\"...-\\\"}, {'W', \\\".--\\\"}, {'X', \\\"-..-\\\"}, {'Y', \\\"-.--\\\"},\\n        {'Z', \\\"--..\\\"}, {'0', \\\"-----\\\"}, {'1', \\\".----\\\"}, {'2', \\\"..---\\\"}, {'3', \\\"...--\\\"},\\n        {'4', \\\"....-\\\"}, {'5', \\\".....\\\"}, {'6', \\\"-....\\\"}, {'7', \\\"--...\\\"}, {'8', \\\"---..\\\"},\\n        {'9', \\\"----.\\\"}, {' ', \\\"/\\\"}, {'.', \\\".-.-.-\\\"}, {',', \\\"--..--\\\"}, {'?', \\\"..--..\\\"},\\n        {'!', \\\"-.-.--\\\"}, {'\\\\\\\"', \\\".-..-.\\\"}, {'\\\\'', \\\".----.\\\"}, {'(', \\\"-.--.\\\"}, {')', \\\"-.--.-\\\"},\\n        {'&', \\\".-...\\\"}, {':', \\\"---...\\\"}, {';', \\\"-.-.-.\\\"}, {'=', \\\"-...-\\\"}, {'+', \\\".-.-.\\\"},\\n        {'-', \\\"-....-\\\"}, {'_', \\\"..--.-\\\"}, {'$', \\\"...-..-\\\"}, {'@', \\\".--.-.\\\"}, {'/', \\\"-..-.\\\"}\\n    };\\n\\n    private readonly Dictionary<string, char> _reverseMorseCodeMap;\\n\\n    public MorseCodeModule()\\n    {\\n        _reverseMorseCodeMap = new Dictionary<string, char>();\\n        foreach (var pair in _morseCodeMap)\\n        {\\n            _reverseMorseCodeMap[pair.Value] = pair.Key;\\n        }\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Morse Code Encoder/Decoder Module is running\\\");\\n        Console.WriteLine(\\\"Options:\\\");\\n        Console.WriteLine(\\\"1. Encode text to Morse code\\\");\\n        Console.WriteLine(\\\"2. Decode Morse code to text\\\");\\n        Console.WriteLine(\\\"3. Save last operation to file\\\");\\n        Console.WriteLine(\\\"4. Exit module\\\");\\n\\n        string lastResult = string.Empty;\\n        string operationType = string.Empty;\\n\\n        while (true)\\n        {\\n            Console.Write(\\\"Enter your choice (1-4): \\\");\\n            string choice = Console.ReadLine();\\n\\n            switch (choice)\\n            {\\n                case \\\"1\\\":\\n                    Console.Write(\\\"Enter text to encode: \\\");\\n                    string textToEncode = Console.ReadLine().ToUpper();\\n                    lastResult = EncodeToMorse(textToEncode);\\n                    operationType = \\\"Encode\\\";\\n                    Console.WriteLine(\\\"Encoded Morse code: \\\" + lastResult);\\n                    break;\\n\\n                case \\\"2\\\":\\n                    Console.Write(\\\"Enter Morse code to decode (separate letters with space, words with '/'): \\\");\\n                    string morseToDecode = Console.ReadLine();\\n                    lastResult = DecodeFromMorse(morseToDecode);\\n                    operationType = \\\"Decode\\\";\\n                    Console.WriteLine(\\\"Decoded text: \\\" + lastResult);\\n                    break;\\n\\n                case \\\"3\\\":\\n                    if (!string.IsNullOrEmpty(lastResult))\\n                    {\\n                        string fileName = Path.Combine(dataFolder, $\\\"morse_result_{DateTime.Now:yyyyMMddHHmmss}.txt\\\");\\n                        string content = $\\\"{operationType} result: {lastResult}\\\";\\n                        File.WriteAllText(fileName, content);\\n                        Console.WriteLine(\\\"Result saved to \\\" + fileName);\\n                    }\\n                    else\\n                    {\\n                        Console.WriteLine(\\\"No operation to save\\\");\\n                    }\\n                    break;\\n\\n                case \\\"4\\\":\\n                    Console.WriteLine(\\\"Exiting Morse Code Module\\\");\\n                    return true;\\n\\n                default:\\n                    Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n\\n    private string EncodeToMorse(string input)\\n    {\\n        StringBuilder result = new StringBuilder();\\n        foreach (char c in input)\\n        {\\n            if (_morseCodeMap.TryGetValue(c, out string morseChar))\\n            {\\n                result.Append(morseChar + \\\" \\\");\\n            }\\n            else\\n            {\\n                result.Append(\\\"? \\\");\\n            }\\n        }\\n        return result.ToString().Trim();\\n    }\\n\\n    private string DecodeFromMorse(string input)\\n    {\\n        StringBuilder result = new StringBuilder();\\n        string[] words = input.Split(new[] { \\\" / \\\" }, StringSplitOptions.None);\\n\\n        foreach (string word in words)\\n        {\\n            string[] letters = word.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\\n            foreach (string letter in letters)\\n            {\\n                if (_reverseMorseCodeMap.TryGetValue(letter, out char decodedChar))\\n                {\\n                    result.Append(decodedChar);\\n                }\\n                else\\n                {\\n                    result.Append('?');\\n                }\\n            }\\n            result.Append(' ');\\n        }\\n\\n        return result.ToString().Trim();\\n    }\\n}\",\n  \"name\": \"Morse Code Encoder/Decoder\",\n  \"description\": \"A module that provides functionality to encode text to Morse code and decode Morse code back to text. Results can be saved to JSON files.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1511,"total_tokens":2030,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}