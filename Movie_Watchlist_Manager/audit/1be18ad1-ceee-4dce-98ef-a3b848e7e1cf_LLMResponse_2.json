{"id":"605550f3-bc12-49cd-be21-64fe7d6bb9a3","object":"chat.completion","created":1743789832,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class MovieWatchlistManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Movie Watchlist Manager\\\";\\n\\n    private string _dataFilePath;\\n    private List<Movie> _movies;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Movie Watchlist Manager is running...\\\");\\n        Console.WriteLine(\\\"Loading watchlist data...\\\");\\n\\n        _dataFilePath = Path.Combine(dataFolder, \\\"watchlist.json\\\");\\n        _movies = LoadMovies();\\n\\n        bool continueRunning = true;\\n        while (continueRunning)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddMovie();\\n                    break;\\n                case \\\"2\\\":\\n                    ListMovies();\\n                    break;\\n                case \\\"3\\\":\\n                    FilterByGenre();\\n                    break;\\n                case \\\"4\\\":\\n                    FilterByRating();\\n                    break;\\n                case \\\"5\\\":\\n                    continueRunning = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveMovies();\\n        Console.WriteLine(\\\"Watchlist data saved. Exiting...\\\");\\n        return true;\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nMovie Watchlist Manager\\\");\\n        Console.WriteLine(\\\"1. Add a movie\\\");\\n        Console.WriteLine(\\\"2. List all movies\\\");\\n        Console.WriteLine(\\\"3. Filter by genre\\\");\\n        Console.WriteLine(\\\"4. Filter by rating\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Choose an option: \\\");\\n    }\\n\\n    private void AddMovie()\\n    {\\n        Console.Write(\\\"Enter movie title: \\\");\\n        string title = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter genre: \\\");\\n        string genre = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter rating (1-5): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int rating) || rating < 1 || rating > 5)\\n        {\\n            Console.WriteLine(\\\"Invalid rating. Must be between 1 and 5.\\\");\\n            return;\\n        }\\n\\n        _movies.Add(new Movie { Title = title, Genre = genre, Rating = rating });\\n        Console.WriteLine(\\\"Movie added successfully.\\\");\\n    }\\n\\n    private void ListMovies()\\n    {\\n        if (_movies.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No movies in the watchlist.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nCurrent Watchlist:\\\");\\n        foreach (var movie in _movies)\\n        {\\n            Console.WriteLine($\\\"{movie.Title} ({movie.Genre}) - Rating: {movie.Rating}/5\\\");\\n        }\\n    }\\n\\n    private void FilterByGenre()\\n    {\\n        Console.Write(\\\"Enter genre to filter: \\\");\\n        string genre = Console.ReadLine();\\n\\n        var filtered = _movies.FindAll(m => m.Genre.Equals(genre, StringComparison.OrdinalIgnoreCase));\\n        if (filtered.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No movies found with that genre.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine($\\\"\\\\nMovies in genre '{genre}':\\\");\\n        foreach (var movie in filtered)\\n        {\\n            Console.WriteLine($\\\"{movie.Title} - Rating: {movie.Rating}/5\\\");\\n        }\\n    }\\n\\n    private void FilterByRating()\\n    {\\n        Console.Write(\\\"Enter minimum rating (1-5): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int minRating) || minRating < 1 || minRating > 5)\\n        {\\n            Console.WriteLine(\\\"Invalid rating. Must be between 1 and 5.\\\");\\n            return;\\n        }\\n\\n        var filtered = _movies.FindAll(m => m.Rating >= minRating);\\n        if (filtered.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No movies found with that minimum rating.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine($\\\"\\\\nMovies with rating {minRating} or higher:\\\");\\n        foreach (var movie in filtered)\\n        {\\n            Console.WriteLine($\\\"{movie.Title} ({movie.Genre}) - Rating: {movie.Rating}/5\\\");\\n        }\\n    }\\n\\n    private List<Movie> LoadMovies()\\n    {\\n        if (!File.Exists(_dataFilePath))\\n        {\\n            return new List<Movie>();\\n        }\\n\\n        string json = File.ReadAllText(_dataFilePath);\\n        return JsonSerializer.Deserialize<List<Movie>>(json) ?? new List<Movie>();\\n    }\\n\\n    private void SaveMovies()\\n    {\\n        string json = JsonSerializer.Serialize(_movies);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n\\n    private class Movie\\n    {\\n        public string Title { get; set; }\\n        public string Genre { get; set; }\\n        public int Rating { get; set; }\\n    }\\n}\",\n  \"name\": \"Movie Watchlist Manager\",\n  \"description\": \"A module for managing a movie watchlist with genres and ratings. Allows adding, listing, and filtering movies by genre or rating.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1335,"total_tokens":1856,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}