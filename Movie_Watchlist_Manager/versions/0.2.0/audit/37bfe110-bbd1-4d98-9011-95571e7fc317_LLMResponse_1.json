
{"id":"2a369885-b594-401d-bffe-4d91ada90533","object":"chat.completion","created":1743798430,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class MovieWatchlistModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Movie Watchlist Manager\\\";\\n\\n    private string _dataFilePath;\\n    private List<Movie> _movies;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"watchlist.json\\\");\\n        _movies = LoadMovies();\\n\\n        Console.WriteLine(\\\"Movie Watchlist Manager is running.\\\");\\n        Console.WriteLine(\\\"Type 'help' for available commands.\\\");\\n\\n        while (true)\\n        {\\n            Console.Write(\\\"> \\\");\\n            string input = Console.ReadLine().Trim().ToLower();\\n\\n            if (input == \\\"exit\\\")\\n            {\\n                SaveMovies();\\n                return true;\\n            }\\n\\n            ProcessCommand(input);\\n        }\\n    }\\n\\n    private void ProcessCommand(string command)\\n    {\\n        string[] parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);\\n        if (parts.Length == 0) return;\\n\\n        switch (parts[0])\\n        {\\n            case \\\"help\\\":\\n                ShowHelp();\\n                break;\\n            case \\\"add\\\":\\n                if (parts.Length > 1)\\n                    AddMovie(string.Join(' ', parts[1..]));\\n                else\\n                    Console.WriteLine(\\\"Please specify a movie title.\\\");\\n                break;\\n            case \\\"list\\\":\\n                ListMovies();\\n                break;\\n            case \\\"watch\\\":\\n                if (parts.Length > 1 && int.TryParse(parts[1], out int watchId))\\n                    MarkAsWatched(watchId);\\n                else\\n                    Console.WriteLine(\\\"Please specify a valid movie ID.\\\");\\n                break;\\n            case \\\"rate\\\":\\n                if (parts.Length > 2 && int.TryParse(parts[1], out int rateId) && int.TryParse(parts[2], out int rating))\\n                    RateMovie(rateId, rating);\\n                else\\n                    Console.WriteLine(\\\"Please specify valid movie ID and rating (1-5).\\\");\\n                break;\\n            case \\\"delete\\\":\\n                if (parts.Length > 1 && int.TryParse(parts[1], out int deleteId))\\n                    DeleteMovie(deleteId);\\n                else\\n                    Console.WriteLine(\\\"Please specify a valid movie ID.\\\");\\n                break;\\n            default:\\n                Console.WriteLine(\\\"Unknown command. Type 'help' for available commands.\\\");\\n                break;\\n        }\\n    }\\n\\n    private void ShowHelp()\\n    {\\n        Console.WriteLine(\\\"Available commands:\\\");\\n        Console.WriteLine(\\\"  add <title> - Add a new movie to watchlist\\\");\\n        Console.WriteLine(\\\"  list - Show all movies in watchlist\\\");\\n        Console.WriteLine(\\\"  watch <id> - Mark movie as watched\\\");\\n        Console.WriteLine(\\\"  rate <id> <rating> - Rate movie (1-5)\\\");\\n        Console.WriteLine(\\\"  delete <id> - Remove movie from watchlist\\\");\\n        Console.WriteLine(\\\"  exit - Save and exit\\\");\\n    }\\n\\n    private void AddMovie(string title)\\n    {\\n        _movies.Add(new Movie\\n        {\\n            Id = _movies.Count > 0 ? _movies.Max(m => m.Id) + 1 : 1,\\n            Title = title,\\n            Watched = false,\\n            Rating = 0\\n        });\\n        Console.WriteLine(\\\"Movie added successfully.\\\");\\n    }\\n\\n    private void ListMovies()\\n    {\\n        if (_movies.Count == 0)\\n        {\\n            Console.WriteLine(\\\"Your watchlist is empty.\\\");\\n            return;\\n        }\\n\\n        foreach (var movie in _movies)\\n        {\\n            string watchedStatus = movie.Watched ? \\\"[Watched]\\\" : \\\"[Not Watched]\\\";\\n            string rating = movie.Rating > 0 ? $\\\"Rating: {movie.Rating}/5\\\" : \\\"Not rated\\\";\\n            Console.WriteLine($\\\"{movie.Id}. {movie.Title} {watchedStatus} {rating}\\\");\\n        }\\n    }\\n\\n    private void MarkAsWatched(int id)\\n    {\\n        var movie = _movies.FirstOrDefault(m => m.Id == id);\\n        if (movie != null)\\n        {\\n            movie.Watched = true;\\n            Console.WriteLine($\\\"Marked '{movie.Title}' as watched.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Movie not found.\\\");\\n        }\\n    }\\n\\n    private void RateMovie(int id, int rating)\\n    {\\n        if (rating < 1 || rating > 5)\\n        {\\n            Console.WriteLine(\\\"Rating must be between 1 and 5.\\\");\\n            return;\\n        }\\n\\n        var movie = _movies.FirstOrDefault(m => m.Id == id);\\n        if (movie != null)\\n        {\\n            movie.Rating = rating;\\n            Console.WriteLine($\\\"Rated '{movie.Title}' with {rating} stars.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Movie not found.\\\");\\n        }\\n    }\\n\\n    private void DeleteMovie(int id)\\n    {\\n        var movie = _movies.FirstOrDefault(m => m.Id == id);\\n        if (movie != null)\\n        {\\n            _movies.Remove(movie);\\n            Console.WriteLine($\\\"Removed '{movie.Title}' from watchlist.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Movie not found.\\\");\\n        }\\n    }\\n\\n    private List<Movie> LoadMovies()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                return JsonSerializer.Deserialize<List<Movie>>(json) ?? new List<Movie>();\\n            }\\n            catch\\n            {\\n                return new List<Movie>();\\n            }\\n        }\\n        return new List<Movie>();\\n    }\\n\\n    private void SaveMovies()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_movies);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving watchlist: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class Movie\\n{\\n    public int Id { get; set; }\\n    public string Title { get; set; }\\n    public bool Watched { get; set; }\\n    public int Rating { get; set; }\\n}\",\n  \"name\": \"Movie Watchlist Manager\",\n  \"description\": \"A module to manage your movie watchlist, allowing you to add movies, mark them as watched, rate them, and remove them from the list.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"7.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":525,"completion_tokens":1660,"total_tokens":2185,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":13},"system_fingerprint":"fp_3d5141a69a_prod0225"}