
{"id":"04c54f28-516c-4200-b2ec-3fb45eee9b4b","object":"chat.completion","created":1744184224,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class NovelStructureAnalyzer : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Novel Structure Analyzer\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Novel Structure Analyzer module is running...\\\");\\n        \\n        try\\n        {\\n            string inputFile = Path.Combine(dataFolder, \\\"novel_text.txt\\\");\\n            string outputFile = Path.Combine(dataFolder, \\\"analysis_results.json\\\");\\n\\n            if (!File.Exists(inputFile))\\n            {\\n                Console.WriteLine(\\\"Error: Input file 'novel_text.txt' not found in data folder.\\\");\\n                return false;\\n            }\\n\\n            string novelText = File.ReadAllText(inputFile);\\n            var analysis = AnalyzeNovelStructure(novelText);\\n\\n            string jsonResult = JsonSerializer.Serialize(analysis, new JsonSerializerOptions { WriteIndented = true });\\n            File.WriteAllText(outputFile, jsonResult);\\n\\n            Console.WriteLine(\\\"Analysis completed successfully. Results saved to 'analysis_results.json'.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error during analysis: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private NovelAnalysis AnalyzeNovelStructure(string text)\\n    {\\n        var analysis = new NovelAnalysis();\\n        \\n        // Basic statistics\\n        analysis.TotalCharacters = text.Length;\\n        analysis.TotalWords = CountWords(text);\\n        analysis.TotalParagraphs = CountParagraphs(text);\\n        \\n        // Dialogue analysis\\n        analysis.DialogueCount = CountDialogues(text);\\n        analysis.DialoguePercentage = (double)analysis.DialogueCount / analysis.TotalParagraphs * 100;\\n        \\n        // Chapter detection\\n        analysis.Chapters = DetectChapters(text);\\n        \\n        // Sentence analysis\\n        var sentences = SplitSentences(text);\\n        analysis.AverageSentenceLength = sentences.Count > 0 ? \\n            sentences.Average(s => s.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Length) : 0;\\n        \\n        return analysis;\\n    }\\n\\n    private int CountWords(string text)\\n    {\\n        if (string.IsNullOrWhiteSpace(text))\\n            return 0;\\n            \\n        return text.Split(new[] { ' ', '\\\\t', '\\\\n', '\\\\r' }, StringSplitOptions.RemoveEmptyEntries).Length;\\n    }\\n\\n    private int CountParagraphs(string text)\\n    {\\n        if (string.IsNullOrWhiteSpace(text))\\n            return 0;\\n            \\n        return text.Split(new[] { \\\"\\\\n\\\\n\\\" }, StringSplitOptions.RemoveEmptyEntries).Length;\\n    }\\n\\n    private int CountDialogues(string text)\\n    {\\n        if (string.IsNullOrWhiteSpace(text))\\n            return 0;\\n            \\n        int count = 0;\\n        bool inQuotes = false;\\n        \\n        foreach (char c in text)\\n        {\\n            if (c == '\\\"')\\n            {\\n                inQuotes = !inQuotes;\\n                if (!inQuotes) count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n\\n    private List<string> DetectChapters(string text)\\n    {\\n        var chapters = new List<string>();\\n        var lines = text.Split(new[] { '\\\\n' }, StringSplitOptions.RemoveEmptyEntries);\\n        \\n        foreach (var line in lines)\\n        {\\n            if (line.Trim().StartsWith(\\\"Chapter \\\", StringComparison.OrdinalIgnoreCase) ||\\n                line.Trim().StartsWith(\\\"CHAPTER \\\", StringComparison.OrdinalIgnoreCase))\\n            {\\n                chapters.Add(line.Trim());\\n            }\\n        }\\n        \\n        return chapters;\\n    }\\n\\n    private List<string> SplitSentences(string text)\\n    {\\n        var sentences = new List<string>();\\n        if (string.IsNullOrWhiteSpace(text))\\n            return sentences;\\n            \\n        int start = 0;\\n        for (int i = 0; i < text.Length; i++)\\n        {\\n            if (text[i] == '.' || text[i] == '!' || text[i] == '?')\\n            {\\n                if (i + 1 >= text.Length || char.IsWhiteSpace(text[i + 1]) || char.IsUpper(text[i + 1]))\\n                {\\n                    string sentence = text.Substring(start, i - start + 1).Trim();\\n                    if (!string.IsNullOrEmpty(sentence))\\n                        sentences.Add(sentence);\\n                    start = i + 1;\\n                }\\n            }\\n        }\\n        \\n        // Add remaining text if any\\n        if (start < text.Length)\\n        {\\n            string remaining = text.Substring(start).Trim();\\n            if (!string.IsNullOrEmpty(remaining))\\n                sentences.Add(remaining);\\n        }\\n        \\n        return sentences;\\n    }\\n}\\n\\npublic class NovelAnalysis\\n{\\n    public int TotalCharacters { get; set; }\\n    public int TotalWords { get; set; }\\n    public int TotalParagraphs { get; set; }\\n    public int DialogueCount { get; set; }\\n    public double DialoguePercentage { get; set; }\\n    public List<string> Chapters { get; set; } = new List<string>();\\n    public double AverageSentenceLength { get; set; }\\n}\",\n  \"name\": \"Novel Structure Analyzer\",\n  \"description\": \"A tool that analyzes the structure of novels or short stories, providing statistics on word count, paragraph count, dialogue frequency, chapter detection, and sentence analysis.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":525,"completion_tokens":1352,"total_tokens":1877,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":13},"system_fingerprint":"fp_3d5141a69a_prod0225"}