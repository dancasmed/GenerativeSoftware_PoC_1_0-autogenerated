
{"id":"46be778a-373d-4e90-8f76-556131f83077","object":"chat.completion","created":1744184996,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class OnlineLearningPlatform : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Online Learning Platform\\\";\\n\\n    private List<Course> courses;\\n    private List<Quiz> quizzes;\\n    private string coursesFilePath;\\n    private string quizzesFilePath;\\n\\n    public OnlineLearningPlatform()\\n    {\\n        courses = new List<Course>();\\n        quizzes = new List<Quiz>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Online Learning Platform...\\\");\\n\\n        coursesFilePath = Path.Combine(dataFolder, \\\"courses.json\\\");\\n        quizzesFilePath = Path.Combine(dataFolder, \\\"quizzes.json\\\");\\n\\n        LoadData();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    CreateCourse();\\n                    break;\\n                case \\\"2\\\":\\n                    CreateQuiz();\\n                    break;\\n                case \\\"3\\\":\\n                    ListCourses();\\n                    break;\\n                case \\\"4\\\":\\n                    ListQuizzes();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveData();\\n        Console.WriteLine(\\\"Online Learning Platform session ended.\\\");\\n        return true;\\n    }\\n\\n    private void LoadData()\\n    {\\n        try\\n        {\\n            if (File.Exists(coursesFilePath))\\n            {\\n                string json = File.ReadAllText(coursesFilePath);\\n                courses = JsonSerializer.Deserialize<List<Course>>(json);\\n            }\\n\\n            if (File.Exists(quizzesFilePath))\\n            {\\n                string json = File.ReadAllText(quizzesFilePath);\\n                quizzes = JsonSerializer.Deserialize<List<Quiz>>(json);\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void SaveData()\\n    {\\n        try\\n        {\\n            Directory.CreateDirectory(Path.GetDirectoryName(coursesFilePath));\\n            string coursesJson = JsonSerializer.Serialize(courses);\\n            File.WriteAllText(coursesFilePath, coursesJson);\\n\\n            string quizzesJson = JsonSerializer.Serialize(quizzes);\\n            File.WriteAllText(quizzesFilePath, quizzesJson);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nOnline Learning Platform Menu:\\\");\\n        Console.WriteLine(\\\"1. Create a new course\\\");\\n        Console.WriteLine(\\\"2. Create a new quiz\\\");\\n        Console.WriteLine(\\\"3. List all courses\\\");\\n        Console.WriteLine(\\\"4. List all quizzes\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void CreateCourse()\\n    {\\n        Console.Write(\\\"Enter course title: \\\");\\n        string title = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter course description: \\\");\\n        string description = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter instructor name: \\\");\\n        string instructor = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter course duration (hours): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int duration))\\n        {\\n            var course = new Course\\n            {\\n                Id = Guid.NewGuid().ToString(),\\n                Title = title,\\n                Description = description,\\n                Instructor = instructor,\\n                DurationHours = duration\\n            };\\n\\n            courses.Add(course);\\n            Console.WriteLine(\\\"Course created successfully!\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid duration. Please enter a valid number.\\\");\\n        }\\n    }\\n\\n    private void CreateQuiz()\\n    {\\n        Console.Write(\\\"Enter quiz title: \\\");\\n        string title = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter course ID this quiz belongs to: \\\");\\n        string courseId = Console.ReadLine();\\n\\n        var quiz = new Quiz\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Title = title,\\n            CourseId = courseId,\\n            Questions = new List<Question>()\\n        };\\n\\n        bool addingQuestions = true;\\n        while (addingQuestions)\\n        {\\n            Console.Write(\\\"Add a question (Y/N)? \\\");\\n            if (Console.ReadLine().ToUpper() != \\\"Y\\\")\\n            {\\n                addingQuestions = false;\\n                continue;\\n            }\\n\\n            Console.Write(\\\"Enter question text: \\\");\\n            string questionText = Console.ReadLine();\\n\\n            var question = new Question\\n            {\\n                Text = questionText,\\n                Options = new List<string>(),\\n                CorrectAnswerIndex = 0\\n            };\\n\\n            Console.WriteLine(\\\"Enter options (enter 'done' when finished):\\\");\\n            string option;\\n            int optionCount = 0;\\n            do\\n            {\\n                Console.Write(\\\"Option \\\" + (optionCount + 1) + \\\": \\\");\\n                option = Console.ReadLine();\\n                if (option.ToLower() != \\\"done\\\" && !string.IsNullOrWhiteSpace(option))\\n                {\\n                    question.Options.Add(option);\\n                    optionCount++;\\n                }\\n            } while (option.ToLower() != \\\"done\\\" && optionCount < 10);\\n\\n            if (question.Options.Count > 0)\\n            {\\n                Console.Write(\\\"Enter the index of the correct answer (1-\\\" + question.Options.Count + \\\"): \\\");\\n                if (int.TryParse(Console.ReadLine(), out int correctIndex) && correctIndex > 0 && correctIndex <= question.Options.Count)\\n                {\\n                    question.CorrectAnswerIndex = correctIndex - 1;\\n                    quiz.Questions.Add(question);\\n                    Console.WriteLine(\\\"Question added successfully!\\\");\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid correct answer index. Question not added.\\\");\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"No options added. Question not added.\\\");\\n            }\\n        }\\n\\n        quizzes.Add(quiz);\\n        Console.WriteLine(\\\"Quiz created successfully!\\\");\\n    }\\n\\n    private void ListCourses()\\n    {\\n        Console.WriteLine(\\\"\\\\nAvailable Courses:\\\");\\n        if (courses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No courses available.\\\");\\n            return;\\n        }\\n\\n        foreach (var course in courses)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + course.Id);\\n            Console.WriteLine(\\\"Title: \\\" + course.Title);\\n            Console.WriteLine(\\\"Description: \\\" + course.Description);\\n            Console.WriteLine(\\\"Instructor: \\\" + course.Instructor);\\n            Console.WriteLine(\\\"Duration: \\\" + course.DurationHours + \\\" hours\\\");\\n            Console.WriteLine();\\n        }\\n    }\\n\\n    private void ListQuizzes()\\n    {\\n        Console.WriteLine(\\\"\\\\nAvailable Quizzes:\\\");\\n        if (quizzes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No quizzes available.\\\");\\n            return;\\n        }\\n\\n        foreach (var quiz in quizzes)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + quiz.Id);\\n            Console.WriteLine(\\\"Title: \\\" + quiz.Title);\\n            Console.WriteLine(\\\"Course ID: \\\" + quiz.CourseId);\\n            Console.WriteLine(\\\"Questions: \\\" + quiz.Questions.Count);\\n            Console.WriteLine();\\n        }\\n    }\\n}\\n\\npublic class Course\\n{\\n    public string Id { get; set; }\\n    public string Title { get; set; }\\n    public string Description { get; set; }\\n    public string Instructor { get; set; }\\n    public int DurationHours { get; set; }\\n}\\n\\npublic class Quiz\\n{\\n    public string Id { get; set; }\\n    public string Title { get; set; }\\n    public string CourseId { get; set; }\\n    public List<Question> Questions { get; set; }\\n}\\n\\npublic class Question\\n{\\n    public string Text { get; set; }\\n    public List<string> Options { get; set; }\\n    public int CorrectAnswerIndex { get; set; }\\n}\",\n  \"name\": \"Online Learning Platform\",\n  \"description\": \"A basic online learning platform simulation with courses and quizzes management\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":2092,"total_tokens":2618,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":14},"system_fingerprint":"fp_3d5141a69a_prod0225"}