{
  "choices": [
    {
      "message": {
        "content": "\u0060\u0060\u0060json\n{\n  \u0022isFeatureImplemented\u0022: false,\n  \u0022updatedSourceCodeFiles\u0022: [\n    {\n      \u0022filename\u0022: \u0022Module.cs\u0022,\n      \u0022source_code\u0022: \u0022using SelfEvolvingSoftware.Interfaces;\\nusing System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Security.Cryptography;\\nusing System.Text;\\nusing System.Text.Json;\\n\\npublic class PasswordGeneratorModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\u0022Password Generator Module\\\u0022;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\u0022Starting Password Generator Module...\\\u0022);\\n\\n        try\\n        {\\n            bool exitRequested = false;\\n            while (!exitRequested)\\n            {\\n                Console.WriteLine(\\\u0022\\\\nMain Menu:\\\u0022);\\n                Console.WriteLine(\\\u00221. Generate New Password\\\u0022);\\n                Console.WriteLine(\\\u00222. Exit\\\u0022);\\n                Console.Write(\\\u0022Select an option: \\\u0022);\\n                \\n                var input = Console.ReadLine()?.Trim();\\n                switch (input)\\n                {\\n                    case \\\u00221\\\u0022:\\n                        GenerateAndSavePassword(dataFolder);\\n                        break;\\n                    case \\\u00222\\\u0022:\\n                        exitRequested = true;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\u0022Invalid option. Please try again.\\\u0022);\\n                        break;\\n                }\\n            }\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\u0022Error: \\\u0022 \u002B ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void GenerateAndSavePassword(string dataFolder)\\n    {\\n        bool validPassword = false;\\n        while (!validPassword)\\n        {\\n            var criteria = GetPasswordCriteria();\\n            var password = GenerateSecurePassword(criteria);\\n            var strength = CalculatePasswordStrength(password, criteria);\\n\\n            if (strength == \\\u0022Weak\\\u0022)\\n            {\\n                Console.WriteLine(\\\u0022\\\\nWarning: Generated password is too weak!\\\u0022);\\n                Console.WriteLine(\\\u0022Password: \\\u0022 \u002B password);\\n                Console.WriteLine(\\\u0022Strength: \\\u0022 \u002B strength);\\n                Console.Write(\\\u0022Generate again with stronger criteria? (Y/N): \\\u0022);\\n                var response = Console.ReadLine()?.Trim().ToUpper();\\n                if (response != \\\u0022Y\\\u0022) return;\\n            }\\n            else\\n            {\\n                SavePasswordResult(dataFolder, new GeneratedPassword \\n                { \\n                    password = password, \\n                    strength = strength, \\n                    timestamp = DateTime.UtcNow \\n                });\\n\\n                Console.WriteLine(\\\u0022\\\\nGenerated Password: \\\u0022 \u002B password);\\n                Console.WriteLine(\\\u0022Password Strength: \\\u0022 \u002B strength);\\n                validPassword = true;\\n            }\\n        }\\n    }\\n\\n    private PasswordCriteria GetPasswordCriteria()\\n    {\\n        return new PasswordCriteria\\n        {\\n            length = GetValidatedInt(\\\u0022Enter password length (8-64): \\\u0022, 8, 64),\\n            include_special_chars = GetYesNoInput(\\\u0022Include special characters? (Y/N): \\\u0022),\\n            include_numbers = GetYesNoInput(\\\u0022Include numbers? (Y/N): \\\u0022),\\n            include_uppercase = GetYesNoInput(\\\u0022Include uppercase letters? (Y/N): \\\u0022),\\n            include_lowercase = GetYesNoInput(\\\u0022Include lowercase letters? (Y/N): \\\u0022)\\n        };\\n    }\\n\\n    private int GetValidatedInt(string prompt, int min, int max)\\n    {\\n        int result;\\n        do\\n        {\\n            Console.Write(prompt);\\n        } while (!int.TryParse(Console.ReadLine(), out result) || result \u003C min || result \u003E max);\\n        return result;\\n    }\\n\\n    private bool GetYesNoInput(string prompt)\\n    {\\n        Console.Write(prompt);\\n        return Console.ReadLine().Trim().ToUpper() == \\\u0022Y\\\u0022;\\n    }\\n\\n    private string GenerateSecurePassword(PasswordCriteria criteria)\\n    {\\n        var charPool = new StringBuilder();\\n        var mandatoryChars = new List\u003Cchar\u003E();\\n\\n        if (criteria.include_lowercase)\\n        {\\n            charPool.Append(\\\u0022abcdefghijklmnopqrstuvwxyz\\\u0022);\\n            mandatoryChars.Add(GetRandomChar(\\\u0022abcdefghijklmnopqrstuvwxyz\\\u0022));\\n        }\\n        if (criteria.include_uppercase)\\n        {\\n            charPool.Append(\\\u0022ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\u0022);\\n            mandatoryChars.Add(GetRandomChar(\\\u0022ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\u0022));\\n        }\\n        if (criteria.include_numbers)\\n        {\\n            charPool.Append(\\\u00220123456789\\\u0022);\\n            mandatoryChars.Add(GetRandomChar(\\\u00220123456789\\\u0022));\\n        }\\n        if (criteria.include_special_chars)\\n        {\\n            charPool.Append(\\\u0022!@#$%^\u0026*()-_=\u002B[]{};:\u0027\\\\\\\u0022,.\u003C\u003E/?\\\u0022);\\n            mandatoryChars.Add(GetRandomChar(\\\u0022!@#$%^\u0026*()-_=\u002B[]{};:\u0027\\\\\\\u0022,.\u003C\u003E/?\\\u0022));\\n        }\\n\\n        if (charPool.Length == 0)\\n            throw new InvalidOperationException(\\\u0022At least one character set must be selected\\\u0022);\\n\\n        var remainingLength = criteria.length - mandatoryChars.Count;\\n        var passwordChars = new List\u003Cchar\u003E(mandatoryChars);\\n\\n        for (int i = 0; i \u003C remainingLength; i\u002B\u002B)\\n            passwordChars.Add(GetRandomChar(charPool.ToString()));\\n\\n        Shuffle(passwordChars);\\n        return new string(passwordChars.ToArray());\\n    }\\n\\n    private char GetRandomChar(string characters)\\n    {\\n        using var rng = RandomNumberGenerator.Create();\\n        var data = new byte[4];\\n        rng.GetBytes(data);\\n        var randomValue = BitConverter.ToUInt32(data, 0);\\n        return characters[(int)(randomValue % (uint)characters.Length)];\\n    }\\n\\n    private void Shuffle\u003CT\u003E(IList\u003CT\u003E list)\\n    {\\n        using var rng = RandomNumberGenerator.Create();\\n        int n = list.Count;\\n        while (n \u003E 1)\\n        {\\n            byte[] box = new byte[4];\\n            do rng.GetBytes(box);\\n            while (!(BitConverter.ToUInt32(box, 0) \u003C n * (uint.MaxValue / n)));\\n            int k = (int)(BitConverter.ToUInt32(box, 0) % n);\\n            n--;\\n            T value = list[k];\\n            list[k] = list[n];\\n            list[n] = value;\\n        }\\n    }\\n\\n    private string CalculatePasswordStrength(string password, PasswordCriteria criteria)\\n    {\\n        int complexityFactors = 0;\\n        if (criteria.include_lowercase) complexityFactors\u002B\u002B;\\n        if (criteria.include_uppercase) complexityFactors\u002B\u002B;\\n        if (criteria.include_numbers) complexityFactors\u002B\u002B;\\n        if (criteria.include_special_chars) complexityFactors\u002B\u002B;\\n\\n        return password.Length switch\\n        {\\n            \u003E= 16 when complexityFactors \u003E= 4 =\u003E \\\u0022Very Strong\\\u0022,\\n            \u003E= 12 when complexityFactors \u003E= 3 =\u003E \\\u0022Strong\\\u0022,\\n            \u003E= 8 when complexityFactors \u003E= 2 =\u003E \\\u0022Medium\\\u0022,\\n            _ =\u003E \\\u0022Weak\\\u0022\\n        };\\n    }\\n\\n    private void SavePasswordResult(string dataFolder, GeneratedPassword result)\\n    {\\n        Directory.CreateDirectory(dataFolder);\\n        var historyFile = Path.Combine(dataFolder, \\\u0022password_history.json\\\u0022);\\n        \\n        var history = File.Exists(historyFile)\\n            ? JsonSerializer.Deserialize\u003CPasswordHistory\u003E(File.ReadAllText(historyFile))\\n            : new PasswordHistory { passwords = new List\u003CGeneratedPassword\u003E() };\\n\\n        history.passwords.Add(result);\\n        File.WriteAllText(historyFile, JsonSerializer.Serialize(history, new JsonSerializerOptions { WriteIndented = true }));\\n    }\\n}\\n\\npublic class PasswordCriteria\\n{\\n    public int length { get; set; }\\n    public bool include_special_chars { get; set; }\\n    public bool include_numbers { get; set; }\\n    public bool include_uppercase { get; set; }\\n    public bool include_lowercase { get; set; }\\n}\\n\\npublic class GeneratedPassword\\n{\\n    public string password { get; set; }\\n    public string strength { get; set; }\\n    public DateTime timestamp { get; set; }\\n}\\n\\npublic class PasswordHistory\\n{\\n    public List\u003CGeneratedPassword\u003E passwords { get; set; } = new List\u003CGeneratedPassword\u003E();\\n    public string user_id { get; set; } = \\\u0022system\\\u0022;\\n}\u0022\n    }\n  ],\n  \u0022required_nugets\u0022: []\n}\n\u0060\u0060\u0060"
      }
    }
  ]
}