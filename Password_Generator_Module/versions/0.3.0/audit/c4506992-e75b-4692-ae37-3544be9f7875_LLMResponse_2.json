{"id":"44269f7d-d4c9-47e7-acb9-de7e5e875238","object":"chat.completion","created":1743796111,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text;\\nusing System.Text.Json;\\n\\npublic class PasswordGeneratorModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Password Generator Module\\\";\\n    \\n    private readonly string[] adjectives = \\n    {\\n        \\\"happy\\\", \\\"sunny\\\", \\\"brave\\\", \\\"quick\\\", \\\"lucky\\\", \\\"gentle\\\", \\\"calm\\\", \\\"bright\\\", \\\"clever\\\", \\\"fierce\\\"\\n    };\\n    \\n    private readonly string[] nouns = \\n    {\\n        \\\"dog\\\", \\\"cat\\\", \\\"bird\\\", \\\"tree\\\", \\\"moon\\\", \\\"star\\\", \\\"river\\\", \\\"mountain\\\", \\\"ocean\\\", \\\"flower\\\"\\n    };\\n    \\n    private readonly string[] separators = \\n    {\\n        \\\"!\\\", \\\"@\\\", \\\"#\\\", \\\"$\\\", \\\"%\\\", \\\"^\\\", \\\"&\\\", \\\"*\\\", \\\"-\\\", \\\"_\\\", \\\"+\\\", \\\"=\\\"\\n    };\\n    \\n    private readonly Random random = new Random();\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Password Generator Module is running...\\\");\\n        \\n        try\\n        {\\n            string configPath = Path.Combine(dataFolder, \\\"password_config.json\\\");\\n            PasswordConfig config = LoadConfig(configPath);\\n            \\n            string password = GenerateMemorablePassword(config);\\n            Console.WriteLine(\\\"Generated Password: \\\" + password);\\n            \\n            SavePasswordHistory(dataFolder, password);\\n            \\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private PasswordConfig LoadConfig(string configPath)\\n    {\\n        if (File.Exists(configPath))\\n        {\\n            string json = File.ReadAllText(configPath);\\n            return JsonSerializer.Deserialize<PasswordConfig>(json);\\n        }\\n        \\n        return new PasswordConfig\\n        {\\n            IncludeNumbers = true,\\n            IncludeUppercase = true,\\n            PasswordLength = 16\\n        };\\n    }\\n    \\n    private string GenerateMemorablePassword(PasswordConfig config)\\n    {\\n        StringBuilder password = new StringBuilder();\\n        \\n        // Select random words\\n        string adjective = adjectives[random.Next(adjectives.Length)];\\n        string noun = nouns[random.Next(nouns.Length)];\\n        string separator = separators[random.Next(separators.Length)];\\n        \\n        // Apply transformations\\n        if (config.IncludeUppercase)\\n        {\\n            adjective = CapitalizeFirstLetter(adjective);\\n            noun = CapitalizeFirstLetter(noun);\\n        }\\n        \\n        password.Append(adjective);\\n        password.Append(separator);\\n        password.Append(noun);\\n        \\n        if (config.IncludeNumbers)\\n        {\\n            password.Append(random.Next(10, 100));\\n        }\\n        \\n        // Ensure password meets length requirement\\n        while (password.Length < config.PasswordLength)\\n        {\\n            string extraWord = random.Next(2) == 0 ? \\n                adjectives[random.Next(adjectives.Length)] : \\n                nouns[random.Next(nouns.Length)];\\n                \\n            if (config.IncludeUppercase)\\n            {\\n                extraWord = CapitalizeFirstLetter(extraWord);\\n            }\\n            \\n            password.Append(separators[random.Next(separators.Length)]);\\n            password.Append(extraWord);\\n        }\\n        \\n        // Trim if too long\\n        if (password.Length > config.PasswordLength)\\n        {\\n            return password.ToString().Substring(0, config.PasswordLength);\\n        }\\n        \\n        return password.ToString();\\n    }\\n    \\n    private string CapitalizeFirstLetter(string word)\\n    {\\n        if (string.IsNullOrEmpty(word))\\n            return word;\\n            \\n        return char.ToUpper(word[0]) + word.Substring(1);\\n    }\\n    \\n    private void SavePasswordHistory(string dataFolder, string password)\\n    {\\n        string historyPath = Path.Combine(dataFolder, \\\"password_history.json\\\");\\n        PasswordHistory history;\\n        \\n        if (File.Exists(historyPath))\\n        {\\n            string json = File.ReadAllText(historyPath);\\n            history = JsonSerializer.Deserialize<PasswordHistory>(json);\\n        }\\n        else\\n        {\\n            history = new PasswordHistory();\\n        }\\n        \\n        history.Passwords.Add(new PasswordEntry\\n        {\\n            Password = password,\\n            GeneratedDate = DateTime.Now\\n        });\\n        \\n        string updatedJson = JsonSerializer.Serialize(history, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(historyPath, updatedJson);\\n    }\\n}\\n\\npublic class PasswordConfig\\n{\\n    public bool IncludeNumbers { get; set; }\\n    public bool IncludeUppercase { get; set; }\\n    public int PasswordLength { get; set; }\\n}\\n\\npublic class PasswordHistory\\n{\\n    public List<PasswordEntry> Passwords { get; set; } = new List<PasswordEntry>();\\n}\\n\\npublic class PasswordEntry\\n{\\n    public string Password { get; set; }\\n    public DateTime GeneratedDate { get; set; }\\n}\",\n  \"name\": \"Password Generator Module\",\n  \"description\": \"Generates random passwords based on memorable phrases with configurable options\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1299,"total_tokens":1819,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}