
{"id":"f8e62272-d1df-4975-bb0b-5f3443dedb0d","object":"chat.completion","created":1744185913,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class PetGroomingSalonModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Pet Grooming Salon Manager\\\";\\n\\n    private string _appointmentsFilePath;\\n    private string _servicesFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Pet Grooming Salon Manager...\\\");\\n\\n        _appointmentsFilePath = Path.Combine(dataFolder, \\\"appointments.json\\\");\\n        _servicesFilePath = Path.Combine(dataFolder, \\\"services.json\\\");\\n\\n        InitializeDataFiles();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            var choice = Console.ReadLine();\\n\\n            switch (choice)\\n            {\\n                case \\\"1\\\":\\n                    AddAppointment();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewAppointments();\\n                    break;\\n                case \\\"3\\\":\\n                    AddService();\\n                    break;\\n                case \\\"4\\\":\\n                    ViewServices();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Pet Grooming Salon Manager is shutting down...\\\");\\n        return true;\\n    }\\n\\n    private void InitializeDataFiles()\\n    {\\n        if (!File.Exists(_appointmentsFilePath))\\n        {\\n            File.WriteAllText(_appointmentsFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_servicesFilePath))\\n        {\\n            var defaultServices = new List<Service>\\n            {\\n                new Service { Id = 1, Name = \\\"Basic Bath\\\", Price = 25.00m, Duration = 30 },\\n                new Service { Id = 2, Name = \\\"Full Grooming\\\", Price = 50.00m, Duration = 60 },\\n                new Service { Id = 3, Name = \\\"Nail Trimming\\\", Price = 15.00m, Duration = 15 }\\n            };\\n            File.WriteAllText(_servicesFilePath, JsonSerializer.Serialize(defaultServices));\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nPet Grooming Salon Manager\\\");\\n        Console.WriteLine(\\\"1. Add Appointment\\\");\\n        Console.WriteLine(\\\"2. View Appointments\\\");\\n        Console.WriteLine(\\\"3. Add Service\\\");\\n        Console.WriteLine(\\\"4. View Services\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Enter your choice: \\\");\\n    }\\n\\n    private void AddAppointment()\\n    {\\n        Console.WriteLine(\\\"\\\\nAdd New Appointment\\\");\\n\\n        try\\n        {\\n            var appointments = GetAppointments();\\n            var services = GetServices();\\n\\n            if (services.Count == 0)\\n            {\\n                Console.WriteLine(\\\"No services available. Please add services first.\\\");\\n                return;\\n            }\\n\\n            Console.WriteLine(\\\"Available Services:\\\");\\n            foreach (var service in services)\\n            {\\n                Console.WriteLine(service.Id + \\\". \\\" + service.Name + \\\" (\\\" + service.Price + \\\")\\\");\\n            }\\n\\n            Console.Write(\\\"Enter pet name: \\\");\\n            var petName = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter owner name: \\\");\\n            var ownerName = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter service ID: \\\");\\n            if (!int.TryParse(Console.ReadLine(), out int serviceId))\\n            {\\n                Console.WriteLine(\\\"Invalid service ID.\\\");\\n                return;\\n            }\\n\\n            var selectedService = services.Find(s => s.Id == serviceId);\\n            if (selectedService == null)\\n            {\\n                Console.WriteLine(\\\"Service not found.\\\");\\n                return;\\n            }\\n\\n            Console.Write(\\\"Enter appointment date (yyyy-MM-dd): \\\");\\n            if (!DateTime.TryParse(Console.ReadLine(), out DateTime date))\\n            {\\n                Console.WriteLine(\\\"Invalid date format.\\\");\\n                return;\\n            }\\n\\n            Console.Write(\\\"Enter appointment time (HH:mm): \\\");\\n            if (!TimeSpan.TryParse(Console.ReadLine(), out TimeSpan time))\\n            {\\n                Console.WriteLine(\\\"Invalid time format.\\\");\\n                return;\\n            }\\n\\n            var appointmentDateTime = date.Add(time);\\n\\n            var newAppointment = new Appointment\\n            {\\n                Id = appointments.Count > 0 ? appointments.Max(a => a.Id) + 1 : 1,\\n                PetName = petName,\\n                OwnerName = ownerName,\\n                ServiceId = serviceId,\\n                AppointmentDateTime = appointmentDateTime,\\n                IsCompleted = false\\n            };\\n\\n            appointments.Add(newAppointment);\\n            SaveAppointments(appointments);\\n\\n            Console.WriteLine(\\\"Appointment added successfully!\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error adding appointment: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void ViewAppointments()\\n    {\\n        Console.WriteLine(\\\"\\\\nAppointment List\\\");\\n\\n        var appointments = GetAppointments();\\n        var services = GetServices();\\n\\n        if (appointments.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No appointments found.\\\");\\n            return;\\n        }\\n\\n        foreach (var appointment in appointments)\\n        {\\n            var service = services.Find(s => s.Id == appointment.ServiceId);\\n            Console.WriteLine(\\\"ID: \\\" + appointment.Id);\\n            Console.WriteLine(\\\"Pet: \\\" + appointment.PetName);\\n            Console.WriteLine(\\\"Owner: \\\" + appointment.OwnerName);\\n            Console.WriteLine(\\\"Service: \\\" + (service?.Name ?? \\\"Unknown\\\"));\\n            Console.WriteLine(\\\"Date/Time: \\\" + appointment.AppointmentDateTime);\\n            Console.WriteLine(\\\"Status: \\\" + (appointment.IsCompleted ? \\\"Completed\\\" : \\\"Pending\\\"));\\n            Console.WriteLine(\\\"-----------------------\\\");\\n        }\\n    }\\n\\n    private void AddService()\\n    {\\n        Console.WriteLine(\\\"\\\\nAdd New Service\\\");\\n\\n        try\\n        {\\n            var services = GetServices();\\n\\n            Console.Write(\\\"Enter service name: \\\");\\n            var name = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter service price: \\\");\\n            if (!decimal.TryParse(Console.ReadLine(), out decimal price))\\n            {\\n                Console.WriteLine(\\\"Invalid price.\\\");\\n                return;\\n            }\\n\\n            Console.Write(\\\"Enter service duration in minutes: \\\");\\n            if (!int.TryParse(Console.ReadLine(), out int duration))\\n            {\\n                Console.WriteLine(\\\"Invalid duration.\\\");\\n                return;\\n            }\\n\\n            var newService = new Service\\n            {\\n                Id = services.Count > 0 ? services.Max(s => s.Id) + 1 : 1,\\n                Name = name,\\n                Price = price,\\n                Duration = duration\\n            };\\n\\n            services.Add(newService);\\n            SaveServices(services);\\n\\n            Console.WriteLine(\\\"Service added successfully!\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error adding service: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void ViewServices()\\n    {\\n        Console.WriteLine(\\\"\\\\nService List\\\");\\n\\n        var services = GetServices();\\n\\n        if (services.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No services found.\\\");\\n            return;\\n        }\\n\\n        foreach (var service in services)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + service.Id);\\n            Console.WriteLine(\\\"Name: \\\" + service.Name);\\n            Console.WriteLine(\\\"Price: \\\" + service.Price);\\n            Console.WriteLine(\\\"Duration: \\\" + service.Duration + \\\" minutes\\\");\\n            Console.WriteLine(\\\"-----------------------\\\");\\n        }\\n    }\\n\\n    private List<Appointment> GetAppointments()\\n    {\\n        var json = File.ReadAllText(_appointmentsFilePath);\\n        return JsonSerializer.Deserialize<List<Appointment>>(json) ?? new List<Appointment>();\\n    }\\n\\n    private void SaveAppointments(List<Appointment> appointments)\\n    {\\n        var json = JsonSerializer.Serialize(appointments);\\n        File.WriteAllText(_appointmentsFilePath, json);\\n    }\\n\\n    private List<Service> GetServices()\\n    {\\n        var json = File.ReadAllText(_servicesFilePath);\\n        return JsonSerializer.Deserialize<List<Service>>(json) ?? new List<Service>();\\n    }\\n\\n    private void SaveServices(List<Service> services)\\n    {\\n        var json = JsonSerializer.Serialize(services);\\n        File.WriteAllText(_servicesFilePath, json);\\n    }\\n}\\n\\npublic class Appointment\\n{\\n    public int Id { get; set; }\\n    public string PetName { get; set; }\\n    public string OwnerName { get; set; }\\n    public int ServiceId { get; set; }\\n    public DateTime AppointmentDateTime { get; set; }\\n    public bool IsCompleted { get; set; }\\n}\\n\\npublic class Service\\n{\\n    public int Id { get; set; }\\n    public string Name { get; set; }\\n    public decimal Price { get; set; }\\n    public int Duration { get; set; }\\n}\",\n  \"name\": \"Pet Grooming Salon Manager\",\n  \"description\": \"A module for managing appointments and services in a pet grooming salon\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":525,"completion_tokens":2295,"total_tokens":2820,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":13},"system_fingerprint":"fp_3d5141a69a_prod0225"}