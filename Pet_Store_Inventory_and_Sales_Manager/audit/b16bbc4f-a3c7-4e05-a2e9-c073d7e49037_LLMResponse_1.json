
{"id":"f69a8e63-8598-4309-8d5a-0b54d285afb5","object":"chat.completion","created":1744184667,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class PetStoreManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Pet Store Inventory and Sales Manager\\\";\\n\\n    private string inventoryFilePath;\\n    private string salesFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Pet Store Manager...\\\");\\n\\n        inventoryFilePath = Path.Combine(dataFolder, \\\"inventory.json\\\");\\n        salesFilePath = Path.Combine(dataFolder, \\\"sales.json\\\");\\n\\n        EnsureDataFilesExist();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddNewPet();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewInventory();\\n                    break;\\n                case \\\"3\\\":\\n                    RecordSale();\\n                    break;\\n                case \\\"4\\\":\\n                    ViewSales();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Pet Store Manager is shutting down...\\\");\\n        return true;\\n    }\\n\\n    private void EnsureDataFilesExist()\\n    {\\n        if (!File.Exists(inventoryFilePath))\\n        {\\n            File.WriteAllText(inventoryFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(salesFilePath))\\n        {\\n            File.WriteAllText(salesFilePath, \\\"[]\\\");\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nPet Store Manager\\\");\\n        Console.WriteLine(\\\"1. Add new pet to inventory\\\");\\n        Console.WriteLine(\\\"2. View inventory\\\");\\n        Console.WriteLine(\\\"3. Record a sale\\\");\\n        Console.WriteLine(\\\"4. View sales records\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddNewPet()\\n    {\\n        Console.Write(\\\"Enter pet name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter pet type (e.g., Dog, Cat, Bird): \\\");\\n        string type = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter pet price: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal price))\\n        {\\n            Console.WriteLine(\\\"Invalid price format.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter quantity in stock: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int quantity))\\n        {\\n            Console.WriteLine(\\\"Invalid quantity format.\\\");\\n            return;\\n        }\\n\\n        var inventory = LoadInventory();\\n        inventory.Add(new Pet\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Name = name,\\n            Type = type,\\n            Price = price,\\n            Quantity = quantity\\n        });\\n\\n        SaveInventory(inventory);\\n        Console.WriteLine(\\\"Pet added to inventory successfully.\\\");\\n    }\\n\\n    private void ViewInventory()\\n    {\\n        var inventory = LoadInventory();\\n        Console.WriteLine(\\\"\\\\nCurrent Inventory:\\\");\\n        Console.WriteLine(\\\"ID\\\\t\\\\tName\\\\tType\\\\tPrice\\\\tQuantity\\\");\\n\\n        foreach (var pet in inventory)\\n        {\\n            Console.WriteLine($\\\"{pet.Id}\\\\t{pet.Name}\\\\t{pet.Type}\\\\t{pet.Price:C2}\\\\t{pet.Quantity}\\\");\\n        }\\n    }\\n\\n    private void RecordSale()\\n    {\\n        ViewInventory();\\n        Console.Write(\\\"Enter ID of pet sold: \\\");\\n        string id = Console.ReadLine();\\n\\n        var inventory = LoadInventory();\\n        var pet = inventory.Find(p => p.Id == id);\\n\\n        if (pet == null)\\n        {\\n            Console.WriteLine(\\\"Pet not found in inventory.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter quantity sold: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid quantity.\\\");\\n            return;\\n        }\\n\\n        if (quantity > pet.Quantity)\\n        {\\n            Console.WriteLine(\\\"Not enough stock available.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter customer name: \\\");\\n        string customerName = Console.ReadLine();\\n\\n        pet.Quantity -= quantity;\\n        SaveInventory(inventory);\\n\\n        var sales = LoadSales();\\n        sales.Add(new Sale\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            PetId = pet.Id,\\n            PetName = pet.Name,\\n            Quantity = quantity,\\n            TotalPrice = pet.Price * quantity,\\n            CustomerName = customerName,\\n            SaleDate = DateTime.Now\\n        });\\n\\n        SaveSales(sales);\\n        Console.WriteLine(\\\"Sale recorded successfully.\\\");\\n    }\\n\\n    private void ViewSales()\\n    {\\n        var sales = LoadSales();\\n        Console.WriteLine(\\\"\\\\nSales Records:\\\");\\n        Console.WriteLine(\\\"Date\\\\t\\\\t\\\\tCustomer\\\\tPet\\\\tQty\\\\tTotal\\\");\\n\\n        foreach (var sale in sales)\\n        {\\n            Console.WriteLine($\\\"{sale.SaleDate}\\\\t{sale.CustomerName}\\\\t{sale.PetName}\\\\t{sale.Quantity}\\\\t{sale.TotalPrice:C2}\\\");\\n        }\\n    }\\n\\n    private List<Pet> LoadInventory()\\n    {\\n        string json = File.ReadAllText(inventoryFilePath);\\n        return JsonSerializer.Deserialize<List<Pet>>(json) ?? new List<Pet>();\\n    }\\n\\n    private void SaveInventory(List<Pet> inventory)\\n    {\\n        string json = JsonSerializer.Serialize(inventory);\\n        File.WriteAllText(inventoryFilePath, json);\\n    }\\n\\n    private List<Sale> LoadSales()\\n    {\\n        string json = File.ReadAllText(salesFilePath);\\n        return JsonSerializer.Deserialize<List<Sale>>(json) ?? new List<Sale>();\\n    }\\n\\n    private void SaveSales(List<Sale> sales)\\n    {\\n        string json = JsonSerializer.Serialize(sales);\\n        File.WriteAllText(salesFilePath, json);\\n    }\\n}\\n\\npublic class Pet\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Type { get; set; }\\n    public decimal Price { get; set; }\\n    public int Quantity { get; set; }\\n}\\n\\npublic class Sale\\n{\\n    public string Id { get; set; }\\n    public string PetId { get; set; }\\n    public string PetName { get; set; }\\n    public int Quantity { get; set; }\\n    public decimal TotalPrice { get; set; }\\n    public string CustomerName { get; set; }\\n    public DateTime SaleDate { get; set; }\\n}\",\n  \"name\": \"Pet Store Inventory and Sales Manager\",\n  \"description\": \"A module for managing pet store inventory and sales records with persistent storage in JSON files\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":524,"completion_tokens":1761,"total_tokens":2285,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":12},"system_fingerprint":"fp_3d5141a69a_prod0225"}