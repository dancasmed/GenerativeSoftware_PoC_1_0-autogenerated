
{"id":"29ca9bda-3769-4e4a-8dd3-422caf2e578c","object":"chat.completion","created":1743798881,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class PetVaccinationTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Pet Vaccination Tracker\\\";\\n\\n    private string _dataFilePath;\\n    private List<Pet> _pets;\\n\\n    public PetVaccinationTracker()\\n    {\\n        _pets = new List<Pet>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Pet Vaccination Tracker module is running.\\\");\\n        _dataFilePath = Path.Combine(dataFolder, \\\"pets_vaccination_records.json\\\");\\n\\n        LoadData();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddPet();\\n                    break;\\n                case \\\"2\\\":\\n                    AddVaccination();\\n                    break;\\n                case \\\"3\\\":\\n                    ScheduleAppointment();\\n                    break;\\n                case \\\"4\\\":\\n                    ViewRecords();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveData();\\n        return true;\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nPet Vaccination Tracker\\\");\\n        Console.WriteLine(\\\"1. Add a pet\\\");\\n        Console.WriteLine(\\\"2. Add vaccination record\\\");\\n        Console.WriteLine(\\\"3. Schedule vet appointment\\\");\\n        Console.WriteLine(\\\"4. View all records\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddPet()\\n    {\\n        Console.Write(\\\"Enter pet name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter pet type (e.g., Dog, Cat): \\\");\\n        string type = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter pet age: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int age))\\n        {\\n            _pets.Add(new Pet { Name = name, Type = type, Age = age, Vaccinations = new List<Vaccination>(), Appointments = new List<Appointment>() });\\n            Console.WriteLine(\\\"Pet added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid age. Pet not added.\\\");\\n        }\\n    }\\n\\n    private void AddVaccination()\\n    {\\n        if (_pets.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No pets available. Please add a pet first.\\\");\\n            return;\\n        }\\n\\n        DisplayPets();\\n        Console.Write(\\\"Select pet number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int petIndex) && petIndex > 0 && petIndex <= _pets.Count)\\n        {\\n            Console.Write(\\\"Enter vaccine name: \\\");\\n            string vaccineName = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter date administered (yyyy-MM-dd): \\\");\\n            if (DateTime.TryParse(Console.ReadLine(), out DateTime dateAdministered))\\n            {\\n                Console.Write(\\\"Enter next due date (yyyy-MM-dd): \\\");\\n                if (DateTime.TryParse(Console.ReadLine(), out DateTime nextDueDate))\\n                {\\n                    _pets[petIndex - 1].Vaccinations.Add(new Vaccination\\n                    {\\n                        VaccineName = vaccineName,\\n                        DateAdministered = dateAdministered,\\n                        NextDueDate = nextDueDate\\n                    });\\n                    Console.WriteLine(\\\"Vaccination record added successfully.\\\");\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid next due date. Vaccination not added.\\\");\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid date administered. Vaccination not added.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid pet selection.\\\");\\n        }\\n    }\\n\\n    private void ScheduleAppointment()\\n    {\\n        if (_pets.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No pets available. Please add a pet first.\\\");\\n            return;\\n        }\\n\\n        DisplayPets();\\n        Console.Write(\\\"Select pet number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int petIndex) && petIndex > 0 && petIndex <= _pets.Count)\\n        {\\n            Console.Write(\\\"Enter appointment purpose: \\\");\\n            string purpose = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter appointment date (yyyy-MM-dd): \\\");\\n            if (DateTime.TryParse(Console.ReadLine(), out DateTime appointmentDate))\\n            {\\n                Console.Write(\\\"Enter vet clinic name: \\\");\\n                string clinicName = Console.ReadLine();\\n\\n                _pets[petIndex - 1].Appointments.Add(new Appointment\\n                {\\n                    Purpose = purpose,\\n                    Date = appointmentDate,\\n                    ClinicName = clinicName\\n                });\\n                Console.WriteLine(\\\"Appointment scheduled successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid appointment date.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid pet selection.\\\");\\n        }\\n    }\\n\\n    private void ViewRecords()\\n    {\\n        if (_pets.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No pets available.\\\");\\n            return;\\n        }\\n\\n        foreach (var pet in _pets)\\n        {\\n            Console.WriteLine($\\\"\\\\nPet: {pet.Name} ({pet.Type}), Age: {pet.Age}\\\");\\n            Console.WriteLine(\\\"Vaccinations:\\\");\\n            foreach (var vaccine in pet.Vaccinations)\\n            {\\n                Console.WriteLine($\\\"- {vaccine.VaccineName}, Administered: {vaccine.DateAdministered:yyyy-MM-dd}, Next Due: {vaccine.NextDueDate:yyyy-MM-dd}\\\");\\n            }\\n\\n            Console.WriteLine(\\\"Appointments:\\\");\\n            foreach (var appointment in pet.Appointments)\\n            {\\n                Console.WriteLine($\\\"- {appointment.Purpose} at {appointment.ClinicName} on {appointment.Date:yyyy-MM-dd}\\\");\\n            }\\n        }\\n    }\\n\\n    private void DisplayPets()\\n    {\\n        Console.WriteLine(\\\"\\\\nAvailable Pets:\\\");\\n        for (int i = 0; i < _pets.Count; i++)\\n        {\\n            Console.WriteLine($\\\"{i + 1}. {_pets[i].Name} ({_pets[i].Type})\\\");\\n        }\\n    }\\n\\n    private void LoadData()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                string jsonData = File.ReadAllText(_dataFilePath);\\n                _pets = JsonSerializer.Deserialize<List<Pet>>(jsonData);\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine($\\\"Error loading data: {ex.Message}\\\");\\n            }\\n        }\\n    }\\n\\n    private void SaveData()\\n    {\\n        try\\n        {\\n            string jsonData = JsonSerializer.Serialize(_pets);\\n            File.WriteAllText(_dataFilePath, jsonData);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine($\\\"Error saving data: {ex.Message}\\\");\\n        }\\n    }\\n}\\n\\npublic class Pet\\n{\\n    public string Name { get; set; }\\n    public string Type { get; set; }\\n    public int Age { get; set; }\\n    public List<Vaccination> Vaccinations { get; set; }\\n    public List<Appointment> Appointments { get; set; }\\n}\\n\\npublic class Vaccination\\n{\\n    public string VaccineName { get; set; }\\n    public DateTime DateAdministered { get; set; }\\n    public DateTime NextDueDate { get; set; }\\n}\\n\\npublic class Appointment\\n{\\n    public string Purpose { get; set; }\\n    public DateTime Date { get; set; }\\n    public string ClinicName { get; set; }\\n}\",\n  \"name\": \"Pet Vaccination Tracker\",\n  \"description\": \"A module to track pets' vaccination records and vet appointments with persistent storage in JSON format.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":2021,"total_tokens":2542,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}