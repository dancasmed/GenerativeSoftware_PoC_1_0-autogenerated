
{"id":"221400ee-ff9f-409b-9f01-3f2402ecdec2","object":"chat.completion","created":1744181660,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class PodcastLibraryManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Podcast Library Manager\\\";\\n\\n    private string _dataFilePath;\\n    private List<Podcast> _podcasts;\\n\\n    public PodcastLibraryManager()\\n    {\\n        _podcasts = new List<Podcast>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Podcast Library Manager...\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"podcast_library.json\\\");\\n        \\n        try\\n        {\\n            LoadLibrary();\\n            Console.WriteLine(\\\"Podcast library loaded successfully.\\\");\\n            \\n            bool exitRequested = false;\\n            while (!exitRequested)\\n            {\\n                DisplayMenu();\\n                var input = Console.ReadLine();\\n                \\n                switch (input)\\n                {\\n                    case \\\"1\\\":\\n                        AddPodcast();\\n                        break;\\n                    case \\\"2\\\":\\n                        AddEpisode();\\n                        break;\\n                    case \\\"3\\\":\\n                        UpdateListeningProgress();\\n                        break;\\n                    case \\\"4\\\":\\n                        DisplayLibrary();\\n                        break;\\n                    case \\\"5\\\":\\n                        exitRequested = true;\\n                        Console.WriteLine(\\\"Saving changes and exiting...\\\");\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            \\n            SaveLibrary();\\n            Console.WriteLine(\\\"Changes saved successfully.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void LoadLibrary()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            var json = File.ReadAllText(_dataFilePath);\\n            _podcasts = JsonSerializer.Deserialize<List<Podcast>>(json) ?? new List<Podcast>();\\n        }\\n    }\\n\\n    private void SaveLibrary()\\n    {\\n        var options = new JsonSerializerOptions { WriteIndented = true };\\n        var json = JsonSerializer.Serialize(_podcasts, options);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nPodcast Library Manager\\\");\\n        Console.WriteLine(\\\"1. Add Podcast\\\");\\n        Console.WriteLine(\\\"2. Add Episode to Podcast\\\");\\n        Console.WriteLine(\\\"3. Update Listening Progress\\\");\\n        Console.WriteLine(\\\"4. Display Library\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddPodcast()\\n    {\\n        Console.Write(\\\"Enter podcast title: \\\");\\n        var title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter podcast author: \\\");\\n        var author = Console.ReadLine();\\n        \\n        _podcasts.Add(new Podcast\\n        {\\n            Id = Guid.NewGuid(),\\n            Title = title,\\n            Author = author,\\n            Episodes = new List<Episode>()\\n        });\\n        \\n        Console.WriteLine(\\\"Podcast added successfully.\\\");\\n    }\\n\\n    private void AddEpisode()\\n    {\\n        if (_podcasts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No podcasts available. Please add a podcast first.\\\");\\n            return;\\n        }\\n        \\n        DisplayPodcasts();\\n        Console.Write(\\\"Select podcast number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int podcastIndex) && podcastIndex >= 1 && podcastIndex <= _podcasts.Count)\\n        {\\n            var podcast = _podcasts[podcastIndex - 1];\\n            \\n            Console.Write(\\\"Enter episode title: \\\");\\n            var title = Console.ReadLine();\\n            \\n            Console.Write(\\\"Enter episode duration (minutes): \\\");\\n            if (int.TryParse(Console.ReadLine(), out int duration))\\n            {\\n                podcast.Episodes.Add(new Episode\\n                {\\n                    Id = Guid.NewGuid(),\\n                    Title = title,\\n                    DurationMinutes = duration,\\n                    ProgressMinutes = 0,\\n                    IsCompleted = false\\n                });\\n                \\n                Console.WriteLine(\\\"Episode added successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid duration. Please enter a number.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid podcast selection.\\\");\\n        }\\n    }\\n\\n    private void UpdateListeningProgress()\\n    {\\n        if (_podcasts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No podcasts available.\\\");\\n            return;\\n        }\\n        \\n        DisplayPodcasts();\\n        Console.Write(\\\"Select podcast number: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int podcastIndex) && podcastIndex >= 1 && podcastIndex <= _podcasts.Count)\\n        {\\n            var podcast = _podcasts[podcastIndex - 1];\\n            \\n            if (podcast.Episodes.Count == 0)\\n            {\\n                Console.WriteLine(\\\"No episodes available for this podcast.\\\");\\n                return;\\n            }\\n            \\n            DisplayEpisodes(podcast);\\n            Console.Write(\\\"Select episode number: \\\");\\n            if (int.TryParse(Console.ReadLine(), out int episodeIndex) && episodeIndex >= 1 && episodeIndex <= podcast.Episodes.Count)\\n            {\\n                var episode = podcast.Episodes[episodeIndex - 1];\\n                \\n                Console.Write(\\\"Enter current progress in minutes: \\\");\\n                if (int.TryParse(Console.ReadLine(), out int progress) && progress >= 0 && progress <= episode.DurationMinutes)\\n                {\\n                    episode.ProgressMinutes = progress;\\n                    episode.IsCompleted = (progress == episode.DurationMinutes);\\n                    Console.WriteLine(\\\"Progress updated successfully.\\\");\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid progress value. Must be between 0 and \\\" + episode.DurationMinutes);\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid episode selection.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid podcast selection.\\\");\\n        }\\n    }\\n\\n    private void DisplayLibrary()\\n    {\\n        if (_podcasts.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No podcasts in the library.\\\");\\n            return;\\n        }\\n        \\n        foreach (var podcast in _podcasts)\\n        {\\n            Console.WriteLine(\\\"\\\\nPodcast: \\\" + podcast.Title + \\\" by \\\" + podcast.Author);\\n            if (podcast.Episodes.Count > 0)\\n            {\\n                Console.WriteLine(\\\"Episodes:\\\");\\n                foreach (var episode in podcast.Episodes)\\n                {\\n                    var status = episode.IsCompleted ? \\\"Completed\\\" : \\n                                episode.ProgressMinutes > 0 ? \\\"In Progress (\\\" + episode.ProgressMinutes + \\\"m)\\\" : \\\"Not Started\\\";\\n                    Console.WriteLine(\\\"- \\\" + episode.Title + \\\" (\\\" + episode.DurationMinutes + \\\"m): \\\" + status);\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"No episodes available.\\\");\\n            }\\n        }\\n    }\\n\\n    private void DisplayPodcasts()\\n    {\\n        Console.WriteLine(\\\"\\\\nAvailable Podcasts:\\\");\\n        for (int i = 0; i < _podcasts.Count; i++)\\n        {\\n            Console.WriteLine((i + 1) + \\\". \\\" + _podcasts[i].Title);\\n        }\\n    }\\n\\n    private void DisplayEpisodes(Podcast podcast)\\n    {\\n        Console.WriteLine(\\\"\\\\nEpisodes for \\\" + podcast.Title + \\\":\\\");\\n        for (int i = 0; i < podcast.Episodes.Count; i++)\\n        {\\n            Console.WriteLine((i + 1) + \\\". \\\" + podcast.Episodes[i].Title);\\n        }\\n    }\\n}\\n\\npublic class Podcast\\n{\\n    public Guid Id { get; set; }\\n    public string Title { get; set; }\\n    public string Author { get; set; }\\n    public List<Episode> Episodes { get; set; }\\n}\\n\\npublic class Episode\\n{\\n    public Guid Id { get; set; }\\n    public string Title { get; set; }\\n    public int DurationMinutes { get; set; }\\n    public int ProgressMinutes { get; set; }\\n    public bool IsCompleted { get; set; }\\n}\",\n  \"name\": \"Podcast Library Manager\",\n  \"description\": \"A tool to manage a podcast library with episode details and listening progress tracking\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":2115,"total_tokens":2641,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":14},"system_fingerprint":"fp_3d5141a69a_prod0225"}