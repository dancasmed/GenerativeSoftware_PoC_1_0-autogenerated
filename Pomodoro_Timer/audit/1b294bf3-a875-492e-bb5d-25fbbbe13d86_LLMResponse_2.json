{"id":"69655943-ff26-4a35-8962-90ff0bd62ad4","object":"chat.completion","created":1743799680,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\nusing System.Threading;\\n\\npublic class PomodoroTimer : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Pomodoro Timer\\\";\\n    \\n    private const int WorkDurationMinutes = 25;\\n    private const int ShortBreakDurationMinutes = 5;\\n    private const int LongBreakDurationMinutes = 15;\\n    private const int SessionsBeforeLongBreak = 4;\\n    \\n    private string _settingsPath;\\n    \\n    public PomodoroTimer()\\n    {\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _settingsPath = Path.Combine(dataFolder, \\\"pomodoro_settings.json\\\");\\n        \\n        Console.WriteLine(\\\"Starting Pomodoro Timer...\\\");\\n        Console.WriteLine(\\\"Work: 25 min | Short Break: 5 min | Long Break: 15 min\\\");\\n        \\n        LoadSettings();\\n        \\n        int sessionCount = 0;\\n        bool running = true;\\n        \\n        while (running)\\n        {\\n            sessionCount++;\\n            \\n            Console.WriteLine(\\\"\\\\nStarting work session #\\\" + sessionCount);\\n            RunTimer(WorkDurationMinutes, \\\"Work\\\");\\n            \\n            if (sessionCount % SessionsBeforeLongBreak == 0)\\n            {\\n                Console.WriteLine(\\\"\\\\nTime for a long break!\\\");\\n                RunTimer(LongBreakDurationMinutes, \\\"Long Break\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"\\\\nTime for a short break!\\\");\\n                RunTimer(ShortBreakDurationMinutes, \\\"Short Break\\\");\\n            }\\n            \\n            Console.WriteLine(\\\"\\\\nPress 'q' to quit or any other key to continue...\\\");\\n            if (Console.ReadKey().KeyChar == 'q')\\n            {\\n                running = false;\\n            }\\n        }\\n        \\n        SaveSettings();\\n        Console.WriteLine(\\\"Pomodoro Timer stopped.\\\");\\n        return true;\\n    }\\n    \\n    private void RunTimer(int minutes, string mode)\\n    {\\n        int seconds = minutes * 60;\\n        DateTime endTime = DateTime.Now.AddMinutes(minutes);\\n        \\n        Console.WriteLine(mode + \\\" session started at: \\\" + DateTime.Now.ToString(\\\"HH:mm:ss\\\"));\\n        Console.WriteLine(\\\"Session will end at: \\\" + endTime.ToString(\\\"HH:mm:ss\\\"));\\n        \\n        while (seconds > 0)\\n        {\\n            TimeSpan remaining = TimeSpan.FromSeconds(seconds);\\n            Console.Write(\\\"\\\\r\\\" + mode + \\\" time remaining: \\\" + remaining.ToString(\\\"mm':'ss\\\"));\\n            Thread.Sleep(1000);\\n            seconds--;\\n            \\n            if (Console.KeyAvailable && Console.ReadKey(true).Key == ConsoleKey.Escape)\\n            {\\n                Console.WriteLine(\\\"\\\\nSession interrupted!\\\");\\n                return;\\n            }\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\n\\\" + mode + \\\" session completed!\\\");\\n        Console.Beep();\\n    }\\n    \\n    private void LoadSettings()\\n    {\\n        try\\n        {\\n            if (File.Exists(_settingsPath))\\n            {\\n                string json = File.ReadAllText(_settingsPath);\\n                // In future versions we could deserialize settings here\\n                Console.WriteLine(\\\"Previous session settings loaded.\\\");\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading settings: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void SaveSettings()\\n    {\\n        try\\n        {\\n            var settings = new\\n            {\\n                LastRun = DateTime.Now\\n            };\\n            \\n            string json = JsonSerializer.Serialize(settings);\\n            File.WriteAllText(_settingsPath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving settings: \\\" + ex.Message);\\n        }\\n    }\\n}\",\n  \"name\": \"Pomodoro Timer\",\n  \"description\": \"A productivity timer that alternates between work sessions and breaks following the Pomodoro technique\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1012,"total_tokens":1534,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}