{"id":"6d9da519-40c0-4404-9292-77f9376ff444","object":"chat.completion","created":1743799631,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\nusing System.Threading;\\nusing System.Threading.Tasks;\\n\\npublic class PomodoroTimer : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Pomodoro Timer\\\";\\n    \\n    private const int WorkDurationMinutes = 25;\\n    private const int ShortBreakDurationMinutes = 5;\\n    private const int LongBreakDurationMinutes = 15;\\n    private const int SessionsBeforeLongBreak = 4;\\n    \\n    private int _completedSessions;\\n    private bool _isRunning;\\n    \\n    public PomodoroTimer()\\n    {\\n        _completedSessions = 0;\\n        _isRunning = false;\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Pomodoro Timer...\\\");\\n        Console.WriteLine(\\\"Press 'S' to start, 'P' to pause, 'R' to reset, and 'Q' to quit.\\\");\\n        \\n        LoadProgress(dataFolder);\\n        \\n        _isRunning = true;\\n        var inputTask = Task.Run(() => HandleUserInput());\\n        \\n        while (_isRunning)\\n        {\\n            if (_completedSessions % SessionsBeforeLongBreak == 0 && _completedSessions > 0)\\n            {\\n                StartTimer(\\\"Long Break\\\", LongBreakDurationMinutes, dataFolder);\\n            }\\n            else if (_completedSessions > 0)\\n            {\\n                StartTimer(\\\"Short Break\\\", ShortBreakDurationMinutes, dataFolder);\\n            }\\n            else\\n            {\\n                StartTimer(\\\"Work\\\", WorkDurationMinutes, dataFolder);\\n            }\\n            \\n            _completedSessions++;\\n            SaveProgress(dataFolder);\\n        }\\n        \\n        inputTask.Wait();\\n        Console.WriteLine(\\\"Pomodoro Timer stopped.\\\");\\n        return true;\\n    }\\n    \\n    private void StartTimer(string mode, int durationMinutes, string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting \\\" + mode + \\\" session for \\\" + durationMinutes + \\\" minutes.\\\");\\n        \\n        var endTime = DateTime.Now.AddMinutes(durationMinutes);\\n        while (DateTime.Now < endTime && _isRunning)\\n        {\\n            var remainingTime = endTime - DateTime.Now;\\n            Console.Write(\\\"\\\\r\\\" + mode + \\\" Time Remaining: \\\" + remainingTime.ToString(@\"mm\\\\:ss\\\"));\\n            Thread.Sleep(1000);\\n        }\\n        \\n        if (_isRunning)\\n        {\\n            Console.WriteLine();\\n            Console.WriteLine(mode + \\\" session completed!\\\");\\n        }\\n    }\\n    \\n    private void HandleUserInput()\\n    {\\n        while (_isRunning)\\n        {\\n            var key = Console.ReadKey(true).Key;\\n            \\n            switch (key)\\n            {\\n                case ConsoleKey.S:\\n                    Console.WriteLine(\\\"Resuming timer...\\\");\\n                    break;\\n                case ConsoleKey.P:\\n                    Console.WriteLine(\\\"Timer paused. Press 'S' to resume.\\\");\\n                    while (Console.ReadKey(true).Key != ConsoleKey.S)\\n                    {\\n                        Thread.Sleep(100);\\n                    }\\n                    Console.WriteLine(\\\"Resuming timer...\\\");\\n                    break;\\n                case ConsoleKey.R:\\n                    _completedSessions = 0;\\n                    Console.WriteLine(\\\"Timer reset. Starting new work session.\\\");\\n                    break;\\n                case ConsoleKey.Q:\\n                    _isRunning = false;\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private void SaveProgress(string dataFolder)\\n    {\\n        try\\n        {\\n            var progress = new { CompletedSessions = _completedSessions };\\n            var json = JsonSerializer.Serialize(progress);\\n            var filePath = Path.Combine(dataFolder, \\\"pomodoro_progress.json\\\");\\n            File.WriteAllText(filePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving progress: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void LoadProgress(string dataFolder)\\n    {\\n        try\\n        {\\n            var filePath = Path.Combine(dataFolder, \\\"pomodoro_progress.json\\\");\\n            if (File.Exists(filePath))\\n            {\\n                var json = File.ReadAllText(filePath);\\n                var progress = JsonSerializer.Deserialize<ProgressData>(json);\\n                _completedSessions = progress.CompletedSessions;\\n                Console.WriteLine(\\\"Loaded previous progress: \\\" + _completedSessions + \\\" sessions completed.\\\");\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading progress: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private class ProgressData\\n    {\\n        public int CompletedSessions { get; set; }\\n    }\\n}\",\n  \"name\": \"Pomodoro Timer\",\n  \"description\": \"A Pomodoro timer for focused work sessions with configurable work and break durations.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1204,"total_tokens":1726,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}