
{"id":"804ec127-1a06-41d6-a50f-190f775eba26","object":"chat.completion","created":1743791187,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"Here's the JSON response with the generated module for managing a printer task queue with priority levels:\n\n```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class PrinterTaskQueue : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Printer Task Queue Manager\\\";\\n    \\n    private string _dataFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"printer_tasks.json\\\");\\n        \\n        Console.WriteLine(\\\"Printer Task Queue Manager module started\\\");\\n        Console.WriteLine(\\\"Data will be stored in: \\\" + _dataFilePath);\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        var queue = LoadQueue();\\n        \\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add new print task\\\");\\n            Console.WriteLine(\\\"2. Process next task\\\");\\n            Console.WriteLine(\\\"3. View all tasks\\\");\\n            Console.WriteLine(\\\"4. Clear all tasks\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            \\n            Console.Write(\\\"Select an option: \\\");\\n            var input = Console.ReadLine();\\n            \\n            if (!int.TryParse(input, out var option))\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter a number between 1 and 5.\\\");\\n                continue;\\n            }\\n            \\n            switch (option)\\n            {\\n                case 1:\\n                    AddTask(queue);\\n                    break;\\n                case 2:\\n                    ProcessNextTask(queue);\\n                    break;\\n                case 3:\\n                    ViewAllTasks(queue);\\n                    break;\\n                case 4:\\n                    ClearAllTasks(queue);\\n                    break;\\n                case 5:\\n                    SaveQueue(queue);\\n                    Console.WriteLine(\\\"Exiting Printer Task Queue Manager\\\");\\n                    return true;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private List<PrinterTask> LoadQueue()\\n    {\\n        try\\n        {\\n            if (File.Exists(_dataFilePath))\\n            {\\n                var json = File.ReadAllText(_dataFilePath);\\n                return JsonSerializer.Deserialize<List<PrinterTask>>(json) ?? new List<PrinterTask>();\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading queue: \\\" + ex.Message);\\n        }\\n        \\n        return new List<PrinterTask>();\\n    }\\n    \\n    private void SaveQueue(List<PrinterTask> queue)\\n    {\\n        try\\n        {\\n            var options = new JsonSerializerOptions { WriteIndented = true };\\n            var json = JsonSerializer.Serialize(queue, options);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving queue: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void AddTask(List<PrinterTask> queue)\\n    {\\n        Console.Write(\\\"Enter document name: \\\");\\n        var name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter document content: \\\");\\n        var content = Console.ReadLine();\\n        \\n        Console.WriteLine(\\\"Select priority (1-High, 2-Medium, 3-Low): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out var priority) || priority < 1 || priority > 3)\\n        {\\n            Console.WriteLine(\\\"Invalid priority. Defaulting to Medium.\\\");\\n            priority = 2;\\n        }\\n        \\n        var task = new PrinterTask\\n        {\\n            Id = Guid.NewGuid(),\\n            Name = name,\\n            Content = content,\\n            Priority = (PriorityLevel)priority,\\n            CreatedAt = DateTime.Now\\n        };\\n        \\n        queue.Add(task);\\n        SaveQueue(queue);\\n        \\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n    }\\n    \\n    private void ProcessNextTask(List<PrinterTask> queue)\\n    {\\n        if (queue.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks in the queue.\\\");\\n            return;\\n        }\\n        \\n        var nextTask = queue\\n            .OrderBy(t => t.Priority)\\n            .ThenBy(t => t.CreatedAt)\\n            .First();\\n        \\n        Console.WriteLine(\\\"Processing task:\\\");\\n        Console.WriteLine(\\\"Document: \\\" + nextTask.Name);\\n        Console.WriteLine(\\\"Content: \\\" + nextTask.Content);\\n        Console.WriteLine(\\\"Priority: \\\" + nextTask.Priority);\\n        \\n        queue.Remove(nextTask);\\n        SaveQueue(queue);\\n        \\n        Console.WriteLine(\\\"Task processed and removed from queue.\\\");\\n    }\\n    \\n    private void ViewAllTasks(List<PrinterTask> queue)\\n    {\\n        if (queue.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks in the queue.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Current tasks in queue:\\\");\\n        \\n        foreach (var task in queue.OrderBy(t => t.Priority).ThenBy(t => t.CreatedAt))\\n        {\\n            Console.WriteLine($\\\"[{task.Priority}] {task.Name} (Created: {task.CreatedAt})\\\");\\n        }\\n    }\\n    \\n    private void ClearAllTasks(List<PrinterTask> queue)\\n    {\\n        Console.Write(\\\"Are you sure you want to clear all tasks? (y/n): \\\");\\n        var confirm = Console.ReadLine()?.ToLower();\\n        \\n        if (confirm == \\\"y\\\")\\n        {\\n            queue.Clear();\\n            SaveQueue(queue);\\n            Console.WriteLine(\\\"All tasks cleared.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Operation canceled.\\\");\\n        }\\n    }\\n}\\n\\npublic class PrinterTask\\n{\\n    public Guid Id { get; set; }\\n    public string Name { get; set; }\\n    public string Content { get; set; }\\n    public PriorityLevel Priority { get; set; }\\n    public DateTime CreatedAt { get; set; }\\n}\\n\\npublic enum PriorityLevel\\n{\\n    High = 1,\\n    Medium = 2,\\n    Low = 3\\n}\",\n  \"name\": \"Printer Task Queue Manager\",\n  \"description\": \"Manages a printer task queue with priority levels (High, Medium, Low) and persists tasks to JSON file storage.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1613,"total_tokens":2135,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}