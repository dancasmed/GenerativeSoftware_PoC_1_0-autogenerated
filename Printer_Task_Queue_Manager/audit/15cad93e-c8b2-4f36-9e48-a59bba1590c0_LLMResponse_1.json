{"id":"26097f69-bc46-4af0-bb24-939528d17fab","object":"chat.completion","created":1743795025,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class PrinterTaskQueueModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Printer Task Queue Manager\\\";\\n\\n    private string _dataFilePath;\\n    private List<PrinterTask> _tasks;\\n\\n    public PrinterTaskQueueModule()\\n    {\\n        _tasks = new List<PrinterTask>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"printer_tasks.json\\\");\\n        \\n        Console.WriteLine(\\\"Printer Task Queue Manager module is running.\\\");\\n        Console.WriteLine(\\\"Loading tasks from \\\" + _dataFilePath);\\n        \\n        LoadTasks();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add Task\\\");\\n            Console.WriteLine(\\\"2. Process Next Task\\\");\\n            Console.WriteLine(\\\"3. List All Tasks\\\");\\n            Console.WriteLine(\\\"4. Save and Exit\\\");\\n            Console.Write(\\\"Enter choice: \\\");\\n            \\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddTask();\\n                    break;\\n                case \\\"2\\\":\\n                    ProcessNextTask();\\n                    break;\\n                case \\\"3\\\":\\n                    ListAllTasks();\\n                    break;\\n                case \\\"4\\\":\\n                    SaveTasks();\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        Console.WriteLine(\\\"Printer Task Queue Manager module completed.\\\");\\n        return true;\\n    }\\n    \\n    private void LoadTasks()\\n    {\\n        try\\n        {\\n            if (File.Exists(_dataFilePath))\\n            {\\n                var json = File.ReadAllText(_dataFilePath);\\n                _tasks = JsonSerializer.Deserialize<List<PrinterTask>>(json);\\n                Console.WriteLine(\\\"Loaded \\\" + _tasks.Count + \\\" tasks.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"No existing task file found. Starting with empty queue.\\\");\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading tasks: \\\" + ex.Message);\\n            _tasks = new List<PrinterTask>();\\n        }\\n    }\\n    \\n    private void SaveTasks()\\n    {\\n        try\\n        {\\n            var options = new JsonSerializerOptions { WriteIndented = true };\\n            var json = JsonSerializer.Serialize(_tasks, options);\\n            File.WriteAllText(_dataFilePath, json);\\n            Console.WriteLine(\\\"Tasks saved successfully.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving tasks: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void AddTask()\\n    {\\n        Console.Write(\\\"Enter document name: \\\");\\n        var name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter priority (1=Low, 2=Medium, 3=High): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int priority) || priority < 1 || priority > 3)\\n        {\\n            Console.WriteLine(\\\"Invalid priority. Using Medium priority.\\\");\\n            priority = 2;\\n        }\\n        \\n        var task = new PrinterTask\\n        {\\n            Id = Guid.NewGuid(),\\n            DocumentName = name,\\n            Priority = priority,\\n            CreatedAt = DateTime.Now\\n        };\\n        \\n        _tasks.Add(task);\\n        _tasks.Sort((x, y) => y.Priority.CompareTo(x.Priority));\\n        \\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n    }\\n    \\n    private void ProcessNextTask()\\n    {\\n        if (_tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks in queue.\\\");\\n            return;\\n        }\\n        \\n        var task = _tasks[0];\\n        _tasks.RemoveAt(0);\\n        \\n        Console.WriteLine(\\\"Processing task: \\\" + task.DocumentName);\\n        Console.WriteLine(\\\"Priority: \\\" + GetPriorityName(task.Priority));\\n        Console.WriteLine(\\\"Created at: \\\" + task.CreatedAt);\\n    }\\n    \\n    private void ListAllTasks()\\n    {\\n        if (_tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks in queue.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Current Task Queue:\\\");\\n        Console.WriteLine(\\\"------------------\\\");\\n        \\n        foreach (var task in _tasks)\\n        {\\n            Console.WriteLine(\\\"Document: \\\" + task.DocumentName);\\n            Console.WriteLine(\\\"Priority: \\\" + GetPriorityName(task.Priority));\\n            Console.WriteLine(\\\"Created: \\\" + task.CreatedAt);\\n            Console.WriteLine(\\\"------------------\\\");\\n        }\\n    }\\n    \\n    private string GetPriorityName(int priority)\\n    {\\n        return priority switch\\n        {\\n            1 => \\\"Low\\\",\\n            2 => \\\"Medium\\\",\\n            3 => \\\"High\\\",\\n            _ => \\\"Unknown\\\"\\n        };\\n    }\\n}\\n\\npublic class PrinterTask\\n{\\n    public Guid Id { get; set; }\\n    public string DocumentName { get; set; }\\n    public int Priority { get; set; }\\n    public DateTime CreatedAt { get; set; }\\n}\",\n  \"name\": \"Printer Task Queue Manager\",\n  \"description\": \"Manages a printer task queue with priority levels (Low, Medium, High). Allows adding, processing, and listing tasks, with persistence to JSON files.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1416,"total_tokens":1938,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}