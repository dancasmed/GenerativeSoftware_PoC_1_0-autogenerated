{"UseOnlineModel":true,"OfflineModel":"deepseek-r1:70b","OnlineModel":"deepseek-chat","Description":"","SystemPrompt":"You are a helpful assistant with high skills in software development. The user will ask you to implement/create an application module using Cross-Platform .NET 9 C# code that adheres to the following interface:\n\n\u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022\n\n### Requirements:\n- The generated code must avoid using external APIs if possible, in case an API is needed add it to the list of required APIS.\n_ If the generated code needs NuGets installed add the NuGet name to the list of required Nugets.\n- The response must be in JSON format.\n- The \u0060source_code\u0060 field must contain C# code only (avoid markdown notation).\n- Do not include the IGeneratedModule in the generated source code.\n- The generated code **must not include any instructions that begin with \u0060Console.WriteLine($\u0060**.\n- If data persistence is required, use JSON files stored in the \u0060dataFolder\u0060 parameter of the \u0060Main\u0060 method.\n- Ensure the generated module is as detailed and complete as possible.\n- The constructor of the generated module must not have any parameters.\n- The generated code MUST not call Exit method. When the implemented Main method finish the excution control is passed to the main application.\n- The generated code must print information in the console to let know the user the module is running.\n\n### Example output:\n{\u0022source_code\u0022:\u0022GENERATED C# CODE\u0022,\u0022name\u0022: \u0022GENERATED NAME FOR THE MODULE\u0022,\u0022description\u0022: \u0022GENERATED DESCRIPTION FOR THE MODULE\u0022, \u0022required_apis\u0022=[{\u0022API_1\u0022},{\u0022API_2\u0022}], , \u0022required_nugets\u0022=[{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_1\u0022,\u0022nuget_version\u0022:\u00221.0.0\u0022 },{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_2\u0022,\u0022nuget_version\u0022:\u00222.0.0.0\u0022 }]}","BasePrompt":"Generate a Cross-Platform .NET 9 C# code that implements the next interface \u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022 the Main method is the start point for the module. The souce code will run on a console application. The generated code must not write strings to console like this Console.WriteLine($\u0022{variable}\u0022). The source code will be automaticallty compiled so avoid adding markdown notation or anything that is not c# code The module must: \u003CTASK_INPUT\u003E","TaskInput":"Manage a task queue for a printer with priority levels","ModelRawResponse":"{\u0022id\u0022:\u002226097f69-bc46-4af0-bb24-939528d17fab\u0022,\u0022object\u0022:\u0022chat.completion\u0022,\u0022created\u0022:1743795025,\u0022model\u0022:\u0022deepseek-chat\u0022,\u0022choices\u0022:[{\u0022index\u0022:0,\u0022message\u0022:{\u0022role\u0022:\u0022assistant\u0022,\u0022content\u0022:\u0022\u0060\u0060\u0060json\\n{\\n  \\\u0022source_code\\\u0022: \\\u0022using System;\\\\nusing System.Collections.Generic;\\\\nusing System.IO;\\\\nusing System.Text.Json;\\\\n\\\\npublic class PrinterTaskQueueModule : IGeneratedModule\\\\n{\\\\n    public string Name { get; set; } = \\\\\\\u0022Printer Task Queue Manager\\\\\\\u0022;\\\\n\\\\n    private string _dataFilePath;\\\\n    private List\u003CPrinterTask\u003E _tasks;\\\\n\\\\n    public PrinterTaskQueueModule()\\\\n    {\\\\n        _tasks = new List\u003CPrinterTask\u003E();\\\\n    }\\\\n\\\\n    public bool Main(string dataFolder)\\\\n    {\\\\n        _dataFilePath = Path.Combine(dataFolder, \\\\\\\u0022printer_tasks.json\\\\\\\u0022);\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022Printer Task Queue Manager module is running.\\\\\\\u0022);\\\\n        Console.WriteLine(\\\\\\\u0022Loading tasks from \\\\\\\u0022 \u002B _dataFilePath);\\\\n        \\\\n        LoadTasks();\\\\n        \\\\n        bool running = true;\\\\n        while (running)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022\\\\\\\\nOptions:\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u00221. Add Task\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u00222. Process Next Task\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u00223. List All Tasks\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u00224. Save and Exit\\\\\\\u0022);\\\\n            Console.Write(\\\\\\\u0022Enter choice: \\\\\\\u0022);\\\\n            \\\\n            var input = Console.ReadLine();\\\\n            \\\\n            switch (input)\\\\n            {\\\\n                case \\\\\\\u00221\\\\\\\u0022:\\\\n                    AddTask();\\\\n                    break;\\\\n                case \\\\\\\u00222\\\\\\\u0022:\\\\n                    ProcessNextTask();\\\\n                    break;\\\\n                case \\\\\\\u00223\\\\\\\u0022:\\\\n                    ListAllTasks();\\\\n                    break;\\\\n                case \\\\\\\u00224\\\\\\\u0022:\\\\n                    SaveTasks();\\\\n                    running = false;\\\\n                    break;\\\\n                default:\\\\n                    Console.WriteLine(\\\\\\\u0022Invalid option. Please try again.\\\\\\\u0022);\\\\n                    break;\\\\n            }\\\\n        }\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022Printer Task Queue Manager module completed.\\\\\\\u0022);\\\\n        return true;\\\\n    }\\\\n    \\\\n    private void LoadTasks()\\\\n    {\\\\n        try\\\\n        {\\\\n            if (File.Exists(_dataFilePath))\\\\n            {\\\\n                var json = File.ReadAllText(_dataFilePath);\\\\n                _tasks = JsonSerializer.Deserialize\u003CList\u003CPrinterTask\u003E\u003E(json);\\\\n                Console.WriteLine(\\\\\\\u0022Loaded \\\\\\\u0022 \u002B _tasks.Count \u002B \\\\\\\u0022 tasks.\\\\\\\u0022);\\\\n            }\\\\n            else\\\\n            {\\\\n                Console.WriteLine(\\\\\\\u0022No existing task file found. Starting with empty queue.\\\\\\\u0022);\\\\n            }\\\\n        }\\\\n        catch (Exception ex)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022Error loading tasks: \\\\\\\u0022 \u002B ex.Message);\\\\n            _tasks = new List\u003CPrinterTask\u003E();\\\\n        }\\\\n    }\\\\n    \\\\n    private void SaveTasks()\\\\n    {\\\\n        try\\\\n        {\\\\n            var options = new JsonSerializerOptions { WriteIndented = true };\\\\n            var json = JsonSerializer.Serialize(_tasks, options);\\\\n            File.WriteAllText(_dataFilePath, json);\\\\n            Console.WriteLine(\\\\\\\u0022Tasks saved successfully.\\\\\\\u0022);\\\\n        }\\\\n        catch (Exception ex)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022Error saving tasks: \\\\\\\u0022 \u002B ex.Message);\\\\n        }\\\\n    }\\\\n    \\\\n    private void AddTask()\\\\n    {\\\\n        Console.Write(\\\\\\\u0022Enter document name: \\\\\\\u0022);\\\\n        var name = Console.ReadLine();\\\\n        \\\\n        Console.Write(\\\\\\\u0022Enter priority (1=Low, 2=Medium, 3=High): \\\\\\\u0022);\\\\n        if (!int.TryParse(Console.ReadLine(), out int priority) || priority \u003C 1 || priority \u003E 3)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022Invalid priority. Using Medium priority.\\\\\\\u0022);\\\\n            priority = 2;\\\\n        }\\\\n        \\\\n        var task = new PrinterTask\\\\n        {\\\\n            Id = Guid.NewGuid(),\\\\n            DocumentName = name,\\\\n            Priority = priority,\\\\n            CreatedAt = DateTime.Now\\\\n        };\\\\n        \\\\n        _tasks.Add(task);\\\\n        _tasks.Sort((x, y) =\u003E y.Priority.CompareTo(x.Priority));\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022Task added successfully.\\\\\\\u0022);\\\\n    }\\\\n    \\\\n    private void ProcessNextTask()\\\\n    {\\\\n        if (_tasks.Count == 0)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022No tasks in queue.\\\\\\\u0022);\\\\n            return;\\\\n        }\\\\n        \\\\n        var task = _tasks[0];\\\\n        _tasks.RemoveAt(0);\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022Processing task: \\\\\\\u0022 \u002B task.DocumentName);\\\\n        Console.WriteLine(\\\\\\\u0022Priority: \\\\\\\u0022 \u002B GetPriorityName(task.Priority));\\\\n        Console.WriteLine(\\\\\\\u0022Created at: \\\\\\\u0022 \u002B task.CreatedAt);\\\\n    }\\\\n    \\\\n    private void ListAllTasks()\\\\n    {\\\\n        if (_tasks.Count == 0)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022No tasks in queue.\\\\\\\u0022);\\\\n            return;\\\\n        }\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022Current Task Queue:\\\\\\\u0022);\\\\n        Console.WriteLine(\\\\\\\u0022------------------\\\\\\\u0022);\\\\n        \\\\n        foreach (var task in _tasks)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022Document: \\\\\\\u0022 \u002B task.DocumentName);\\\\n            Console.WriteLine(\\\\\\\u0022Priority: \\\\\\\u0022 \u002B GetPriorityName(task.Priority));\\\\n            Console.WriteLine(\\\\\\\u0022Created: \\\\\\\u0022 \u002B task.CreatedAt);\\\\n            Console.WriteLine(\\\\\\\u0022------------------\\\\\\\u0022);\\\\n        }\\\\n    }\\\\n    \\\\n    private string GetPriorityName(int priority)\\\\n    {\\\\n        return priority switch\\\\n        {\\\\n            1 =\u003E \\\\\\\u0022Low\\\\\\\u0022,\\\\n            2 =\u003E \\\\\\\u0022Medium\\\\\\\u0022,\\\\n            3 =\u003E \\\\\\\u0022High\\\\\\\u0022,\\\\n            _ =\u003E \\\\\\\u0022Unknown\\\\\\\u0022\\\\n        };\\\\n    }\\\\n}\\\\n\\\\npublic class PrinterTask\\\\n{\\\\n    public Guid Id { get; set; }\\\\n    public string DocumentName { get; set; }\\\\n    public int Priority { get; set; }\\\\n    public DateTime CreatedAt { get; set; }\\\\n}\\\u0022,\\n  \\\u0022name\\\u0022: \\\u0022Printer Task Queue Manager\\\u0022,\\n  \\\u0022description\\\u0022: \\\u0022Manages a printer task queue with priority levels (Low, Medium, High). Allows adding, processing, and listing tasks, with persistence to JSON files.\\\u0022,\\n  \\\u0022required_apis\\\u0022: [],\\n  \\\u0022required_nugets\\\u0022: []\\n}\\n\u0060\u0060\u0060\u0022},\u0022logprobs\u0022:null,\u0022finish_reason\u0022:\u0022stop\u0022}],\u0022usage\u0022:{\u0022prompt_tokens\u0022:522,\u0022completion_tokens\u0022:1416,\u0022total_tokens\u0022:1938,\u0022prompt_tokens_details\u0022:{\u0022cached_tokens\u0022:512},\u0022prompt_cache_hit_tokens\u0022:512,\u0022prompt_cache_miss_tokens\u0022:10},\u0022system_fingerprint\u0022:\u0022fp_3d5141a69a_prod0225\u0022}","ResponseFormat":{"type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"source_code":{"type":"string"},"required_apis":{"type":"array","items":{"type":"string"}},"required_nugets":{"type":"array","items":{"type":"object","properties":{"nuget_name":{"type":"string"},"nuget_version":{"type":"string"}}}}},"required":["name","description","source_code"]},"CreationTime":"2025-04-04T19:30:25.730357Z","CompletionTime":"2025-04-04T19:31:19.907558Z","responseType":null,"TaskUUID":"15cad93e-c8b2-4f36-9e48-a59bba1590c0","ModuleName":"ModuleCreator"}