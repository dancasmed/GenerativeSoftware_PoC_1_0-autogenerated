
{"id":"594f44cc-4fc9-425a-89b5-f7a239a5dfb8","object":"chat.completion","created":1744178567,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ProjectDeadlineManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Project Deadline Manager\\\";\\n\\n    private string _dataFilePath;\\n    private List<Project> _projects;\\n\\n    public ProjectDeadlineManager()\\n    {\\n        _projects = new List<Project>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Project Deadline Manager module is running.\\\");\\n        _dataFilePath = Path.Combine(dataFolder, \\\"projects.json\\\");\\n\\n        LoadProjects();\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddProject();\\n                    break;\\n                case \\\"2\\\":\\n                    ListProjects();\\n                    break;\\n                case \\\"3\\\":\\n                    UpdateProject();\\n                    break;\\n                case \\\"4\\\":\\n                    DeleteProject();\\n                    break;\\n                case \\\"5\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveProjects();\\n        Console.WriteLine(\\\"Project Deadline Manager module finished.\\\");\\n        return true;\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nProject Deadline Manager\\\");\\n        Console.WriteLine(\\\"1. Add Project\\\");\\n        Console.WriteLine(\\\"2. List Projects\\\");\\n        Console.WriteLine(\\\"3. Update Project\\\");\\n        Console.WriteLine(\\\"4. Delete Project\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddProject()\\n    {\\n        Console.Write(\\\"Enter project name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter project description: \\\");\\n        string description = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter deadline (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime deadline))\\n        {\\n            Console.WriteLine(\\\"Invalid date format.\\\");\\n            return;\\n        }\\n\\n        var project = new Project\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Name = name,\\n            Description = description,\\n            Deadline = deadline,\\n            Milestones = new List<Milestone>()\\n        };\\n\\n        _projects.Add(project);\\n        Console.WriteLine(\\\"Project added successfully.\\\");\\n    }\\n\\n    private void ListProjects()\\n    {\\n        if (_projects.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No projects found.\\\");\\n            return;\\n        }\\n\\n        foreach (var project in _projects)\\n        {\\n            Console.WriteLine(\\\"\\\\nProject: \\\" + project.Name);\\n            Console.WriteLine(\\\"Description: \\\" + project.Description);\\n            Console.WriteLine(\\\"Deadline: \\\" + project.Deadline.ToString(\\\"yyyy-MM-dd\\\"));\\n            Console.WriteLine(\\\"Milestones:\\\");\\n\\n            if (project.Milestones.Count == 0)\\n            {\\n                Console.WriteLine(\\\"  No milestones.\\\");\\n            }\\n            else\\n            {\\n                foreach (var milestone in project.Milestones)\\n                {\\n                    Console.WriteLine(\\\"  - \\\" + milestone.Name + \\\" (Due: \\\" + milestone.DueDate.ToString(\\\"yyyy-MM-dd\\\") + \\\")\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    private void UpdateProject()\\n    {\\n        ListProjects();\\n        if (_projects.Count == 0) return;\\n\\n        Console.Write(\\\"Enter project ID to update: \\\");\\n        string id = Console.ReadLine();\\n\\n        var project = _projects.Find(p => p.Id == id);\\n        if (project == null)\\n        {\\n            Console.WriteLine(\\\"Project not found.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter new project name (leave empty to keep current): \\\");\\n        string name = Console.ReadLine();\\n        if (!string.IsNullOrEmpty(name))\\n        {\\n            project.Name = name;\\n        }\\n\\n        Console.Write(\\\"Enter new project description (leave empty to keep current): \\\");\\n        string description = Console.ReadLine();\\n        if (!string.IsNullOrEmpty(description))\\n        {\\n            project.Description = description;\\n        }\\n\\n        Console.Write(\\\"Enter new deadline (yyyy-MM-dd, leave empty to keep current): \\\");\\n        string dateInput = Console.ReadLine();\\n        if (!string.IsNullOrEmpty(dateInput) && DateTime.TryParse(dateInput, out DateTime newDeadline))\\n        {\\n            project.Deadline = newDeadline;\\n        }\\n\\n        Console.WriteLine(\\\"Project updated successfully.\\\");\\n    }\\n\\n    private void DeleteProject()\\n    {\\n        ListProjects();\\n        if (_projects.Count == 0) return;\\n\\n        Console.Write(\\\"Enter project ID to delete: \\\");\\n        string id = Console.ReadLine();\\n\\n        var project = _projects.Find(p => p.Id == id);\\n        if (project == null)\\n        {\\n            Console.WriteLine(\\\"Project not found.\\\");\\n            return;\\n        }\\n\\n        _projects.Remove(project);\\n        Console.WriteLine(\\\"Project deleted successfully.\\\");\\n    }\\n\\n    private void LoadProjects()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                _projects = JsonSerializer.Deserialize<List<Project>>(json);\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Error loading projects: \\\" + ex.Message);\\n            }\\n        }\\n    }\\n\\n    private void SaveProjects()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_projects);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving projects: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class Project\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public DateTime Deadline { get; set; }\\n    public List<Milestone> Milestones { get; set; }\\n}\\n\\npublic class Milestone\\n{\\n    public string Name { get; set; }\\n    public DateTime DueDate { get; set; }\\n}\",\n  \"name\": \"Project Deadline Manager\",\n  \"description\": \"A module to manage project deadlines and milestones with CRUD operations and JSON persistence\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1627,"total_tokens":2148,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}