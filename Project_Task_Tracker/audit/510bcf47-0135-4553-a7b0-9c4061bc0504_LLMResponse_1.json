
{"id":"8a0cf6b1-1301-47d2-b47f-c02a7eebb7d2","object":"chat.completion","created":1743786895,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ProjectTaskTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Project Task Tracker\\\";\\n\\n    private string _tasksFilePath;\\n    private string _membersFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Project Task Tracker module...\\\");\\n\\n        _tasksFilePath = Path.Combine(dataFolder, \\\"tasks.json\\\");\\n        _membersFilePath = Path.Combine(dataFolder, \\\"members.json\\\");\\n\\n        EnsureDataFilesExist();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddTask();\\n                    break;\\n                case \\\"2\\\":\\n                    AssignTask();\\n                    break;\\n                case \\\"3\\\":\\n                    ViewTasks();\\n                    break;\\n                case \\\"4\\\":\\n                    AddTeamMember();\\n                    break;\\n                case \\\"5\\\":\\n                    ViewTeamMembers();\\n                    break;\\n                case \\\"6\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Project Task Tracker module completed successfully.\\\");\\n        return true;\\n    }\\n\\n    private void EnsureDataFilesExist()\\n    {\\n        if (!File.Exists(_tasksFilePath))\\n        {\\n            File.WriteAllText(_tasksFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_membersFilePath))\\n        {\\n            File.WriteAllText(_membersFilePath, \\\"[]\\\");\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nProject Task Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Task\\\");\\n        Console.WriteLine(\\\"2. Assign Task to Team Member\\\");\\n        Console.WriteLine(\\\"3. View All Tasks\\\");\\n        Console.WriteLine(\\\"4. Add Team Member\\\");\\n        Console.WriteLine(\\\"5. View Team Members\\\");\\n        Console.WriteLine(\\\"6. Exit Module\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddTask()\\n    {\\n        Console.Write(\\\"Enter task description: \\\");\\n        var description = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter task priority (High/Medium/Low): \\\");\\n        var priority = Console.ReadLine();\\n\\n        var tasks = LoadTasks();\\n        tasks.Add(new ProjectTask\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Description = description,\\n            Priority = priority,\\n            Status = \\\"Pending\\\",\\n            AssignedMemberId = null\\n        });\\n\\n        SaveTasks(tasks);\\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n    }\\n\\n    private void AssignTask()\\n    {\\n        var tasks = LoadTasks();\\n        var members = LoadTeamMembers();\\n\\n        if (tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available to assign.\\\");\\n            return;\\n        }\\n\\n        if (members.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No team members available to assign tasks to.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"Available Tasks:\\\");\\n        for (int i = 0; i < tasks.Count; i++)\\n        {\\n            Console.WriteLine($\\\"{i + 1}. {tasks[i].Description} (Status: {tasks[i].Status})\\\");\\n        }\\n\\n        Console.Write(\\\"Select task number to assign: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int taskIndex) || taskIndex < 1 || taskIndex > tasks.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid task selection.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Team Members:\\\");\\n        for (int i = 0; i < members.Count; i++)\\n        {\\n            Console.WriteLine($\\\"{i + 1}. {members[i].Name}\\\");\\n        }\\n\\n        Console.Write(\\\"Select team member number: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int memberIndex) || memberIndex < 1 || memberIndex > members.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid team member selection.\\\");\\n            return;\\n        }\\n\\n        tasks[taskIndex - 1].AssignedMemberId = members[memberIndex - 1].Id;\\n        tasks[taskIndex - 1].Status = \\\"Assigned\\\";\\n\\n        SaveTasks(tasks);\\n        Console.WriteLine(\\\"Task assigned successfully.\\\");\\n    }\\n\\n    private void ViewTasks()\\n    {\\n        var tasks = LoadTasks();\\n        var members = LoadTeamMembers();\\n\\n        if (tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nCurrent Tasks:\\\");\\n        foreach (var task in tasks)\\n        {\\n            var memberName = \\\"Unassigned\\\";\\n            if (!string.IsNullOrEmpty(task.AssignedMemberId))\\n            {\\n                var member = members.Find(m => m.Id == task.AssignedMemberId);\\n                memberName = member?.Name ?? \\\"Unknown\\\";\\n            }\\n\\n            Console.WriteLine($\\\"Task: {task.Description}\\\");\\n            Console.WriteLine($\\\"Priority: {task.Priority}\\\");\\n            Console.WriteLine($\\\"Status: {task.Status}\\\");\\n            Console.WriteLine($\\\"Assigned to: {memberName}\\\");\\n            Console.WriteLine(\\\"-----------------------\\\");\\n        }\\n    }\\n\\n    private void AddTeamMember()\\n    {\\n        Console.Write(\\\"Enter team member name: \\\");\\n        var name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter team member role: \\\");\\n        var role = Console.ReadLine();\\n\\n        var members = LoadTeamMembers();\\n        members.Add(new TeamMember\\n        {\\n            Id = Guid.NewGuid().ToString(),\\n            Name = name,\\n            Role = role\\n        });\\n\\n        SaveTeamMembers(members);\\n        Console.WriteLine(\\\"Team member added successfully.\\\");\\n    }\\n\\n    private void ViewTeamMembers()\\n    {\\n        var members = LoadTeamMembers();\\n\\n        if (members.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No team members available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nTeam Members:\\\");\\n        foreach (var member in members)\\n        {\\n            Console.WriteLine($\\\"Name: {member.Name}\\\");\\n            Console.WriteLine($\\\"Role: {member.Role}\\\");\\n            Console.WriteLine(\\\"-----------------------\\\");\\n        }\\n    }\\n\\n    private List<ProjectTask> LoadTasks()\\n    {\\n        var json = File.ReadAllText(_tasksFilePath);\\n        return JsonSerializer.Deserialize<List<ProjectTask>>(json) ?? new List<ProjectTask>();\\n    }\\n\\n    private void SaveTasks(List<ProjectTask> tasks)\\n    {\\n        var json = JsonSerializer.Serialize(tasks);\\n        File.WriteAllText(_tasksFilePath, json);\\n    }\\n\\n    private List<TeamMember> LoadTeamMembers()\\n    {\\n        var json = File.ReadAllText(_membersFilePath);\\n        return JsonSerializer.Deserialize<List<TeamMember>>(json) ?? new List<TeamMember>();\\n    }\\n\\n    private void SaveTeamMembers(List<TeamMember> members)\\n    {\\n        var json = JsonSerializer.Serialize(members);\\n        File.WriteAllText(_membersFilePath, json);\\n    }\\n}\\n\\npublic class ProjectTask\\n{\\n    public string Id { get; set; }\\n    public string Description { get; set; }\\n    public string Priority { get; set; }\\n    public string Status { get; set; }\\n    public string AssignedMemberId { get; set; }\\n}\\n\\npublic class TeamMember\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public string Role { get; set; }\\n}\",\n  \"name\": \"Project Task Tracker\",\n  \"description\": \"A module for tracking project tasks and team member assignments with persistence to JSON files.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":2011,"total_tokens":2530,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":71},"system_fingerprint":"fp_3d5141a69a_prod0225"}