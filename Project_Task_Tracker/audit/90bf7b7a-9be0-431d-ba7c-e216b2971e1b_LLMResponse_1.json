
{"id":"e23f83e4-f55a-4ccf-b3ff-130a313c7872","object":"chat.completion","created":1743788568,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ProjectTaskTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Project Task Tracker\\\";\\n\\n    private string tasksFilePath;\\n    private string membersFilePath;\\n\\n    private List<ProjectTask> tasks;\\n    private List<TeamMember> teamMembers;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Project Task Tracker...\\\");\\n        \\n        tasksFilePath = Path.Combine(dataFolder, \\\"tasks.json\\\");\\n        membersFilePath = Path.Combine(dataFolder, \\\"members.json\\\");\\n\\n        LoadData();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddTask();\\n                    break;\\n                case \\\"2\\\":\\n                    AddTeamMember();\\n                    break;\\n                case \\\"3\\\":\\n                    AssignTask();\\n                    break;\\n                case \\\"4\\\":\\n                    ViewTasks();\\n                    break;\\n                case \\\"5\\\":\\n                    SaveData();\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Project Task Tracker has finished its execution.\\\");\\n        return true;\\n    }\\n\\n    private void LoadData()\\n    {\\n        try\\n        {\\n            if (File.Exists(tasksFilePath))\\n            {\\n                string json = File.ReadAllText(tasksFilePath);\\n                tasks = JsonSerializer.Deserialize<List<ProjectTask>>(json);\\n            }\\n            else\\n            {\\n                tasks = new List<ProjectTask>();\\n            }\\n\\n            if (File.Exists(membersFilePath))\\n            {\\n                string json = File.ReadAllText(membersFilePath);\\n                teamMembers = JsonSerializer.Deserialize<List<TeamMember>>(json);\\n            }\\n            else\\n            {\\n                teamMembers = new List<TeamMember>();\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading data: \\\" + ex.Message);\\n            tasks = new List<ProjectTask>();\\n            teamMembers = new List<TeamMember>();\\n        }\\n    }\\n\\n    private void SaveData()\\n    {\\n        try\\n        {\\n            Directory.CreateDirectory(Path.GetDirectoryName(tasksFilePath));\\n            \\n            string tasksJson = JsonSerializer.Serialize(tasks);\\n            File.WriteAllText(tasksFilePath, tasksJson);\\n            \\n            string membersJson = JsonSerializer.Serialize(teamMembers);\\n            File.WriteAllText(membersFilePath, membersJson);\\n            \\n            Console.WriteLine(\\\"Data saved successfully.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nProject Task Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Task\\\");\\n        Console.WriteLine(\\\"2. Add Team Member\\\");\\n        Console.WriteLine(\\\"3. Assign Task to Member\\\");\\n        Console.WriteLine(\\\"4. View All Tasks\\\");\\n        Console.WriteLine(\\\"5. Exit and Save\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddTask()\\n    {\\n        Console.Write(\\\"Enter task name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter task description: \\\");\\n        string description = Console.ReadLine();\\n        \\n        tasks.Add(new ProjectTask\\n        {\\n            Id = tasks.Count + 1,\\n            Name = name,\\n            Description = description,\\n            Status = \\\"Pending\\\"\\n        });\\n        \\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n    }\\n\\n    private void AddTeamMember()\\n    {\\n        Console.Write(\\\"Enter member name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter member email: \\\");\\n        string email = Console.ReadLine();\\n        \\n        teamMembers.Add(new TeamMember\\n        {\\n            Id = teamMembers.Count + 1,\\n            Name = name,\\n            Email = email\\n        });\\n        \\n        Console.WriteLine(\\\"Team member added successfully.\\\");\\n    }\\n\\n    private void AssignTask()\\n    {\\n        if (tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available to assign.\\\");\\n            return;\\n        }\\n        \\n        if (teamMembers.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No team members available.\\\");\\n            return;\\n        }\\n        \\n        ViewTasks();\\n        Console.Write(\\\"Enter task ID to assign: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int taskId))\\n        {\\n            Console.WriteLine(\\\"Invalid task ID.\\\");\\n            return;\\n        }\\n        \\n        var task = tasks.Find(t => t.Id == taskId);\\n        if (task == null)\\n        {\\n            Console.WriteLine(\\\"Task not found.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Available team members:\\\");\\n        foreach (var member in teamMembers)\\n        {\\n            Console.WriteLine(member.Id + \\\". \\\" + member.Name);\\n        }\\n        \\n        Console.Write(\\\"Enter member ID to assign: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int memberId))\\n        {\\n            Console.WriteLine(\\\"Invalid member ID.\\\");\\n            return;\\n        }\\n        \\n        var member = teamMembers.Find(m => m.Id == memberId);\\n        if (member == null)\\n        {\\n            Console.WriteLine(\\\"Member not found.\\\");\\n            return;\\n        }\\n        \\n        task.AssignedMemberId = memberId;\\n        task.Status = \\\"Assigned\\\";\\n        \\n        Console.WriteLine(\\\"Task assigned successfully to \\\" + member.Name);\\n    }\\n\\n    private void ViewTasks()\\n    {\\n        if (tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nCurrent Tasks:\\\");\\n        foreach (var task in tasks)\\n        {\\n            string assignedTo = \\\"Unassigned\\\";\\n            if (task.AssignedMemberId.HasValue)\\n            {\\n                var member = teamMembers.Find(m => m.Id == task.AssignedMemberId.Value);\\n                assignedTo = member != null ? member.Name : \\\"Unknown\\\";\\n            }\\n            \\n            Console.WriteLine($\\\"ID: {task.Id}, Name: {task.Name}, Status: {task.Status}, Assigned To: {assignedTo}\\\");\\n        }\\n    }\\n}\\n\\npublic class ProjectTask\\n{\\n    public int Id { get; set; }\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public string Status { get; set; }\\n    public int? AssignedMemberId { get; set; }\\n}\\n\\npublic class TeamMember\\n{\\n    public int Id { get; set; }\\n    public string Name { get; set; }\\n    public string Email { get; set; }\\n}\",\n  \"name\": \"Project Task Tracker\",\n  \"description\": \"A module for tracking project tasks and team member assignments with persistence to JSON files.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1828,"total_tokens":2347,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":519},"system_fingerprint":"fp_3d5141a69a_prod0225"}