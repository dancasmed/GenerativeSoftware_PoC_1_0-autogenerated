{"id":"3e632022-253c-407c-8ea5-9448a7c1bfb6","object":"chat.completion","created":1743790519,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"Here's the JSON response with the generated C# code for a recipe management module:\n\n```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class RecipeManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Recipe Manager\\\";\\n    \\n    private List<Recipe> _recipes = new List<Recipe>();\\n    private string _dataFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Recipe Manager module starting...\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"recipes.json\\\");\\n        \\n        LoadRecipes();\\n        \\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddRecipe();\\n                    break;\\n                case \\\"2\\\":\\n                    ListRecipes();\\n                    break;\\n                case \\\"3\\\":\\n                    SearchByIngredient();\\n                    break;\\n                case \\\"4\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveRecipes();\\n        Console.WriteLine(\\\"Recipe Manager module completed successfully.\\\");\\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nRecipe Manager Menu\\\");\\n        Console.WriteLine(\\\"1. Add new recipe\\\");\\n        Console.WriteLine(\\\"2. List all recipes\\\");\\n        Console.WriteLine(\\\"3. Search recipes by ingredient\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddRecipe()\\n    {\\n        Console.Write(\\\"Enter recipe name: \\\");\\n        var name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter recipe description: \\\");\\n        var description = Console.ReadLine();\\n        \\n        var ingredients = new List<string>();\\n        Console.WriteLine(\\\"Enter ingredients (one per line, empty line to finish):\\\");\\n        \\n        while (true)\\n        {\\n            var ingredient = Console.ReadLine();\\n            if (string.IsNullOrWhiteSpace(ingredient))\\n                break;\\n            \\n            ingredients.Add(ingredient.Trim());\\n        }\\n        \\n        _recipes.Add(new Recipe\\n        {\\n            Name = name,\\n            Description = description,\\n            Ingredients = ingredients\\n        });\\n        \\n        Console.WriteLine(\\\"Recipe added successfully.\\\");\\n    }\\n    \\n    private void ListRecipes()\\n    {\\n        if (_recipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nAvailable Recipes:\\\");\\n        foreach (var recipe in _recipes)\\n        {\\n            Console.WriteLine(\\\"Name: \\\" + recipe.Name);\\n            Console.WriteLine(\\\"Description: \\\" + recipe.Description);\\n            Console.WriteLine(\\\"Ingredients: \\\" + string.Join(\\\", \\\", recipe.Ingredients));\\n            Console.WriteLine();\\n        }\\n    }\\n    \\n    private void SearchByIngredient()\\n    {\\n        Console.Write(\\\"Enter ingredient to search: \\\");\\n        var searchTerm = Console.ReadLine()?.Trim().ToLower();\\n        \\n        if (string.IsNullOrWhiteSpace(searchTerm))\\n        {\\n            Console.WriteLine(\\\"Invalid search term.\\\");\\n            return;\\n        }\\n        \\n        var matchingRecipes = _recipes\\n            .Where(r => r.Ingredients.Any(i => i.ToLower().Contains(searchTerm)))\\n            .ToList();\\n        \\n        if (matchingRecipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes found with that ingredient.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nMatching Recipes:\\\");\\n        foreach (var recipe in matchingRecipes)\\n        {\\n            Console.WriteLine(\\\"Name: \\\" + recipe.Name);\\n            Console.WriteLine(\\\"Description: \\\" + recipe.Description);\\n            Console.WriteLine(\\\"Ingredients: \\\" + string.Join(\\\", \\\", recipe.Ingredients));\\n            Console.WriteLine();\\n        }\\n    }\\n    \\n    private void LoadRecipes()\\n    {\\n        if (!File.Exists(_dataFilePath))\\n            return;\\n        \\n        try\\n        {\\n            var json = File.ReadAllText(_dataFilePath);\\n            _recipes = JsonSerializer.Deserialize<List<Recipe>>(json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading recipes: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void SaveRecipes()\\n    {\\n        try\\n        {\\n            var json = JsonSerializer.Serialize(_recipes);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving recipes: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class Recipe\\n{\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public List<string> Ingredients { get; set; } = new List<string>();\\n}\",\n  \"name\": \"Recipe Manager\",\n  \"description\": \"A module for managing recipes with ingredient search functionality\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1361,"total_tokens":1881,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}