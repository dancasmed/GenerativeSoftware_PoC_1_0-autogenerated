{"id":"c2986dc3-d368-47fe-a43d-0a345550ae94","object":"chat.completion","created":1743794577,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class RecipeManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Recipe Manager\\\";\\n    \\n    private List<Recipe> _recipes;\\n    private string _dataFilePath;\\n    \\n    public RecipeManager()\\n    {\\n        _recipes = new List<Recipe>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Recipe Manager module is running...\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"recipes.json\\\");\\n        \\n        try\\n        {\\n            LoadRecipes();\\n            \\n            bool exit = false;\\n            while (!exit)\\n            {\\n                Console.WriteLine(\\\"\\\\nRecipe Manager Menu:\\\");\\n                Console.WriteLine(\\\"1. Add Recipe\\\");\\n                Console.WriteLine(\\\"2. List All Recipes\\\");\\n                Console.WriteLine(\\\"3. Search Recipes by Ingredient\\\");\\n                Console.WriteLine(\\\"4. Exit\\\");\\n                Console.Write(\\\"Select an option: \\\");\\n                \\n                var input = Console.ReadLine();\\n                \\n                switch (input)\\n                {\\n                    case \\\"1\\\":\\n                        AddRecipe();\\n                        break;\\n                    case \\\"2\\\":\\n                        ListAllRecipes();\\n                        break;\\n                    case \\\"3\\\":\\n                        SearchRecipesByIngredient();\\n                        break;\\n                    case \\\"4\\\":\\n                        exit = true;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            \\n            SaveRecipes();\\n            Console.WriteLine(\\\"Recipe Manager module finished.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private void LoadRecipes()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            var json = File.ReadAllText(_dataFilePath);\\n            _recipes = JsonSerializer.Deserialize<List<Recipe>>(json) ?? new List<Recipe>();\\n            Console.WriteLine(\\\"Recipes loaded successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"No existing recipes found. Starting with empty collection.\\\");\\n        }\\n    }\\n    \\n    private void SaveRecipes()\\n    {\\n        var json = JsonSerializer.Serialize(_recipes, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(_dataFilePath, json);\\n        Console.WriteLine(\\\"Recipes saved successfully.\\\");\\n    }\\n    \\n    private void AddRecipe()\\n    {\\n        Console.Write(\\\"Enter recipe name: \\\");\\n        var name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter recipe description: \\\");\\n        var description = Console.ReadLine();\\n        \\n        var ingredients = new List<string>();\\n        Console.WriteLine(\\\"Enter ingredients (one per line, empty line to finish):\\\");\\n        while (true)\\n        {\\n            var ingredient = Console.ReadLine();\\n            if (string.IsNullOrWhiteSpace(ingredient))\\n                break;\\n            ingredients.Add(ingredient);\\n        }\\n        \\n        _recipes.Add(new Recipe\\n        {\\n            Name = name,\\n            Description = description,\\n            Ingredients = ingredients\\n        });\\n        \\n        Console.WriteLine(\\\"Recipe added successfully.\\\");\\n    }\\n    \\n    private void ListAllRecipes()\\n    {\\n        if (_recipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nAll Recipes:\\\");\\n        foreach (var recipe in _recipes)\\n        {\\n            Console.WriteLine(\\\"Name: \\\" + recipe.Name);\\n            Console.WriteLine(\\\"Description: \\\" + recipe.Description);\\n            Console.WriteLine(\\\"Ingredients: \\\" + string.Join(\\\", \\\", recipe.Ingredients));\\n            Console.WriteLine();\\n        }\\n    }\\n    \\n    private void SearchRecipesByIngredient()\\n    {\\n        Console.Write(\\\"Enter ingredient to search: \\\");\\n        var searchTerm = Console.ReadLine()?.Trim().ToLower();\\n        \\n        if (string.IsNullOrEmpty(searchTerm))\\n        {\\n            Console.WriteLine(\\\"Search term cannot be empty.\\\");\\n            return;\\n        }\\n        \\n        var matchingRecipes = _recipes\\n            .Where(r => r.Ingredients.Any(i => i.ToLower().Contains(searchTerm)))\\n            .ToList();\\n        \\n        if (matchingRecipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes found with that ingredient.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nMatching Recipes:\\\");\\n        foreach (var recipe in matchingRecipes)\\n        {\\n            Console.WriteLine(\\\"Name: \\\" + recipe.Name);\\n            Console.WriteLine(\\\"Description: \\\" + recipe.Description);\\n            Console.WriteLine(\\\"Ingredients: \\\" + string.Join(\\\", \\\", recipe.Ingredients));\\n            Console.WriteLine();\\n        }\\n    }\\n}\\n\\npublic class Recipe\\n{\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public List<string> Ingredients { get; set; } = new List<string>();\\n}\",\n  \"name\": \"Recipe Manager\",\n  \"description\": \"A module for managing recipes with ingredient search functionality\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":520,"completion_tokens":1348,"total_tokens":1868,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":8},"system_fingerprint":"fp_3d5141a69a_prod0225"}