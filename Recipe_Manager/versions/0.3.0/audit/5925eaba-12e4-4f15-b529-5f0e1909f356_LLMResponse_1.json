
{"id":"6bad6c35-2e12-4c08-ac17-a3e0c893a235","object":"chat.completion","created":1744174356,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class RecipeManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Recipe Manager\\\";\\n\\n    private List<Recipe> recipes;\\n    private string recipesFilePath;\\n\\n    public RecipeManager()\\n    {\\n        recipes = new List<Recipe>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Recipe Manager Module is running...\\\");\\n\\n        recipesFilePath = Path.Combine(dataFolder, \\\"recipes.json\\\");\\n\\n        LoadRecipes();\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddRecipe();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewRecipes();\\n                    break;\\n                case \\\"3\\\":\\n                    DeleteRecipe();\\n                    break;\\n                case \\\"4\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveRecipes();\\n        Console.WriteLine(\\\"Recipe Manager Module finished.\\\");\\n        return true;\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nRecipe Manager Menu:\\\");\\n        Console.WriteLine(\\\"1. Add a new recipe\\\");\\n        Console.WriteLine(\\\"2. View all recipes\\\");\\n        Console.WriteLine(\\\"3. Delete a recipe\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddRecipe()\\n    {\\n        Console.Write(\\\"Enter recipe name: \\\");\\n        string name = Console.ReadLine();\\n\\n        var ingredients = new List<string>();\\n        Console.WriteLine(\\\"Enter ingredients (one per line, empty line to finish):\\\");\\n        while (true)\\n        {\\n            string ingredient = Console.ReadLine();\\n            if (string.IsNullOrWhiteSpace(ingredient))\\n                break;\\n            ingredients.Add(ingredient);\\n        }\\n\\n        var steps = new List<string>();\\n        Console.WriteLine(\\\"Enter preparation steps (one per line, empty line to finish):\\\");\\n        while (true)\\n        {\\n            string step = Console.ReadLine();\\n            if (string.IsNullOrWhiteSpace(step))\\n                break;\\n            steps.Add(step);\\n        }\\n\\n        recipes.Add(new Recipe(name, ingredients, steps));\\n        Console.WriteLine(\\\"Recipe added successfully!\\\");\\n    }\\n\\n    private void ViewRecipes()\\n    {\\n        if (recipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Recipes:\\\");\\n        for (int i = 0; i < recipes.Count; i++)\\n        {\\n            Console.WriteLine($\\\"{i + 1}. {recipes[i].Name}\\\");\\n        }\\n\\n        Console.Write(\\\"\\\\nEnter recipe number to view details (0 to go back): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= recipes.Count)\\n        {\\n            var recipe = recipes[choice - 1];\\n            Console.WriteLine($\\\"\\\\nRecipe: {recipe.Name}\\\");\\n            Console.WriteLine(\\\"\\\\nIngredients:\\\");\\n            foreach (var ingredient in recipe.Ingredients)\\n            {\\n                Console.WriteLine(\\\"- \\\" + ingredient);\\n            }\\n\\n            Console.WriteLine(\\\"\\\\nPreparation Steps:\\\");\\n            for (int i = 0; i < recipe.Steps.Count; i++)\\n            {\\n                Console.WriteLine($\\\"{i + 1}. {recipe.Steps[i]}\\\");\\n            }\\n        }\\n    }\\n\\n    private void DeleteRecipe()\\n    {\\n        if (recipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes available to delete.\\\");\\n            return;\\n        }\\n\\n        ViewRecipes();\\n        Console.Write(\\\"\\\\nEnter recipe number to delete (0 to cancel): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= recipes.Count)\\n        {\\n            recipes.RemoveAt(choice - 1);\\n            Console.WriteLine(\\\"Recipe deleted successfully!\\\");\\n        }\\n    }\\n\\n    private void LoadRecipes()\\n    {\\n        if (File.Exists(recipesFilePath))\\n        {\\n            try\\n            {\\n                string json = File.ReadAllText(recipesFilePath);\\n                recipes = JsonSerializer.Deserialize<List<Recipe>>(json);\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine($\\\"Error loading recipes: {ex.Message}\\\");\\n            }\\n        }\\n    }\\n\\n    private void SaveRecipes()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(recipes);\\n            File.WriteAllText(recipesFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine($\\\"Error saving recipes: {ex.Message}\\\");\\n        }\\n    }\\n}\\n\\npublic class Recipe\\n{\\n    public string Name { get; set; }\\n    public List<string> Ingredients { get; set; }\\n    public List<string> Steps { get; set; }\\n\\n    public Recipe(string name, List<string> ingredients, List<string> steps)\\n    {\\n        Name = name;\\n        Ingredients = ingredients;\\n        Steps = steps;\\n    }\\n\\n    // Parameterless constructor for JSON deserialization\\n    public Recipe()\\n    {\\n        Ingredients = new List<string>();\\n        Steps = new List<string>();\\n    }\\n}\",\n  \"name\": \"Recipe Manager\",\n  \"description\": \"A module for managing personal recipes with ingredients and preparation steps\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1429,"total_tokens":1951,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":74},"system_fingerprint":"fp_3d5141a69a_prod0225"}