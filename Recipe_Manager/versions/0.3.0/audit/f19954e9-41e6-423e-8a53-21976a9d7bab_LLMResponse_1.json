
{"id":"0226b4d3-d64e-469c-95ec-d4f8121ddea7","object":"chat.completion","created":1744179644,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class RecipeManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Recipe Manager\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Recipe Manager module is running.\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n\\n        string recipesFilePath = Path.Combine(dataFolder, \\\"recipes.json\\\");\\n        List<Recipe> recipes = LoadRecipes(recipesFilePath);\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            Console.WriteLine(\\\"\\\\nRecipe Manager Menu:\\\");\\n            Console.WriteLine(\\\"1. Add Recipe\\\");\\n            Console.WriteLine(\\\"2. View Recipes\\\");\\n            Console.WriteLine(\\\"3. Delete Recipe\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            string input = Console.ReadLine();\\n            if (int.TryParse(input, out int choice))\\n            {\\n                switch (choice)\\n                {\\n                    case 1:\\n                        AddRecipe(recipes);\\n                        break;\\n                    case 2:\\n                        ViewRecipes(recipes);\\n                        break;\\n                    case 3:\\n                        DeleteRecipe(recipes);\\n                        break;\\n                    case 4:\\n                        exit = true;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n            }\\n\\n            SaveRecipes(recipes, recipesFilePath);\\n        }\\n\\n        return true;\\n    }\\n\\n    private List<Recipe> LoadRecipes(string filePath)\\n    {\\n        if (!File.Exists(filePath))\\n        {\\n            return new List<Recipe>();\\n        }\\n\\n        string json = File.ReadAllText(filePath);\\n        return JsonSerializer.Deserialize<List<Recipe>>(json) ?? new List<Recipe>();\\n    }\\n\\n    private void SaveRecipes(List<Recipe> recipes, string filePath)\\n    {\\n        string json = JsonSerializer.Serialize(recipes, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private void AddRecipe(List<Recipe> recipes)\\n    {\\n        Console.Write(\\\"Enter recipe name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter recipe description: \\\");\\n        string description = Console.ReadLine();\\n\\n        List<Ingredient> ingredients = new List<Ingredient>();\\n        bool addingIngredients = true;\\n        while (addingIngredients)\\n        {\\n            Console.Write(\\\"Enter ingredient name (or 'done' to finish): \\\");\\n            string ingredientName = Console.ReadLine();\\n            if (ingredientName.ToLower() == \\\"done\\\")\\n            {\\n                addingIngredients = false;\\n                continue;\\n            }\\n\\n            Console.Write(\\\"Enter quantity: \\\");\\n            string quantity = Console.ReadLine();\\n\\n            Console.Write(\\\"Enter unit (e.g., grams, cups): \\\");\\n            string unit = Console.ReadLine();\\n\\n            ingredients.Add(new Ingredient\\n            {\\n                Name = ingredientName,\\n                Quantity = quantity,\\n                Unit = unit\\n            });\\n        }\\n\\n        Console.Write(\\\"Enter instructions (one step per line, type 'done' to finish):\\\\n\\\");\\n        List<string> instructions = new List<string>();\\n        while (true)\\n        {\\n            string step = Console.ReadLine();\\n            if (step.ToLower() == \\\"done\\\")\\n                break;\\n            instructions.Add(step);\\n        }\\n\\n        NutritionalInfo nutritionalInfo = new NutritionalInfo();\\n        Console.Write(\\\"Enter calories: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int calories))\\n            nutritionalInfo.Calories = calories;\\n\\n        Console.Write(\\\"Enter protein (g): \\\");\\n        if (double.TryParse(Console.ReadLine(), out double protein))\\n            nutritionalInfo.Protein = protein;\\n\\n        Console.Write(\\\"Enter carbs (g): \\\");\\n        if (double.TryParse(Console.ReadLine(), out double carbs))\\n            nutritionalInfo.Carbs = carbs;\\n\\n        Console.Write(\\\"Enter fat (g): \\\");\\n        if (double.TryParse(Console.ReadLine(), out double fat))\\n            nutritionalInfo.Fat = fat;\\n\\n        recipes.Add(new Recipe\\n        {\\n            Name = name,\\n            Description = description,\\n            Ingredients = ingredients,\\n            Instructions = instructions,\\n            NutritionalInfo = nutritionalInfo\\n        });\\n\\n        Console.WriteLine(\\\"Recipe added successfully.\\\");\\n    }\\n\\n    private void ViewRecipes(List<Recipe> recipes)\\n    {\\n        if (recipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Recipes:\\\");\\n        for (int i = 0; i < recipes.Count; i++)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}. {1}\\\", i + 1, recipes[i].Name));\\n        }\\n\\n        Console.Write(\\\"\\\\nEnter recipe number to view details (or 0 to go back): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= recipes.Count)\\n        {\\n            Recipe recipe = recipes[choice - 1];\\n            Console.WriteLine(string.Format(\\\"\\\\nRecipe: {0}\\\", recipe.Name));\\n            Console.WriteLine(string.Format(\\\"Description: {0}\\\", recipe.Description));\\n            Console.WriteLine(\\\"\\\\nIngredients:\\\");\\n            foreach (var ingredient in recipe.Ingredients)\\n            {\\n                Console.WriteLine(string.Format(\\\"- {0} {1} {2}\\\", ingredient.Quantity, ingredient.Unit, ingredient.Name));\\n            }\\n            Console.WriteLine(\\\"\\\\nInstructions:\\\");\\n            for (int i = 0; i < recipe.Instructions.Count; i++)\\n            {\\n                Console.WriteLine(string.Format(\\\"{0}. {1}\\\", i + 1, recipe.Instructions[i]));\\n            }\\n            Console.WriteLine(\\\"\\\\nNutritional Information:\\\");\\n            Console.WriteLine(string.Format(\\\"Calories: {0}\\\", recipe.NutritionalInfo.Calories));\\n            Console.WriteLine(string.Format(\\\"Protein: {0}g\\\", recipe.NutritionalInfo.Protein));\\n            Console.WriteLine(string.Format(\\\"Carbs: {0}g\\\", recipe.NutritionalInfo.Carbs));\\n            Console.WriteLine(string.Format(\\\"Fat: {0}g\\\", recipe.NutritionalInfo.Fat));\\n        }\\n    }\\n\\n    private void DeleteRecipe(List<Recipe> recipes)\\n    {\\n        if (recipes.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No recipes available to delete.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Recipes:\\\");\\n        for (int i = 0; i < recipes.Count; i++)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}. {1}\\\", i + 1, recipes[i].Name));\\n        }\\n\\n        Console.Write(\\\"\\\\nEnter recipe number to delete (or 0 to cancel): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int choice) && choice > 0 && choice <= recipes.Count)\\n        {\\n            recipes.RemoveAt(choice - 1);\\n            Console.WriteLine(\\\"Recipe deleted successfully.\\\");\\n        }\\n    }\\n}\\n\\npublic class Recipe\\n{\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public List<Ingredient> Ingredients { get; set; } = new List<Ingredient>();\\n    public List<string> Instructions { get; set; } = new List<string>();\\n    public NutritionalInfo NutritionalInfo { get; set; } = new NutritionalInfo();\\n}\\n\\npublic class Ingredient\\n{\\n    public string Name { get; set; }\\n    public string Quantity { get; set; }\\n    public string Unit { get; set; }\\n}\\n\\npublic class NutritionalInfo\\n{\\n    public int Calories { get; set; }\\n    public double Protein { get; set; }\\n    public double Carbs { get; set; }\\n    public double Fat { get; set; }\\n}\",\n  \"name\": \"Recipe Manager\",\n  \"description\": \"A module for managing recipes with ingredients, instructions, and nutritional information\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":2029,"total_tokens":2555,"prompt_tokens_details":{"cached_tokens":0},"prompt_cache_hit_tokens":0,"prompt_cache_miss_tokens":526},"system_fingerprint":"fp_3d5141a69a_prod0225"}