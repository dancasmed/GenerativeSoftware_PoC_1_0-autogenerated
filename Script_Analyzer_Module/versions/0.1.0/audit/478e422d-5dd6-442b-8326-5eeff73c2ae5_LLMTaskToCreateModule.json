{"UseOnlineModel":true,"OfflineModel":"deepseek-r1:70b","OnlineModel":"deepseek-chat","Description":"","SystemPrompt":"You are a helpful assistant with high skills in software development. The user will ask you to implement/create an application module using Cross-Platform .NET 9 C# code that adheres to the following interface:\n\n\u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022\n\n### Requirements:\n- The generated code must avoid using external APIs if possible, in case an API is needed add it to the list of required APIS.\n_ If the generated code needs NuGets installed add the NuGet name to the list of required Nugets.\n- The response must be in JSON format.\n- The \u0060source_code\u0060 field must contain C# code only (avoid markdown notation).\n- Do not include the IGeneratedModule in the generated source code.\n- The generated code **must not include any instructions that begin with \u0060Console.WriteLine($\u0060**.\n- If data persistence is required, use JSON files stored in the \u0060dataFolder\u0060 parameter of the \u0060Main\u0060 method.\n- Ensure the generated module is as detailed and complete as possible.\n- The constructor of the generated module must not have any parameters.\n- The generated code MUST not call Exit method. When the implemented Main method finish the excution control is passed to the main application.\n- The generated code must print information in the console to let know the user the module is running.\n\n### Example output:\n{\u0022source_code\u0022:\u0022GENERATED C# CODE\u0022,\u0022name\u0022: \u0022GENERATED NAME FOR THE MODULE\u0022,\u0022description\u0022: \u0022GENERATED DESCRIPTION FOR THE MODULE\u0022, \u0022required_apis\u0022=[{\u0022API_1\u0022},{\u0022API_2\u0022}], , \u0022required_nugets\u0022=[{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_1\u0022,\u0022nuget_version\u0022:\u00221.0.0\u0022 },{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_2\u0022,\u0022nuget_version\u0022:\u00222.0.0.0\u0022 }]}","BasePrompt":"Generate a Cross-Platform .NET 9 C# code that implements the next interface \u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022 the Main method is the start point for the module. The souce code will run on a console application. The generated code must not write strings to console like this Console.WriteLine($\u0022{variable}\u0022). The source code will be automaticallty compiled so avoid adding markdown notation or anything that is not c# code The module must: \u003CTASK_INPUT\u003E","TaskInput":"Create a tool to analyze the structure of a screenplay or script","ModelRawResponse":"{\u0022id\u0022:\u002214923b5b-55d0-48eb-9f9a-31cb0320359a\u0022,\u0022object\u0022:\u0022chat.completion\u0022,\u0022created\u0022:1744185270,\u0022model\u0022:\u0022deepseek-chat\u0022,\u0022choices\u0022:[{\u0022index\u0022:0,\u0022message\u0022:{\u0022role\u0022:\u0022assistant\u0022,\u0022content\u0022:\u0022\u0060\u0060\u0060json\\n{\\n  \\\u0022source_code\\\u0022: \\\u0022using System;\\\\nusing System.Collections.Generic;\\\\nusing System.IO;\\\\nusing System.Text.Json;\\\\n\\\\npublic class ScriptAnalyzerModule : IGeneratedModule\\\\n{\\\\n    public string Name { get; set; } = \\\\\\\u0022Script Analyzer Module\\\\\\\u0022;\\\\n\\\\n    public bool Main(string dataFolder)\\\\n    {\\\\n        Console.WriteLine(\\\\\\\u0022Script Analyzer Module is running...\\\\\\\u0022);\\\\n        \\\\n        try\\\\n        {\\\\n            string scriptPath = Path.Combine(dataFolder, \\\\\\\u0022script.txt\\\\\\\u0022);\\\\n            string analysisPath = Path.Combine(dataFolder, \\\\\\\u0022analysis.json\\\\\\\u0022);\\\\n            \\\\n            if (!File.Exists(scriptPath))\\\\n            {\\\\n                Console.WriteLine(\\\\\\\u0022Error: Script file not found in the data folder.\\\\\\\u0022);\\\\n                return false;\\\\n            }\\\\n            \\\\n            string scriptContent = File.ReadAllText(scriptPath);\\\\n            ScriptAnalysis analysis = AnalyzeScript(scriptContent);\\\\n            \\\\n            string jsonAnalysis = JsonSerializer.Serialize(analysis, new JsonSerializerOptions { WriteIndented = true });\\\\n            File.WriteAllText(analysisPath, jsonAnalysis);\\\\n            \\\\n            Console.WriteLine(\\\\\\\u0022Script analysis completed successfully.\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u0022Analysis saved to: \\\\\\\u0022 \u002B analysisPath);\\\\n            \\\\n            return true;\\\\n        }\\\\n        catch (Exception ex)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022Error during script analysis: \\\\\\\u0022 \u002B ex.Message);\\\\n            return false;\\\\n        }\\\\n    }\\\\n    \\\\n    private ScriptAnalysis AnalyzeScript(string scriptContent)\\\\n    {\\\\n        ScriptAnalysis analysis = new ScriptAnalysis();\\\\n        \\\\n        string[] lines = scriptContent.Split(new[] { \u0027\\\\\\\\n\u0027, \u0027\\\\\\\\r\u0027 }, StringSplitOptions.RemoveEmptyEntries);\\\\n        \\\\n        foreach (string line in lines)\\\\n        {\\\\n            string trimmedLine = line.Trim();\\\\n            \\\\n            if (string.IsNullOrWhiteSpace(trimmedLine))\\\\n                continue;\\\\n                \\\\n            analysis.TotalLines\u002B\u002B;\\\\n            \\\\n            if (trimmedLine.StartsWith(\\\\\\\u0022INT.\\\\\\\u0022) || trimmedLine.StartsWith(\\\\\\\u0022EXT.\\\\\\\u0022))\\\\n            {\\\\n                analysis.Scenes.Add(trimmedLine);\\\\n                analysis.SceneCount\u002B\u002B;\\\\n            }\\\\n            else if (trimmedLine.StartsWith(\\\\\\\u0022CHARACTER:\\\\\\\u0022))\\\\n            {\\\\n                string character = trimmedLine.Split(\u0027:\u0027)[0].Trim();\\\\n                if (!analysis.Characters.Contains(character))\\\\n                {\\\\n                    analysis.Characters.Add(character);\\\\n                    analysis.CharacterCount\u002B\u002B;\\\\n                }\\\\n                analysis.DialogueCount\u002B\u002B;\\\\n            }\\\\n            else if (trimmedLine.StartsWith(\\\\\\\u0022(\\\\\\\u0022) \u0026\u0026 trimmedLine.EndsWith(\\\\\\\u0022)\\\\\\\u0022))\\\\n            {\\\\n                analysis.ActionCount\u002B\u002B;\\\\n            }\\\\n            else if (trimmedLine.Length \u003E 0 \u0026\u0026 char.IsUpper(trimmedLine[0]))\\\\n            {\\\\n                // This might be a character name without the : (some script formats)\\\\n                if (!analysis.Characters.Contains(trimmedLine))\\\\n                {\\\\n                    analysis.Characters.Add(trimmedLine);\\\\n                    analysis.CharacterCount\u002B\u002B;\\\\n                }\\\\n            }\\\\n        }\\\\n        \\\\n        return analysis;\\\\n    }\\\\n}\\\\n\\\\npublic class ScriptAnalysis\\\\n{\\\\n    public int TotalLines { get; set; }\\\\n    public int SceneCount { get; set; }\\\\n    public int CharacterCount { get; set; }\\\\n    public int DialogueCount { get; set; }\\\\n    public int ActionCount { get; set; }\\\\n    public List\u003Cstring\u003E Scenes { get; set; } = new List\u003Cstring\u003E();\\\\n    public List\u003Cstring\u003E Characters { get; set; } = new List\u003Cstring\u003E();\\\\n}\\\u0022,\\n  \\\u0022name\\\u0022: \\\u0022Script Analyzer Module\\\u0022,\\n  \\\u0022description\\\u0022: \\\u0022A module that analyzes screenplay/script structure including scene count, character count, dialogue count, and action descriptions.\\\u0022,\\n  \\\u0022required_apis\\\u0022: [],\\n  \\\u0022required_nugets\\\u0022: []\\n}\\n\u0060\u0060\u0060\u0022},\u0022logprobs\u0022:null,\u0022finish_reason\u0022:\u0022stop\u0022}],\u0022usage\u0022:{\u0022prompt_tokens\u0022:524,\u0022completion_tokens\u0022:897,\u0022total_tokens\u0022:1421,\u0022prompt_tokens_details\u0022:{\u0022cached_tokens\u0022:512},\u0022prompt_cache_hit_tokens\u0022:512,\u0022prompt_cache_miss_tokens\u0022:12},\u0022system_fingerprint\u0022:\u0022fp_3d5141a69a_prod0225\u0022}","ResponseFormat":{"type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"source_code":{"type":"string"},"required_apis":{"type":"array","items":{"type":"string"}},"required_nugets":{"type":"array","items":{"type":"object","properties":{"nuget_name":{"type":"string"},"nuget_version":{"type":"string"}}}}},"required":["name","description","source_code"]},"CreationTime":"2025-04-09T07:54:30.020732Z","CompletionTime":"2025-04-09T07:55:15.883572Z","responseType":null,"TaskUUID":"478e422d-5dd6-442b-8326-5eeff73c2ae5","ModuleName":"ModuleCreator"}