{"id":"95def3e6-17bb-4ac8-90df-a0fe9ec5b015","object":"chat.completion","created":1744177353,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\n\\npublic class ShortestPathModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Shortest Path Finder\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Shortest Path Finder module is running.\\\");\\n        \\n        try\\n        {\\n            string gridFilePath = Path.Combine(dataFolder, \\\"grid.json\\\");\\n            string pointsFilePath = Path.Combine(dataFolder, \\\"points.json\\\");\\n            string outputFilePath = Path.Combine(dataFolder, \\\"path_result.json\\\");\\n\\n            if (!File.Exists(gridFilePath) || !File.Exists(pointsFilePath))\\n            {\\n                Console.WriteLine(\\\"Required input files (grid.json and points.json) not found in the data folder.\\\");\\n                return false;\\n            }\\n\\n            int[,] grid = LoadGrid(gridFilePath);\\n            var points = LoadPoints(pointsFilePath);\\n            \\n            if (grid == null || points == null)\\n            {\\n                Console.WriteLine(\\\"Failed to load grid or points data.\\\");\\n                return false;\\n            }\\n\\n            var path = FindShortestPath(grid, points.Start, points.End);\\n            \\n            if (path == null)\\n            {\\n                Console.WriteLine(\\\"No path found between the given points.\\\");\\n                return false;\\n            }\\n\\n            SavePath(outputFilePath, path);\\n            Console.WriteLine(\\\"Shortest path found and saved to path_result.json.\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private int[,] LoadGrid(string filePath)\\n    {\\n        try\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return System.Text.Json.JsonSerializer.Deserialize<int[,]>(json);\\n        }\\n        catch\\n        {\\n            return null;\\n        }\\n    }\\n\\n    private Points LoadPoints(string filePath)\\n    {\\n        try\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return System.Text.Json.JsonSerializer.Deserialize<Points>(json);\\n        }\\n        catch\\n        {\\n            return null;\\n        }\\n    }\\n\\n    private void SavePath(string filePath, List<Point> path)\\n    {\\n        string json = System.Text.Json.JsonSerializer.Serialize(path);\\n        File.WriteAllText(filePath, json);\\n    }\\n\\n    private List<Point> FindShortestPath(int[,] grid, Point start, Point end)\\n    {\\n        int rows = grid.GetLength(0);\\n        int cols = grid.GetLength(1);\\n\\n        if (start.X < 0 || start.X >= rows || start.Y < 0 || start.Y >= cols ||\\n            end.X < 0 || end.X >= rows || end.Y < 0 || end.Y >= cols)\\n        {\\n            return null;\\n        }\\n\\n        if (grid[start.X, start.Y] == 0 || grid[end.X, end.Y] == 0)\\n        {\\n            return null;\\n        }\\n\\n        var queue = new Queue<Point>();\\n        var visited = new bool[rows, cols];\\n        var parent = new Point[rows, cols];\\n        var directions = new[] { new Point(-1, 0), new Point(1, 0), new Point(0, -1), new Point(0, 1) };\\n\\n        queue.Enqueue(start);\\n        visited[start.X, start.Y] = true;\\n        parent[start.X, start.Y] = new Point(-1, -1);\\n\\n        while (queue.Count > 0)\\n        {\\n            var current = queue.Dequeue();\\n\\n            if (current.X == end.X && current.Y == end.Y)\\n            {\\n                return ReconstructPath(parent, end);\\n            }\\n\\n            foreach (var dir in directions)\\n            {\\n                int newX = current.X + dir.X;\\n                int newY = current.Y + dir.Y;\\n\\n                if (newX >= 0 && newX < rows && newY >= 0 && newY < cols && \\n                    grid[newX, newY] != 0 && !visited[newX, newY])\\n                {\\n                    visited[newX, newY] = true;\\n                    parent[newX, newY] = current;\\n                    queue.Enqueue(new Point(newX, newY));\\n                }\\n            }\\n        }\\n\\n        return null;\\n    }\\n\\n    private List<Point> ReconstructPath(Point[,] parent, Point end)\\n    {\\n        var path = new List<Point>();\\n        Point current = end;\\n\\n        while (current.X != -1 && current.Y != -1)\\n        {\\n            path.Add(current);\\n            current = parent[current.X, current.Y];\\n        }\\n\\n        path.Reverse();\\n        return path;\\n    }\\n}\\n\\npublic class Points\\n{\\n    public Point Start { get; set; }\\n    public Point End { get; set; }\\n}\\n\\npublic struct Point\\n{\\n    public int X { get; set; }\\n    public int Y { get; set; }\\n\\n    public Point(int x, int y)\\n    {\\n        X = x;\\n        Y = y;\\n    }\\n}\",\n  \"name\": \"Shortest Path Finder\",\n  \"description\": \"Finds the shortest path between two points in a grid using BFS algorithm.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"6.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":1355,"total_tokens":1881,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":78},"system_fingerprint":"fp_3d5141a69a_prod0225"}