
{"id":"79068deb-255e-4f33-aa3b-8d125a4d1c61","object":"chat.completion","created":1744181059,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class SleepTrackerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Sleep Tracker\\\";\\n    \\n    private string _dataFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Sleep Tracker Module is running...\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"sleep_data.json\\\");\\n        \\n        bool exitRequested = false;\\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    RecordSleepSession();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewSleepStatistics();\\n                    break;\\n                case \\\"3\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nSleep Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Record Sleep Session\\\");\\n        Console.WriteLine(\\\"2. View Sleep Statistics\\\");\\n        Console.WriteLine(\\\"3. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void RecordSleepSession()\\n    {\\n        Console.WriteLine(\\\"\\\\nRecording Sleep Session\\\");\\n        \\n        Console.Write(\\\"Enter sleep date (yyyy-MM-dd): \\\");\\n        var dateInput = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter sleep time (HH:mm): \\\");\\n        var sleepTimeInput = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter wake time (HH:mm): \\\");\\n        var wakeTimeInput = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter sleep quality (1-5): \\\");\\n        var qualityInput = Console.ReadLine();\\n        \\n        if (!DateTime.TryParse(dateInput, out var date) ||\\n            !TimeSpan.TryParse(sleepTimeInput, out var sleepTime) ||\\n            !TimeSpan.TryParse(wakeTimeInput, out var wakeTime) ||\\n            !int.TryParse(qualityInput, out var quality) || quality < 1 || quality > 5)\\n        {\\n            Console.WriteLine(\\\"Invalid input. Recording cancelled.\\\");\\n            return;\\n        }\\n        \\n        var sleepData = LoadSleepData();\\n        \\n        sleepData.Add(new SleepRecord\\n        {\\n            Date = date,\\n            SleepTime = sleepTime,\\n            WakeTime = wakeTime,\\n            Duration = CalculateDuration(sleepTime, wakeTime),\\n            Quality = quality\\n        });\\n        \\n        SaveSleepData(sleepData);\\n        Console.WriteLine(\\\"Sleep session recorded successfully.\\\");\\n    }\\n    \\n    private TimeSpan CalculateDuration(TimeSpan sleepTime, TimeSpan wakeTime)\\n    {\\n        if (wakeTime > sleepTime)\\n        {\\n            return wakeTime - sleepTime;\\n        }\\n        else\\n        {\\n            return TimeSpan.FromHours(24) - sleepTime + wakeTime;\\n        }\\n    }\\n    \\n    private void ViewSleepStatistics()\\n    {\\n        var sleepData = LoadSleepData();\\n        \\n        if (sleepData.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No sleep data available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nSleep Statistics:\\\");\\n        Console.WriteLine(\\\"Total records: \\\" + sleepData.Count);\\n        \\n        TimeSpan totalDuration = TimeSpan.Zero;\\n        int totalQuality = 0;\\n        \\n        foreach (var record in sleepData)\\n        {\\n            totalDuration += record.Duration;\\n            totalQuality += record.Quality;\\n        }\\n        \\n        var avgDuration = totalDuration.TotalHours / sleepData.Count;\\n        var avgQuality = (double)totalQuality / sleepData.Count;\\n        \\n        Console.WriteLine(\\\"Average sleep duration: \\\" + avgDuration.ToString(\\\"F2\\\") + \\\" hours\\\");\\n        Console.WriteLine(\\\"Average sleep quality: \\\" + avgQuality.ToString(\\\"F1\\\") + \\\" / 5\\\");\\n        \\n        Console.WriteLine(\\\"\\\\nRecent Sleep Sessions:\\\");\\n        var recentRecords = sleepData.Count > 5 ? sleepData.GetRange(sleepData.Count - 5, 5) : sleepData;\\n        \\n        foreach (var record in recentRecords)\\n        {\\n            Console.WriteLine($\\\"{record.Date:yyyy-MM-dd}: {record.SleepTime:hh\\\\:mm} to {record.WakeTime:hh\\\\:mm} ({record.Duration.TotalHours:F2} hrs), Quality: {record.Quality}/5\\\");\\n        }\\n    }\\n    \\n    private List<SleepRecord> LoadSleepData()\\n    {\\n        if (!File.Exists(_dataFilePath))\\n        {\\n            return new List<SleepRecord>();\\n        }\\n        \\n        var json = File.ReadAllText(_dataFilePath);\\n        return JsonSerializer.Deserialize<List<SleepRecord>>(json) ?? new List<SleepRecord>();\\n    }\\n    \\n    private void SaveSleepData(List<SleepRecord> data)\\n    {\\n        var json = JsonSerializer.Serialize(data);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n}\\n\\npublic class SleepRecord\\n{\\n    public DateTime Date { get; set; }\\n    public TimeSpan SleepTime { get; set; }\\n    public TimeSpan WakeTime { get; set; }\\n    public TimeSpan Duration { get; set; }\\n    public int Quality { get; set; }\\n}\",\n  \"name\": \"Sleep Tracker\",\n  \"description\": \"A module that tracks and analyzes sleep patterns, recording sleep sessions and providing statistics about sleep duration and quality.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1465,"total_tokens":1986,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":9},"system_fingerprint":"fp_3d5141a69a_prod0225"}