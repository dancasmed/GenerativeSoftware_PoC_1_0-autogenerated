

{"id":"b89688ad-4d9f-4dd0-abb9-26d562fd0781","object":"chat.completion","created":1744183162,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class SportsLeagueManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Sports League Manager\\\";\\n\\n    private string _teamsFilePath;\\n    private string _matchesFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        try\\n        {\\n            Console.WriteLine(\\\"Initializing Sports League Manager...\\\");\\n            \\n            _teamsFilePath = Path.Combine(dataFolder, \\\"teams.json\\\");\\n            _matchesFilePath = Path.Combine(dataFolder, \\\"matches.json\\\");\\n\\n            if (!Directory.Exists(dataFolder))\\n            {\\n                Directory.CreateDirectory(dataFolder);\\n            }\\n\\n            if (!File.Exists(_teamsFilePath))\\n            {\\n                File.WriteAllText(_teamsFilePath, \\\"[]\\\");\\n            }\\n\\n            if (!File.Exists(_matchesFilePath))\\n            {\\n                File.WriteAllText(_matchesFilePath, \\\"[]\\\");\\n            }\\n\\n            bool exitRequested = false;\\n            while (!exitRequested)\\n            {\\n                Console.WriteLine(\\\"\\\\nSports League Manager\\\");\\n                Console.WriteLine(\\\"1. Add Team\\\");\\n                Console.WriteLine(\\\"2. List Teams\\\");\\n                Console.WriteLine(\\\"3. Schedule Match\\\");\\n                Console.WriteLine(\\\"4. Record Match Result\\\");\\n                Console.WriteLine(\\\"5. View Match Schedule\\\");\\n                Console.WriteLine(\\\"6. View Standings\\\");\\n                Console.WriteLine(\\\"7. Exit\\\");\\n                Console.Write(\\\"Select an option: \\\");\\n\\n                var input = Console.ReadLine();\\n                if (int.TryParse(input, out int option))\\n                {\\n                    switch (option)\\n                    {\\n                        case 1:\\n                            AddTeam();\\n                            break;\\n                        case 2:\\n                            ListTeams();\\n                            break;\\n                        case 3:\\n                            ScheduleMatch();\\n                            break;\\n                        case 4:\\n                            RecordMatchResult();\\n                            break;\\n                        case 5:\\n                            ViewMatchSchedule();\\n                            break;\\n                        case 6:\\n                            ViewStandings();\\n                            break;\\n                        case 7:\\n                            exitRequested = true;\\n                            break;\\n                        default:\\n                            Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                            break;\\n                    }\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n                }\\n            }\\n\\n            Console.WriteLine(\\\"Exiting Sports League Manager...\\\");\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n\\n    private void AddTeam()\\n    {\\n        Console.Write(\\\"Enter team name: \\\");\\n        var teamName = Console.ReadLine();\\n\\n        var teams = LoadTeams();\\n        teams.Add(new Team { Name = teamName });\\n        SaveTeams(teams);\\n\\n        Console.WriteLine(\\\"Team added successfully.\\\");\\n    }\\n\\n    private void ListTeams()\\n    {\\n        var teams = LoadTeams();\\n        Console.WriteLine(\\\"\\\\nTeams:\\\");\\n        foreach (var team in teams)\\n        {\\n            Console.WriteLine(team.Name);\\n        }\\n    }\\n\\n    private void ScheduleMatch()\\n    {\\n        var teams = LoadTeams();\\n        if (teams.Count < 2)\\n        {\\n            Console.WriteLine(\\\"At least 2 teams are required to schedule a match.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"Select home team:\\\");\\n        for (int i = 0; i < teams.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + teams[i].Name);\\n        }\\n        var homeTeamIndex = GetValidTeamIndex(teams.Count);\\n\\n        Console.WriteLine(\\\"Select away team:\\\");\\n        for (int i = 0; i < teams.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + teams[i].Name);\\n        }\\n        var awayTeamIndex = GetValidTeamIndex(teams.Count);\\n\\n        if (homeTeamIndex == awayTeamIndex)\\n        {\\n            Console.WriteLine(\\\"A team cannot play against itself.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter match date (yyyy-MM-dd): \\\");\\n        var dateInput = Console.ReadLine();\\n        if (!DateTime.TryParse(dateInput, out DateTime matchDate))\\n        {\\n            Console.WriteLine(\\\"Invalid date format.\\\");\\n            return;\\n        }\\n\\n        var matches = LoadMatches();\\n        matches.Add(new Match\\n        {\\n            HomeTeam = teams[homeTeamIndex].Name,\\n            AwayTeam = teams[awayTeamIndex].Name,\\n            Date = matchDate,\\n            IsCompleted = false\\n        });\\n        SaveMatches(matches);\\n\\n        Console.WriteLine(\\\"Match scheduled successfully.\\\");\\n    }\\n\\n    private void RecordMatchResult()\\n    {\\n        var matches = LoadMatches();\\n        var incompleteMatches = matches.FindAll(m => !m.IsCompleted);\\n\\n        if (incompleteMatches.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No matches to record results for.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"Select match to record result:\\\");\\n        for (int i = 0; i < incompleteMatches.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + incompleteMatches[i].HomeTeam + \\\" vs \\\" + incompleteMatches[i].AwayTeam + \\\" on \\\" + incompleteMatches[i].Date.ToShortDateString());\\n        }\\n\\n        if (!int.TryParse(Console.ReadLine(), out int matchIndex) || matchIndex < 1 || matchIndex > incompleteMatches.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid selection.\\\");\\n            return;\\n        }\\n\\n        var selectedMatch = incompleteMatches[matchIndex - 1];\\n\\n        Console.Write(\\\"Enter home team score: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int homeScore))\\n        {\\n            Console.WriteLine(\\\"Invalid score.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter away team score: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int awayScore))\\n        {\\n            Console.WriteLine(\\\"Invalid score.\\\");\\n            return;\\n        }\\n\\n        selectedMatch.HomeScore = homeScore;\\n        selectedMatch.AwayScore = awayScore;\\n        selectedMatch.IsCompleted = true;\\n\\n        SaveMatches(matches);\\n        Console.WriteLine(\\\"Match result recorded successfully.\\\");\\n    }\\n\\n    private void ViewMatchSchedule()\\n    {\\n        var matches = LoadMatches();\\n        Console.WriteLine(\\\"\\\\nMatch Schedule:\\\");\\n        foreach (var match in matches)\\n        {\\n            var status = match.IsCompleted ? \\\"Completed\\\" : \\\"Scheduled\\\";\\n            var result = match.IsCompleted ? \\\" (\\\" + match.HomeScore + \\\"-\\\" + match.AwayScore + \\\")\\\" : \\\"\\\";\\n            Console.WriteLine(match.HomeTeam + \\\" vs \\\" + match.AwayTeam + \\\" on \\\" + match.Date.ToShortDateString() + \\\" - \\\" + status + result);\\n        }\\n    }\\n\\n    private void ViewStandings()\\n    {\\n        var teams = LoadTeams();\\n        var matches = LoadMatches();\\n\\n        foreach (var team in teams)\\n        {\\n            team.GamesPlayed = 0;\\n            team.Wins = 0;\\n            team.Draws = 0;\\n            team.Losses = 0;\\n            team.Points = 0;\\n        }\\n\\n        foreach (var match in matches)\\n        {\\n            if (!match.IsCompleted) continue;\\n\\n            var homeTeam = teams.Find(t => t.Name == match.HomeTeam);\\n            var awayTeam = teams.Find(t => t.Name == match.AwayTeam);\\n\\n            if (homeTeam == null || awayTeam == null) continue;\\n\\n            homeTeam.GamesPlayed++;\\n            awayTeam.GamesPlayed++;\\n\\n            if (match.HomeScore > match.AwayScore)\\n            {\\n                homeTeam.Wins++;\\n                homeTeam.Points += 3;\\n                awayTeam.Losses++;\\n            }\\n            else if (match.HomeScore < match.AwayScore)\\n            {\\n                awayTeam.Wins++;\\n                awayTeam.Points += 3;\\n                homeTeam.Losses++;\\n            }\\n            else\\n            {\\n                homeTeam.Draws++;\\n                awayTeam.Draws++;\\n                homeTeam.Points++;\\n                awayTeam.Points++;\\n            }\\n        }\\n\\n        teams.Sort((a, b) => b.Points.CompareTo(a.Points));\\n\\n        Console.WriteLine(\\\"\\\\nLeague Standings:\\\");\\n        Console.WriteLine(\\\"Team\\\\t\\\\tGP\\\\tW\\\\tD\\\\tL\\\\tPts\\\");\\n        foreach (var team in teams)\\n        {\\n            Console.WriteLine(team.Name + \\\"\\\\t\\\\t\\\" + team.GamesPlayed + \\\"\\\\t\\\" + team.Wins + \\\"\\\\t\\\" + team.Draws + \\\"\\\\t\\\" + team.Losses + \\\"\\\\t\\\" + team.Points);\\n        }\\n    }\\n\\n    private List<Team> LoadTeams()\\n    {\\n        var json = File.ReadAllText(_teamsFilePath);\\n        return JsonSerializer.Deserialize<List<Team>>(json) ?? new List<Team>();\\n    }\\n\\n    private void SaveTeams(List<Team> teams)\\n    {\\n        var json = JsonSerializer.Serialize(teams);\\n        File.WriteAllText(_teamsFilePath, json);\\n    }\\n\\n    private List<Match> LoadMatches()\\n    {\\n        var json = File.ReadAllText(_matchesFilePath);\\n        return JsonSerializer.Deserialize<List<Match>>(json) ?? new List<Match>();\\n    }\\n\\n    private void SaveMatches(List<Match> matches)\\n    {\\n        var json = JsonSerializer.Serialize(matches);\\n        File.WriteAllText(_matchesFilePath, json);\\n    }\\n\\n    private int GetValidTeamIndex(int teamCount)\\n    {\\n        while (true)\\n        {\\n            if (int.TryParse(Console.ReadLine(), out int index) && index >= 1 && index <= teamCount)\\n            {\\n                return index - 1;\\n            }\\n            Console.WriteLine(\\\"Invalid selection. Please try again.\\\");\\n        }\\n    }\\n}\\n\\npublic class Team\\n{\\n    public string Name { get; set; }\\n    public int GamesPlayed { get; set; }\\n    public int Wins { get; set; }\\n    public int Draws { get; set; }\\n    public int Losses { get; set; }\\n    public int Points { get; set; }\\n}\\n\\npublic class Match\\n{\\n    public string HomeTeam { get; set; }\\n    public string AwayTeam { get; set; }\\n    public DateTime Date { get; set; }\\n    public bool IsCompleted { get; set; }\\n    public int HomeScore { get; set; }\\n    public int AwayScore { get; set; }\\n}\",\n  \"name\": \"Sports League Manager\",\n  \"description\": \"A system to manage a sports league's team schedules and scores, including team management, match scheduling, result recording, and standings calculation.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":525,"completion_tokens":2722,"total_tokens":3247,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":13},"system_fingerprint":"fp_3d5141a69a_prod0225"}