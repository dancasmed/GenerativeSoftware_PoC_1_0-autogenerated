
{"id":"b6f1c64c-b108-4e18-8a06-397620ca04b8","object":"chat.completion","created":1744175398,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class StockInventoryTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Stock Inventory Tracker\\\";\\n    \\n    private string _inventoryFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Stock Inventory Tracker module is running.\\\");\\n        \\n        _inventoryFilePath = Path.Combine(dataFolder, \\\"inventory.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        bool exitRequested = false;\\n        \\n        while (!exitRequested)\\n        {\\n            DisplayMenu();\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddItem();\\n                    break;\\n                case \\\"2\\\":\\n                    RemoveItem();\\n                    break;\\n                case \\\"3\\\":\\n                    UpdateItem();\\n                    break;\\n                case \\\"4\\\":\\n                    ViewInventory();\\n                    break;\\n                case \\\"5\\\":\\n                    exitRequested = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        Console.WriteLine(\\\"Exiting Stock Inventory Tracker module.\\\");\\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nStock Inventory Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Item\\\");\\n        Console.WriteLine(\\\"2. Remove Item\\\");\\n        Console.WriteLine(\\\"3. Update Item Quantity\\\");\\n        Console.WriteLine(\\\"4. View Inventory\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private List<InventoryItem> LoadInventory()\\n    {\\n        if (!File.Exists(_inventoryFilePath))\\n        {\\n            return new List<InventoryItem>();\\n        }\\n        \\n        string json = File.ReadAllText(_inventoryFilePath);\\n        return JsonSerializer.Deserialize<List<InventoryItem>>(json);\\n    }\\n    \\n    private void SaveInventory(List<InventoryItem> inventory)\\n    {\\n        string json = JsonSerializer.Serialize(inventory, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(_inventoryFilePath, json);\\n    }\\n    \\n    private void AddItem()\\n    {\\n        Console.Write(\\\"Enter item ID: \\\");\\n        string id = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter item name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter item quantity: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int quantity))\\n        {\\n            Console.WriteLine(\\\"Invalid quantity. Operation cancelled.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter item price: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal price))\\n        {\\n            Console.WriteLine(\\\"Invalid price. Operation cancelled.\\\");\\n            return;\\n        }\\n        \\n        var inventory = LoadInventory();\\n        \\n        if (inventory.Exists(item => item.Id == id))\\n        {\\n            Console.WriteLine(\\\"Item with this ID already exists.\\\");\\n            return;\\n        }\\n        \\n        inventory.Add(new InventoryItem\\n        {\\n            Id = id,\\n            Name = name,\\n            Quantity = quantity,\\n            Price = price\\n        });\\n        \\n        SaveInventory(inventory);\\n        Console.WriteLine(\\\"Item added successfully.\\\");\\n    }\\n    \\n    private void RemoveItem()\\n    {\\n        Console.Write(\\\"Enter item ID to remove: \\\");\\n        string id = Console.ReadLine();\\n        \\n        var inventory = LoadInventory();\\n        var itemToRemove = inventory.Find(item => item.Id == id);\\n        \\n        if (itemToRemove == null)\\n        {\\n            Console.WriteLine(\\\"Item not found.\\\");\\n            return;\\n        }\\n        \\n        inventory.Remove(itemToRemove);\\n        SaveInventory(inventory);\\n        Console.WriteLine(\\\"Item removed successfully.\\\");\\n    }\\n    \\n    private void UpdateItem()\\n    {\\n        Console.Write(\\\"Enter item ID to update: \\\");\\n        string id = Console.ReadLine();\\n        \\n        var inventory = LoadInventory();\\n        var itemToUpdate = inventory.Find(item => item.Id == id);\\n        \\n        if (itemToUpdate == null)\\n        {\\n            Console.WriteLine(\\\"Item not found.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter new quantity (leave blank to keep current): \\\");\\n        string quantityInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(quantityInput))\\n        {\\n            if (int.TryParse(quantityInput, out int newQuantity))\\n            {\\n                itemToUpdate.Quantity = newQuantity;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid quantity. Keeping current value.\\\");\\n            }\\n        }\\n        \\n        Console.Write(\\\"Enter new price (leave blank to keep current): \\\");\\n        string priceInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(priceInput))\\n        {\\n            if (decimal.TryParse(priceInput, out decimal newPrice))\\n            {\\n                itemToUpdate.Price = newPrice;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid price. Keeping current value.\\\");\\n            }\\n        }\\n        \\n        SaveInventory(inventory);\\n        Console.WriteLine(\\\"Item updated successfully.\\\");\\n    }\\n    \\n    private void ViewInventory()\\n    {\\n        var inventory = LoadInventory();\\n        \\n        if (inventory.Count == 0)\\n        {\\n            Console.WriteLine(\\\"Inventory is empty.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nCurrent Inventory:\\\");\\n        Console.WriteLine(\\\"ID\\\\tName\\\\tQuantity\\\\tPrice\\\");\\n        \\n        foreach (var item in inventory)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}\\\\t{1}\\\\t{2}\\\\t{3:C}\\\", \\n                item.Id, item.Name, item.Quantity, item.Price));\\n        }\\n    }\\n}\\n\\npublic class InventoryItem\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public int Quantity { get; set; }\\n    public decimal Price { get; set; }\\n}\",\n  \"name\": \"Stock Inventory Tracker\",\n  \"description\": \"A module for tracking stock inventory for a small retail store with CRUD operations\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1644,"total_tokens":2166,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}