
{"id":"b3901556-229a-47c4-ad03-fc11139970cc","object":"chat.completion","created":1743799209,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class StockPortfolioTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Stock Portfolio Tracker\\\";\\n    \\n    private string portfolioFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Stock Portfolio Tracker module is running.\\\");\\n        \\n        portfolioFilePath = Path.Combine(dataFolder, \\\"portfolio.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        Portfolio portfolio = LoadPortfolio();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nStock Portfolio Tracker\\\");\\n            Console.WriteLine(\\\"1. View Portfolio\\\");\\n            Console.WriteLine(\\\"2. Add Stock\\\");\\n            Console.WriteLine(\\\"3. Remove Stock\\\");\\n            Console.WriteLine(\\\"4. Update Stock\\\");\\n            Console.WriteLine(\\\"5. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    ViewPortfolio(portfolio);\\n                    break;\\n                case \\\"2\\\":\\n                    AddStock(ref portfolio);\\n                    break;\\n                case \\\"3\\\":\\n                    RemoveStock(ref portfolio);\\n                    break;\\n                case \\\"4\\\":\\n                    UpdateStock(ref portfolio);\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SavePortfolio(portfolio);\\n        Console.WriteLine(\\\"Portfolio saved. Exiting Stock Portfolio Tracker.\\\");\\n        \\n        return true;\\n    }\\n    \\n    private Portfolio LoadPortfolio()\\n    {\\n        if (File.Exists(portfolioFilePath))\\n        {\\n            string json = File.ReadAllText(portfolioFilePath);\\n            return JsonSerializer.Deserialize<Portfolio>(json) ?? new Portfolio();\\n        }\\n        \\n        return new Portfolio();\\n    }\\n    \\n    private void SavePortfolio(Portfolio portfolio)\\n    {\\n        string json = JsonSerializer.Serialize(portfolio, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(portfolioFilePath, json);\\n    }\\n    \\n    private void ViewPortfolio(Portfolio portfolio)\\n    {\\n        if (portfolio.Stocks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"Your portfolio is empty.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nYour Portfolio:\\\");\\n        Console.WriteLine(\\\"Symbol\\\\tShares\\\\tAvg Price\\\\tCurrent Price\\\\tValue\\\\tGain/Loss\\\");\\n        \\n        decimal totalValue = 0;\\n        decimal totalGainLoss = 0;\\n        \\n        foreach (var stock in portfolio.Stocks)\\n        {\\n            decimal currentPrice = GetCurrentStockPrice(stock.Symbol);\\n            decimal value = stock.Shares * currentPrice;\\n            decimal gainLoss = value - (stock.Shares * stock.AveragePrice);\\n            \\n            Console.WriteLine($\\\"{stock.Symbol}\\\\t{stock.Shares}\\\\t{stock.AveragePrice:C}\\\\t{currentPrice:C}\\\\t{value:C}\\\\t{gainLoss:C}\\\");\\n            \\n            totalValue += value;\\n            totalGainLoss += gainLoss;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nTotal Portfolio Value: {0:C}\\\", totalValue);\\n        Console.WriteLine(\\\"Total Gain/Loss: {0:C}\\\", totalGainLoss);\\n    }\\n    \\n    private void AddStock(ref Portfolio portfolio)\\n    {\\n        Console.Write(\\\"Enter stock symbol: \\\");\\n        string symbol = Console.ReadLine().ToUpper().Trim();\\n        \\n        Console.Write(\\\"Enter number of shares: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int shares) || shares <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid number of shares.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter average purchase price: \\\");\\n        if (!decimal.TryParse(Console.ReadLine(), out decimal avgPrice) || avgPrice <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid price.\\\");\\n            return;\\n        }\\n        \\n        var existingStock = portfolio.Stocks.Find(s => s.Symbol == symbol);\\n        if (existingStock != null)\\n        {\\n            Console.WriteLine(\\\"Stock already exists in portfolio. Use update option instead.\\\");\\n            return;\\n        }\\n        \\n        portfolio.Stocks.Add(new Stock { Symbol = symbol, Shares = shares, AveragePrice = avgPrice });\\n        Console.WriteLine(\\\"Stock added to portfolio.\\\");\\n    }\\n    \\n    private void RemoveStock(ref Portfolio portfolio)\\n    {\\n        if (portfolio.Stocks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"Portfolio is empty.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter stock symbol to remove: \\\");\\n        string symbol = Console.ReadLine().ToUpper().Trim();\\n        \\n        var stock = portfolio.Stocks.Find(s => s.Symbol == symbol);\\n        if (stock == null)\\n        {\\n            Console.WriteLine(\\\"Stock not found in portfolio.\\\");\\n            return;\\n        }\\n        \\n        portfolio.Stocks.Remove(stock);\\n        Console.WriteLine(\\\"Stock removed from portfolio.\\\");\\n    }\\n    \\n    private void UpdateStock(ref Portfolio portfolio)\\n    {\\n        if (portfolio.Stocks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"Portfolio is empty.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter stock symbol to update: \\\");\\n        string symbol = Console.ReadLine().ToUpper().Trim();\\n        \\n        var stock = portfolio.Stocks.Find(s => s.Symbol == symbol);\\n        if (stock == null)\\n        {\\n            Console.WriteLine(\\\"Stock not found in portfolio.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter new number of shares (current: {0}): \\\", stock.Shares);\\n        string sharesInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(sharesInput))\\n        {\\n            if (int.TryParse(sharesInput, out int newShares) && newShares > 0)\\n            {\\n                stock.Shares = newShares;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid number of shares. Shares not updated.\\\");\\n            }\\n        }\\n        \\n        Console.Write(\\\"Enter new average price (current: {0:C}): \\\", stock.AveragePrice);\\n        string priceInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(priceInput))\\n        {\\n            if (decimal.TryParse(priceInput, out decimal newPrice) && newPrice > 0)\\n            {\\n                stock.AveragePrice = newPrice;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid price. Price not updated.\\\");\\n            }\\n        }\\n        \\n        Console.WriteLine(\\\"Stock updated.\\\");\\n    }\\n    \\n    private decimal GetCurrentStockPrice(string symbol)\\n    {\\n        // Simulate fetching stock price - in a real app this would call an API\\n        Random random = new Random();\\n        return Math.Round((decimal)(random.NextDouble() * 100 + 50), 2);\\n    }\\n}\\n\\npublic class Portfolio\\n{\\n    public List<Stock> Stocks { get; set; } = new List<Stock>();\\n}\\n\\npublic class Stock\\n{\\n    public string Symbol { get; set; }\\n    public int Shares { get; set; }\\n    public decimal AveragePrice { get; set; }\\n}\",\n  \"name\": \"Stock Portfolio Tracker\",\n  \"description\": \"A simple stock portfolio tracker that allows users to add, remove, update, and view their stock holdings with simulated price data.\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"6.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1972,"total_tokens":2491,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}