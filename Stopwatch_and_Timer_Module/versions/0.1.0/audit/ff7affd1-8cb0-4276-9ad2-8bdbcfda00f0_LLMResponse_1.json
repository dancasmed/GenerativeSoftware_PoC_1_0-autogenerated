{"id":"91060e48-96f1-48c1-a938-2d808d6f68f4","object":"chat.completion","created":1743800058,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\nusing System.Threading;\\n\\npublic class StopwatchTimerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Stopwatch and Timer Module\\\";\\n    \\n    private bool _isRunning;\\n    private DateTime _startTime;\\n    private TimeSpan _elapsedTime;\\n    private Timer _timer;\\n    private TimeSpan _timerDuration;\\n    private bool _isTimerRunning;\\n    \\n    public StopwatchTimerModule()\\n    {\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Stopwatch and Timer Module is running.\\\");\\n        Console.WriteLine(\\\"Commands: start, stop, reset, lap, settimer [seconds], starttimer, stoptimer, exit\\\");\\n        \\n        _isRunning = false;\\n        _isTimerRunning = false;\\n        _elapsedTime = TimeSpan.Zero;\\n        \\n        string input;\\n        do\\n        {\\n            Console.Write(\\\"> \\\");\\n            input = Console.ReadLine()?.ToLower().Trim() ?? string.Empty;\\n            \\n            switch (input)\\n            {\\n                case \\\"start\\\":\\n                    StartStopwatch();\\n                    break;\\n                case \\\"stop\\\":\\n                    StopStopwatch();\\n                    break;\\n                case \\\"reset\\\":\\n                    ResetStopwatch();\\n                    break;\\n                case \\\"lap\\\":\\n                    LapStopwatch();\\n                    break;\\n                case var _ when input.StartsWith(\\\"settimer\\\"):\\n                    SetTimer(input);\\n                    break;\\n                case \\\"starttimer\\\":\\n                    StartTimer();\\n                    break;\\n                case \\\"stoptimer\\\":\\n                    StopTimer();\\n                    break;\\n                case \\\"exit\\\":\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid command.\\\");\\n                    break;\\n            }\\n            \\n        } while (input != \\\"exit\\\");\\n        \\n        return true;\\n    }\\n    \\n    private void StartStopwatch()\\n    {\\n        if (_isRunning)\\n        {\\n            Console.WriteLine(\\\"Stopwatch is already running.\\\");\\n            return;\\n        }\\n        \\n        _isRunning = true;\\n        _startTime = DateTime.Now - _elapsedTime;\\n        Console.WriteLine(\\\"Stopwatch started.\\\");\\n    }\\n    \\n    private void StopStopwatch()\\n    {\\n        if (!_isRunning)\\n        {\\n            Console.WriteLine(\\\"Stopwatch is not running.\\\");\\n            return;\\n        }\\n        \\n        _elapsedTime = DateTime.Now - _startTime;\\n        _isRunning = false;\\n        Console.WriteLine(\\\"Stopwatch stopped. Elapsed time: \\\" + _elapsedTime.ToString(\\\"g\\\"));\\n    }\\n    \\n    private void ResetStopwatch()\\n    {\\n        _isRunning = false;\\n        _elapsedTime = TimeSpan.Zero;\\n        Console.WriteLine(\\\"Stopwatch reset.\\\");\\n    }\\n    \\n    private void LapStopwatch()\\n    {\\n        if (!_isRunning)\\n        {\\n            Console.WriteLine(\\\"Stopwatch is not running.\\\");\\n            return;\\n        }\\n        \\n        TimeSpan lapTime = DateTime.Now - _startTime;\\n        Console.WriteLine(\\\"Lap time: \\\" + lapTime.ToString(\\\"g\\\"));\\n    }\\n    \\n    private void SetTimer(string input)\\n    {\\n        string[] parts = input.Split(' ');\\n        if (parts.Length != 2 || !int.TryParse(parts[1], out int seconds) || seconds <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid timer duration. Usage: settimer [seconds]\\\");\\n            return;\\n        }\\n        \\n        _timerDuration = TimeSpan.FromSeconds(seconds);\\n        Console.WriteLine(\\\"Timer set for \\\" + _timerDuration.ToString(\\\"g\\\"));\\n    }\\n    \\n    private void StartTimer()\\n    {\\n        if (_timerDuration == TimeSpan.Zero)\\n        {\\n            Console.WriteLine(\\\"Timer duration not set. Use 'settimer [seconds]' first.\\\");\\n            return;\\n        }\\n        \\n        if (_isTimerRunning)\\n        {\\n            Console.WriteLine(\\\"Timer is already running.\\\");\\n            return;\\n        }\\n        \\n        _isTimerRunning = true;\\n        DateTime endTime = DateTime.Now + _timerDuration;\\n        _timer = new Timer(_ =>\\n        {\\n            TimeSpan remaining = endTime - DateTime.Now;\\n            if (remaining <= TimeSpan.Zero)\\n            {\\n                _isTimerRunning = false;\\n                Console.WriteLine(\\\"Timer completed!\\\");\\n                _timer?.Dispose();\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Time remaining: \\\" + remaining.ToString(\\\"g\\\"));\\n            }\\n        }, null, 0, 1000);\\n        \\n        Console.WriteLine(\\\"Timer started.\\\");\\n    }\\n    \\n    private void StopTimer()\\n    {\\n        if (!_isTimerRunning)\\n        {\\n            Console.WriteLine(\\\"Timer is not running.\\\");\\n            return;\\n        }\\n        \\n        _isTimerRunning = false;\\n        _timer?.Dispose();\\n        Console.WriteLine(\\\"Timer stopped.\\\");\\n    }\\n}\",\n  \"name\": \"Stopwatch and Timer Module\",\n  \"description\": \"A module that provides stopwatch and timer functionality with commands to start, stop, reset, lap, and set timer durations.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1321,"total_tokens":1840,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}