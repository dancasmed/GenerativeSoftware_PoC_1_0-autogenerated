
{"id":"5c76b6c9-e35a-4b80-8bfb-11ded375f59a","object":"chat.completion","created":1744178261,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class StudentGradeManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Student Grade Manager\\\";\\n    \\n    private string _dataFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Student Grade Manager module is running.\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"student_grades.json\\\");\\n        \\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Add Student\\\");\\n            Console.WriteLine(\\\"2. Add Course Grade\\\");\\n            Console.WriteLine(\\\"3. Calculate GPA\\\");\\n            Console.WriteLine(\\\"4. List All Students\\\");\\n            Console.WriteLine(\\\"5. Exit Module\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            var input = Console.ReadLine();\\n            \\n            if (string.IsNullOrWhiteSpace(input))\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please try again.\\\");\\n                continue;\\n            }\\n            \\n            switch (input.Trim())\\n            {\\n                case \\\"1\\\":\\n                    AddStudent();\\n                    break;\\n                case \\\"2\\\":\\n                    AddCourseGrade();\\n                    break;\\n                case \\\"3\\\":\\n                    CalculateGPA();\\n                    break;\\n                case \\\"4\\\":\\n                    ListAllStudents();\\n                    break;\\n                case \\\"5\\\":\\n                    Console.WriteLine(\\\"Exiting Student Grade Manager module.\\\");\\n                    return true;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n    }\\n    \\n    private List<Student> LoadStudents()\\n    {\\n        if (!File.Exists(_dataFilePath))\\n        {\\n            return new List<Student>();\\n        }\\n        \\n        var json = File.ReadAllText(_dataFilePath);\\n        return JsonSerializer.Deserialize<List<Student>>(json) ?? new List<Student>();\\n    }\\n    \\n    private void SaveStudents(List<Student> students)\\n    {\\n        var json = JsonSerializer.Serialize(students);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n    \\n    private void AddStudent()\\n    {\\n        Console.Write(\\\"Enter student ID: \\\");\\n        var id = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter student name: \\\");\\n        var name = Console.ReadLine();\\n        \\n        if (string.IsNullOrWhiteSpace(id) || string.IsNullOrWhiteSpace(name))\\n        {\\n            Console.WriteLine(\\\"Invalid input. Student not added.\\\");\\n            return;\\n        }\\n        \\n        var students = LoadStudents();\\n        \\n        if (students.Exists(s => s.Id == id))\\n        {\\n            Console.WriteLine(\\\"Student with this ID already exists.\\\");\\n            return;\\n        }\\n        \\n        students.Add(new Student { Id = id, Name = name, Courses = new List<CourseGrade>() });\\n        SaveStudents(students);\\n        \\n        Console.WriteLine(\\\"Student added successfully.\\\");\\n    }\\n    \\n    private void AddCourseGrade()\\n    {\\n        var students = LoadStudents();\\n        \\n        if (students.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No students available. Please add a student first.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Select a student:\\\");\\n        for (int i = 0; i < students.Count; i++)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}. {1} (ID: {2})\\\", i + 1, students[i].Name, students[i].Id));\\n        }\\n        \\n        if (!int.TryParse(Console.ReadLine(), out int studentIndex) || studentIndex < 1 || studentIndex > students.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid selection.\\\");\\n            return;\\n        }\\n        \\n        var student = students[studentIndex - 1];\\n        \\n        Console.Write(\\\"Enter course name: \\\");\\n        var courseName = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter credit hours: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int creditHours) || creditHours <= 0)\\n        {\\n            Console.WriteLine(\\\"Invalid credit hours. Must be a positive integer.\\\");\\n            return;\\n        }\\n        \\n        Console.Write(\\\"Enter grade (A, B, C, D, F): \\\");\\n        var gradeInput = Console.ReadLine()?.ToUpper();\\n        \\n        if (string.IsNullOrWhiteSpace(gradeInput) || !Enum.TryParse(gradeInput, out Grade grade))\\n        {\\n            Console.WriteLine(\\\"Invalid grade. Must be A, B, C, D, or F.\\\");\\n            return;\\n        }\\n        \\n        student.Courses.Add(new CourseGrade \\n        { \\n            CourseName = courseName, \\n            CreditHours = creditHours, \\n            Grade = grade \\n        });\\n        \\n        SaveStudents(students);\\n        Console.WriteLine(\\\"Course grade added successfully.\\\");\\n    }\\n    \\n    private void CalculateGPA()\\n    {\\n        var students = LoadStudents();\\n        \\n        if (students.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No students available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"Select a student:\\\");\\n        for (int i = 0; i < students.Count; i++)\\n        {\\n            Console.WriteLine(string.Format(\\\"{0}. {1} (ID: {2})\\\", i + 1, students[i].Name, students[i].Id));\\n        }\\n        \\n        if (!int.TryParse(Console.ReadLine(), out int studentIndex) || studentIndex < 1 || studentIndex > students.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid selection.\\\");\\n            return;\\n        }\\n        \\n        var student = students[studentIndex - 1];\\n        \\n        if (student.Courses.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No courses available for this student.\\\");\\n            return;\\n        }\\n        \\n        double totalQualityPoints = 0;\\n        int totalCreditHours = 0;\\n        \\n        foreach (var course in student.Courses)\\n        {\\n            double gradePoints = course.Grade switch\\n            {\\n                Grade.A => 4.0,\\n                Grade.B => 3.0,\\n                Grade.C => 2.0,\\n                Grade.D => 1.0,\\n                Grade.F => 0.0,\\n                _ => 0.0\\n            };\\n            \\n            totalQualityPoints += gradePoints * course.CreditHours;\\n            totalCreditHours += course.CreditHours;\\n        }\\n        \\n        double gpa = totalQualityPoints / totalCreditHours;\\n        Console.WriteLine(string.Format(\\\"GPA for {0}: {1:F2}\\\", student.Name, gpa));\\n    }\\n    \\n    private void ListAllStudents()\\n    {\\n        var students = LoadStudents();\\n        \\n        if (students.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No students available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nList of Students:\\\");\\n        foreach (var student in students)\\n        {\\n            Console.WriteLine(string.Format(\\\"ID: {0}, Name: {1}\\\", student.Id, student.Name));\\n            \\n            if (student.Courses.Count > 0)\\n            {\\n                Console.WriteLine(\\\"  Courses:\\\");\\n                foreach (var course in student.Courses)\\n                {\\n                    Console.WriteLine(string.Format(\\\"    {0}: {1} (Credit Hours: {2})\\\", \\n                        course.CourseName, course.Grade, course.CreditHours));\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"  No courses registered.\\\");\\n            }\\n        }\\n    }\\n}\\n\\npublic class Student\\n{\\n    public string Id { get; set; }\\n    public string Name { get; set; }\\n    public List<CourseGrade> Courses { get; set; }\\n}\\n\\npublic class CourseGrade\\n{\\n    public string CourseName { get; set; }\\n    public int CreditHours { get; set; }\\n    public Grade Grade { get; set; }\\n}\\n\\npublic enum Grade\\n{\\n    A, B, C, D, F\\n}\",\n  \"name\": \"Student Grade Manager\",\n  \"description\": \"A module for managing student grades and calculating GPAs\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":2072,"total_tokens":2595,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}