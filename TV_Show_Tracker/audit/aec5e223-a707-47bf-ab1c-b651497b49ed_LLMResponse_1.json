{"id":"64b26720-bc13-4872-bfcc-c811a723a2b5","object":"chat.completion","created":1743797818,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class TVShowTracker : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"TV Show Tracker\\\";\\n    \\n    private string _dataFilePath;\\n    \\n    private List<TVShow> _shows;\\n    \\n    public TVShowTracker()\\n    {\\n        _shows = new List<TVShow>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"TV Show Tracker module is running...\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"tvshows.json\\\");\\n        \\n        try\\n        {\\n            LoadData();\\n            \\n            bool running = true;\\n            while (running)\\n            {\\n                DisplayMenu();\\n                \\n                string input = Console.ReadLine();\\n                \\n                switch (input)\\n                {\\n                    case \\\"1\\\":\\n                        AddShow();\\n                        break;\\n                    case \\\"2\\\":\\n                        AddEpisode();\\n                        break;\\n                    case \\\"3\\\":\\n                        ListShows();\\n                        break;\\n                    case \\\"4\\\":\\n                        running = false;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            \\n            SaveData();\\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"An error occurred: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private void LoadData()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            string json = File.ReadAllText(_dataFilePath);\\n            _shows = JsonSerializer.Deserialize<List<TVShow>>(json);\\n        }\\n    }\\n    \\n    private void SaveData()\\n    {\\n        string json = JsonSerializer.Serialize(_shows);\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nTV Show Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add a new TV show\\\");\\n        Console.WriteLine(\\\"2. Add a watched episode\\\");\\n        Console.WriteLine(\\\"3. List all shows and episodes\\\");\\n        Console.WriteLine(\\\"4. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddShow()\\n    {\\n        Console.Write(\\\"Enter TV show name: \\\");\\n        string name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter total seasons: \\\");\\n        int totalSeasons = int.Parse(Console.ReadLine());\\n        \\n        _shows.Add(new TVShow\\n        {\\n            Name = name,\\n            TotalSeasons = totalSeasons,\\n            Episodes = new List<Episode>()\\n        });\\n        \\n        Console.WriteLine(\\\"TV show added successfully.\\\");\\n    }\\n    \\n    private void AddEpisode()\\n    {\\n        if (_shows.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No shows available. Please add a show first.\\\");\\n            return;\\n        }\\n        \\n        ListShows();\\n        \\n        Console.Write(\\\"Select show index: \\\");\\n        int showIndex = int.Parse(Console.ReadLine()) - 1;\\n        \\n        if (showIndex < 0 || showIndex >= _shows.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid show index.\\\");\\n            return;\\n        }\\n        \\n        TVShow show = _shows[showIndex];\\n        \\n        Console.Write(\\\"Enter season number: \\\");\\n        int season = int.Parse(Console.ReadLine());\\n        \\n        Console.Write(\\\"Enter episode number: \\\");\\n        int number = int.Parse(Console.ReadLine());\\n        \\n        Console.Write(\\\"Enter episode title: \\\");\\n        string title = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter your rating (1-10): \\\");\\n        int rating = int.Parse(Console.ReadLine());\\n        \\n        show.Episodes.Add(new Episode\\n        {\\n            Season = season,\\n            Number = number,\\n            Title = title,\\n            Rating = rating,\\n            WatchedDate = DateTime.Now\\n        });\\n        \\n        Console.WriteLine(\\\"Episode added successfully.\\\");\\n    }\\n    \\n    private void ListShows()\\n    {\\n        if (_shows.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No shows available.\\\");\\n            return;\\n        }\\n        \\n        for (int i = 0; i < _shows.Count; i++)\\n        {\\n            TVShow show = _shows[i];\\n            Console.WriteLine($\\\"{i + 1}. {show.Name} (Seasons: {show.TotalSeasons})\\\");\\n            \\n            if (show.Episodes.Count > 0)\\n            {\\n                Console.WriteLine(\\\"   Watched Episodes:\\\");\\n                foreach (var episode in show.Episodes)\\n                {\\n                    Console.WriteLine($\\\"   - S{episode.Season.ToString().PadLeft(2, '0')}E{episode.Number.ToString().PadLeft(2, '0')}: {episode.Title} (Rating: {episode.Rating}/10)\\\");\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"   No episodes watched yet.\\\");\\n            }\\n        }\\n    }\\n}\\n\\npublic class TVShow\\n{\\n    public string Name { get; set; }\\n    public int TotalSeasons { get; set; }\\n    public List<Episode> Episodes { get; set; }\\n}\\n\\npublic class Episode\\n{\\n    public int Season { get; set; }\\n    public int Number { get; set; }\\n    public string Title { get; set; }\\n    public int Rating { get; set; }\\n    public DateTime WatchedDate { get; set; }\\n}\",\n  \"name\": \"TV Show Tracker\",\n  \"description\": \"Tracks TV show episodes watched with ratings\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":1490,"total_tokens":2009,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":71},"system_fingerprint":"fp_3d5141a69a_prod0225"}