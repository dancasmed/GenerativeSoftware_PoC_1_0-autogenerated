{
  "choices": [
    {
      "message": {
        "content": "\u0060\u0060\u0060json\n{\n  \u0022fixedSourceCodeFiles\u0022: [\n    {\n      \u0022filename\u0022: \u0022Module.cs\u0022,\n      \u0022source_code\u0022: \u0022using SelfEvolvingSoftware.Interfaces;\\nusing System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing Newtonsoft.Json;\\nusing System.Linq;\\n\\npublic class DiceRoll\\n{\\n    public Guid Id { get; set; } = Guid.NewGuid();\\n    public string DiceType { get; set; }\\n    public int Quantity { get; set; }\\n    public int[] Results { get; set; }\\n    public int Total { get; set; }\\n    public DateTime Timestamp { get; set; } = DateTime.Now;\\n}\\n\\npublic class SavedCombination\\n{\\n    public Guid Id { get; set; } = Guid.NewGuid();\\n    public string Name { get; set; }\\n    public string[] DiceTypes { get; set; }\\n    public int[] Quantities { get; set; }\\n}\\n\\npublic class RollHistory\\n{\\n    public Guid Id { get; set; } = Guid.NewGuid();\\n    public List\u003CDiceRoll\u003E Rolls { get; set; } = new List\u003CDiceRoll\u003E();\\n    public DateTime Timestamp { get; set; } = DateTime.Now;\\n}\\n\\npublic class DiceRollerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\u0022Dice Roller Module\\\u0022;\\n    private readonly Random _random = new Random();\\n    private List\u003CSavedCombination\u003E _savedCombinations = new List\u003CSavedCombination\u003E();\\n    private List\u003CRollHistory\u003E _rollHistory = new List\u003CRollHistory\u003E();\\n    private string _combinationsPath;\\n    private string _historyPath;\\n\\n    private int RollDice(int sides) =\u003E _random.Next(1, sides \u002B 1);\\n\\n    private List\u003CDiceRoll\u003E ExecuteRoll(List\u003CTuple\u003Cstring, int\u003E\u003E diceSet)\\n    {\\n        var rolls = new List\u003CDiceRoll\u003E();\\n        foreach (var (diceType, quantity) in diceSet)\\n        {\\n            var sides = int.Parse(diceType.Substring(1));\\n            var results = new int[quantity];\\n            for (int i = 0; i \u003C quantity; i\u002B\u002B)\\n            {\\n                results[i] = RollDice(sides);\\n            }\\n            rolls.Add(new DiceRoll\\n            {\\n                DiceType = diceType,\\n                Quantity = quantity,\\n                Results = results,\\n                Total = results.Sum()\\n            });\\n        }\\n        return rolls;\\n    }\\n\\n    private void SaveData\u003CT\u003E(string path, List\u003CT\u003E data)\\n    {\\n        File.WriteAllText(path, JsonConvert.SerializeObject(data, Formatting.Indented));\\n    }\\n\\n    private List\u003CT\u003E LoadData\u003CT\u003E(string path)\\n    {\\n        if (!File.Exists(path)) return new List\u003CT\u003E();\\n        return JsonConvert.DeserializeObject\u003CList\u003CT\u003E\u003E(File.ReadAllText(path)) ?? new List\u003CT\u003E();\\n    }\\n\\n    private void ShowRollResults(List\u003CDiceRoll\u003E rolls)\\n    {\\n        Console.WriteLine(\\\u0022Roll Results:\\\u0022);\\n        foreach (var roll in rolls)\\n        {\\n            Console.WriteLine(\\\u0022{0}x{1}: {2} | Total: {3}\\\u0022,\\n                roll.Quantity,\\n                roll.DiceType,\\n                string.Join(\\\u0022, \\\u0022, roll.Results),\\n                roll.Total);\\n        }\\n    }\\n\\n    private void MainMenu()\\n    {\\n        while (true)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nMain Menu:\\\u0022);\\n            Console.WriteLine(\\\u00221. Roll Dice\\\u0022);\\n            Console.WriteLine(\\\u00222. Save Combination\\\u0022);\\n            Console.WriteLine(\\\u00223. Load Combination\\\u0022);\\n            Console.WriteLine(\\\u00224. View History\\\u0022);\\n            Console.WriteLine(\\\u00225. Exit\\\u0022);\\n            Console.Write(\\\u0022Select option: \\\u0022);\\n\\n            List\u003CTuple\u003Cstring, int\u003E\u003E diceSet = null;\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    diceSet = new List\u003CTuple\u003Cstring, int\u003E\u003E();\\n                    Console.WriteLine(\\\u0022\\\\nAvailable dice: d4, d6, d8, d10, d12, d20, d100\\\u0022);\\n                    while (true)\\n                    {\\n                        Console.Write(\\\u0022Enter dice type (or \u0027done\u0027): \\\u0022);\\n                        var input = Console.ReadLine();\\n                        if (input.ToLower() == \\\u0022done\\\u0022) break;\\n\\n                        Console.Write(\\\u0022Quantity: \\\u0022);\\n                        if (int.TryParse(Console.ReadLine(), out int quantity))\\n                        {\\n                            diceSet.Add(Tuple.Create(input.ToLower(), quantity));\\n                        }\\n                    }\\n                    var result = ExecuteRoll(diceSet);\\n                    ShowRollResults(result);\\n                    _rollHistory.Add(new RollHistory { Rolls = result });\\n                    SaveData(_historyPath, _rollHistory);\\n                    break;\\n\\n                case \\\u00222\\\u0022:\\n                    if (diceSet == null)\\n                    {\\n                        Console.WriteLine(\\\u0022No dice set created. Please use option 1 first.\\\u0022);\\n                        break;\\n                    }\\n                    Console.Write(\\\u0022Combination name: \\\u0022);\\n                    var name = Console.ReadLine();\\n                    var combo = new SavedCombination\\n                    {\\n                        Name = name,\\n                        DiceTypes = diceSet.Select(d =\u003E d.Item1).ToArray(),\\n                        Quantities = diceSet.Select(d =\u003E d.Item2).ToArray()\\n                    };\\n                    _savedCombinations.Add(combo);\\n                    SaveData(_combinationsPath, _savedCombinations);\\n                    break;\\n\\n                case \\\u00223\\\u0022:\\n                    Console.WriteLine(\\\u0022Saved Combinations:\\\u0022);\\n                    foreach (var c in _savedCombinations)\\n                    {\\n                        Console.WriteLine(\\\u0022{0}: {1}\\\u0022, c.Id, c.Name);\\n                    }\\n                    Console.Write(\\\u0022Enter combination ID: \\\u0022);\\n                    if (Guid.TryParse(Console.ReadLine(), out Guid comboId))\\n                    {\\n                        var selected = _savedCombinations.FirstOrDefault(c =\u003E c.Id == comboId);\\n                        if (selected != null)\\n                        {\\n                            var comboDiceSet = selected.DiceTypes\\n                                .Zip(selected.Quantities, (t, q) =\u003E Tuple.Create(t, q))\\n                                .ToList();\\n                            var comboResult = ExecuteRoll(comboDiceSet);\\n                            ShowRollResults(comboResult);\\n                            _rollHistory.Add(new RollHistory { Rolls = comboResult });\\n                            SaveData(_historyPath, _rollHistory);\\n                        }\\n                    }\\n                    break;\\n\\n                case \\\u00224\\\u0022:\\n                    Console.WriteLine(\\\u0022\\\\nRoll History:\\\u0022);\\n                    foreach (var history in _rollHistory)\\n                    {\\n                        Console.WriteLine(\\\u0022[{0}] {1} rolls\\\u0022,\\n                            history.Timestamp.ToString(\\\u0022yyyy-MM-dd HH:mm:ss\\\u0022),\\n                            history.Rolls.Count);\\n                    }\\n                    break;\\n\\n                case \\\u00225\\\u0022:\\n                    return;\\n\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\u0022Dice Roller Module started\\\u0022);\\n        _combinationsPath = Path.Combine(dataFolder, \\\u0022combinations.json\\\u0022);\\n        _historyPath = Path.Combine(dataFolder, \\\u0022history.json\\\u0022);\\n\\n        Directory.CreateDirectory(dataFolder);\\n        _savedCombinations = LoadData\u003CSavedCombination\u003E(_combinationsPath);\\n        _rollHistory = LoadData\u003CRollHistory\u003E(_historyPath);\\n\\n        MainMenu();\\n        return true;\\n    }\\n}\\n\u0022,\n      \u0022fixed_errors\u0022: [\n        \u0022CS1061 : \u0027int[]\u0027 does not contain a definition for \u0027Sum\u0027 and no accessible extension method \u0027Sum\u0027 accepting a first argument of type \u0027int[]\u0027 could be found (are you missing a using directive or an assembly reference?)\u0022,\n        \u0022CS1061 : \u0027List\u003CTuple\u003Cstring, int\u003E\u003E\u0027 does not contain a definition for \u0027Select\u0027 and no accessible extension method \u0027Select\u0027 accepting a first argument of type \u0027List\u003CTuple\u003Cstring, int\u003E\u003E\u0027 could be found (are you missing a using directive or an assembly reference?)\u0022,\n        \u0022CS1061 : \u0027List\u003CTuple\u003Cstring, int\u003E\u003E\u0027 does not contain a definition for \u0027Select\u0027 and no accessible extension method \u0027Select\u0027 accepting a first argument of type \u0027List\u003CTuple\u003Cstring, int\u003E\u003E\u0027 could be found (are you missing a using directive or an assembly reference?)\u0022,\n        \u0022CS1061 : \u0027List\u003CSavedCombination\u003E\u0027 does not contain a definition for \u0027FirstOrDefault\u0027 and no accessible extension method \u0027FirstOrDefault\u0027 accepting a first argument of type \u0027List\u003CSavedCombination\u003E\u0027 could be found (are you missing a using directive or an assembly reference?)\u0022,\n        \u0022CS0165 : Use of unassigned local variable \u0027diceSet\u0027\u0022\n      ]\n    }\n  ],\n  \u0022missing_nugets\u0022: []\n}\n\u0060\u0060\u0060"
      }
    }
  ]
}