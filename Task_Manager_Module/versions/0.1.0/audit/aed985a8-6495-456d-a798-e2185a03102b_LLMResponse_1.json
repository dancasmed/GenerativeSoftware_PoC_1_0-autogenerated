{"id":"fbe4d6ba-5fe3-4c63-8a69-b64428618791","object":"chat.completion","created":1744177412,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class TaskManagerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Task Manager Module\\\";\\n    \\n    private List<Task> _tasks;\\n    private string _tasksFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Task Manager Module is running...\\\");\\n        \\n        _tasksFilePath = Path.Combine(dataFolder, \\\"tasks.json\\\");\\n        LoadTasks();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddTask();\\n                    break;\\n                case \\\"2\\\":\\n                    DeleteTask();\\n                    break;\\n                case \\\"3\\\":\\n                    MarkTaskAsCompleted();\\n                    break;\\n                case \\\"4\\\":\\n                    ListTasks();\\n                    break;\\n                case \\\"5\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveTasks();\\n        Console.WriteLine(\\\"Task Manager Module finished.\\\");\\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nTask Manager Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Task\\\");\\n        Console.WriteLine(\\\"2. Delete Task\\\");\\n        Console.WriteLine(\\\"3. Mark Task as Completed\\\");\\n        Console.WriteLine(\\\"4. List Tasks\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddTask()\\n    {\\n        Console.Write(\\\"Enter task description: \\\");\\n        string description = Console.ReadLine();\\n        \\n        if (!string.IsNullOrWhiteSpace(description))\\n        {\\n            _tasks.Add(new Task\\n            {\\n                Id = Guid.NewGuid(),\\n                Description = description,\\n                IsCompleted = false,\\n                CreatedAt = DateTime.Now\\n            });\\n            \\n            Console.WriteLine(\\\"Task added successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Task description cannot be empty.\\\");\\n        }\\n    }\\n    \\n    private void DeleteTask()\\n    {\\n        if (_tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available to delete.\\\");\\n            return;\\n        }\\n        \\n        ListTasks();\\n        Console.Write(\\\"Enter task number to delete: \\\");\\n        \\n        if (int.TryParse(Console.ReadLine(), out int taskNumber) && taskNumber > 0 && taskNumber <= _tasks.Count)\\n        {\\n            _tasks.RemoveAt(taskNumber - 1);\\n            Console.WriteLine(\\\"Task deleted successfully.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid task number.\\\");\\n        }\\n    }\\n    \\n    private void MarkTaskAsCompleted()\\n    {\\n        if (_tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available to mark as completed.\\\");\\n            return;\\n        }\\n        \\n        ListTasks();\\n        Console.Write(\\\"Enter task number to mark as completed: \\\");\\n        \\n        if (int.TryParse(Console.ReadLine(), out int taskNumber) && taskNumber > 0 && taskNumber <= _tasks.Count)\\n        {\\n            _tasks[taskNumber - 1].IsCompleted = true;\\n            Console.WriteLine(\\\"Task marked as completed.\\\");\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid task number.\\\");\\n        }\\n    }\\n    \\n    private void ListTasks()\\n    {\\n        if (_tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nTasks:\\\");\\n        for (int i = 0; i < _tasks.Count; i++)\\n        {\\n            var task = _tasks[i];\\n            Console.WriteLine($\\\"{i + 1}. [{(task.IsCompleted ? \\\"X\\\" : \\\" \\\")}] {task.Description} (Created: {task.CreatedAt:yyyy-MM-dd HH:mm})\\\");\\n        }\\n    }\\n    \\n    private void LoadTasks()\\n    {\\n        try\\n        {\\n            if (File.Exists(_tasksFilePath))\\n            {\\n                string json = File.ReadAllText(_tasksFilePath);\\n                _tasks = JsonSerializer.Deserialize<List<Task>>(json) ?? new List<Task>();\\n            }\\n            else\\n            {\\n                _tasks = new List<Task>();\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading tasks: \\\" + ex.Message);\\n            _tasks = new List<Task>();\\n        }\\n    }\\n    \\n    private void SaveTasks()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_tasks);\\n            File.WriteAllText(_tasksFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving tasks: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class Task\\n{\\n    public Guid Id { get; set; }\\n    public string Description { get; set; }\\n    public bool IsCompleted { get; set; }\\n    public DateTime CreatedAt { get; set; }\\n}\",\n  \"name\": \"Task Manager Module\",\n  \"description\": \"A simple task manager application that allows users to add, delete, and mark tasks as completed. Tasks are persisted in JSON format.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":529,"completion_tokens":1398,"total_tokens":1927,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":17},"system_fingerprint":"fp_3d5141a69a_prod0225"}