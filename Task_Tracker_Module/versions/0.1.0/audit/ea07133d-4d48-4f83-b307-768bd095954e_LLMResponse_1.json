
{"id":"79a94b43-5707-43b6-ae68-04e4fe75f1ef","object":"chat.completion","created":1743793002,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class TaskTrackerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Task Tracker Module\\\";\\n\\n    private string _tasksFilePath;\\n    private string _membersFilePath;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Initializing Task Tracker Module...\\\");\\n\\n        _tasksFilePath = Path.Combine(dataFolder, \\\"tasks.json\\\");\\n        _membersFilePath = Path.Combine(dataFolder, \\\"members.json\\\");\\n\\n        EnsureDataFilesExist();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            DisplayMenu();\\n            var input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddTask();\\n                    break;\\n                case \\\"2\\\":\\n                    AssignTask();\\n                    break;\\n                case \\\"3\\\":\\n                    ViewTasks();\\n                    break;\\n                case \\\"4\\\":\\n                    AddTeamMember();\\n                    break;\\n                case \\\"5\\\":\\n                    ViewTeamMembers();\\n                    break;\\n                case \\\"6\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        Console.WriteLine(\\\"Task Tracker Module completed successfully.\\\");\\n        return true;\\n    }\\n\\n    private void EnsureDataFilesExist()\\n    {\\n        if (!File.Exists(_tasksFilePath))\\n        {\\n            File.WriteAllText(_tasksFilePath, \\\"[]\\\");\\n        }\\n\\n        if (!File.Exists(_membersFilePath))\\n        {\\n            File.WriteAllText(_membersFilePath, \\\"[]\\\");\\n        }\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nTask Tracker Menu:\\\");\\n        Console.WriteLine(\\\"1. Add Task\\\");\\n        Console.WriteLine(\\\"2. Assign Task to Team Member\\\");\\n        Console.WriteLine(\\\"3. View All Tasks\\\");\\n        Console.WriteLine(\\\"4. Add Team Member\\\");\\n        Console.WriteLine(\\\"5. View Team Members\\\");\\n        Console.WriteLine(\\\"6. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddTask()\\n    {\\n        Console.Write(\\\"Enter task name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter task description: \\\");\\n        string description = Console.ReadLine();\\n\\n        var tasks = LoadTasks();\\n        tasks.Add(new Task\\n        {\\n            Id = Guid.NewGuid(),\\n            Name = name,\\n            Description = description,\\n            AssignedMemberId = null,\\n            IsCompleted = false\\n        });\\n\\n        SaveTasks(tasks);\\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n    }\\n\\n    private void AssignTask()\\n    {\\n        var tasks = LoadTasks();\\n        var members = LoadTeamMembers();\\n\\n        if (tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available to assign.\\\");\\n            return;\\n        }\\n\\n        if (members.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No team members available to assign tasks to.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"Available Tasks:\\\");\\n        for (int i = 0; i < tasks.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + tasks[i].Name);\\n        }\\n\\n        Console.Write(\\\"Select task to assign: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int taskIndex) || taskIndex < 1 || taskIndex > tasks.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid task selection.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAvailable Team Members:\\\");\\n        for (int i = 0; i < members.Count; i++)\\n        {\\n            Console.WriteLine(i + 1 + \\\". \\\" + members[i].Name);\\n        }\\n\\n        Console.Write(\\\"Select team member to assign: \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int memberIndex) || memberIndex < 1 || memberIndex > members.Count)\\n        {\\n            Console.WriteLine(\\\"Invalid member selection.\\\");\\n            return;\\n        }\\n\\n        tasks[taskIndex - 1].AssignedMemberId = members[memberIndex - 1].Id;\\n        SaveTasks(tasks);\\n        Console.WriteLine(\\\"Task assigned successfully.\\\");\\n    }\\n\\n    private void ViewTasks()\\n    {\\n        var tasks = LoadTasks();\\n        var members = LoadTeamMembers();\\n\\n        if (tasks.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nAll Tasks:\\\");\\n        foreach (var task in tasks)\\n        {\\n            string assignedTo = \\\"Unassigned\\\";\\n            if (task.AssignedMemberId.HasValue)\\n            {\\n                var member = members.Find(m => m.Id == task.AssignedMemberId.Value);\\n                assignedTo = member != null ? member.Name : \\\"Unknown\\\";\\n            }\\n\\n            Console.WriteLine($\\\"Task: {task.Name}\\\");\\n            Console.WriteLine($\\\"Description: {task.Description}\\\");\\n            Console.WriteLine($\\\"Assigned To: {assignedTo}\\\");\\n            Console.WriteLine($\\\"Status: {(task.IsCompleted ? \\\"Completed\\\" : \\\"Pending\\\")}\\\");\\n            Console.WriteLine(\\\"----------------------\\\");\\n        }\\n    }\\n\\n    private void AddTeamMember()\\n    {\\n        Console.Write(\\\"Enter team member name: \\\");\\n        string name = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter team member email: \\\");\\n        string email = Console.ReadLine();\\n\\n        var members = LoadTeamMembers();\\n        members.Add(new TeamMember\\n        {\\n            Id = Guid.NewGuid(),\\n            Name = name,\\n            Email = email\\n        });\\n\\n        SaveTeamMembers(members);\\n        Console.WriteLine(\\\"Team member added successfully.\\\");\\n    }\\n\\n    private void ViewTeamMembers()\\n    {\\n        var members = LoadTeamMembers();\\n\\n        if (members.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No team members available.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nTeam Members:\\\");\\n        foreach (var member in members)\\n        {\\n            Console.WriteLine($\\\"Name: {member.Name}\\\");\\n            Console.WriteLine($\\\"Email: {member.Email}\\\");\\n            Console.WriteLine(\\\"----------------------\\\");\\n        }\\n    }\\n\\n    private List<Task> LoadTasks()\\n    {\\n        string json = File.ReadAllText(_tasksFilePath);\\n        return JsonSerializer.Deserialize<List<Task>>(json) ?? new List<Task>();\\n    }\\n\\n    private void SaveTasks(List<Task> tasks)\\n    {\\n        string json = JsonSerializer.Serialize(tasks);\\n        File.WriteAllText(_tasksFilePath, json);\\n    }\\n\\n    private List<TeamMember> LoadTeamMembers()\\n    {\\n        string json = File.ReadAllText(_membersFilePath);\\n        return JsonSerializer.Deserialize<List<TeamMember>>(json) ?? new List<TeamMember>();\\n    }\\n\\n    private void SaveTeamMembers(List<TeamMember> members)\\n    {\\n        string json = JsonSerializer.Serialize(members);\\n        File.WriteAllText(_membersFilePath, json);\\n    }\\n\\n    private class Task\\n    {\\n        public Guid Id { get; set; }\\n        public string Name { get; set; }\\n        public string Description { get; set; }\\n        public Guid? AssignedMemberId { get; set; }\\n        public bool IsCompleted { get; set; }\\n    }\\n\\n    private class TeamMember\\n    {\\n        public Guid Id { get; set; }\\n        public string Name { get; set; }\\n        public string Email { get; set; }\\n    }\\n}\",\n  \"name\": \"Task Tracker Module\",\n  \"description\": \"A module for tracking project tasks and team member assignments with JSON persistence\",\n  \"required_apis\": [],\n  \"required_nugets\": [\n    {\n      \"nuget_name\": \"System.Text.Json\",\n      \"nuget_version\": \"6.0.0\"\n    }\n  ]\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":519,"completion_tokens":2007,"total_tokens":2526,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":7},"system_fingerprint":"fp_3d5141a69a_prod0225"}