{
  "isFeatureImplemented": false,
  "updatedSourceCodeFiles": [
    {
      "filename": "Module.cs",
      "source_code": "using SelfEvolvingSoftware.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text.Json;\nusing System.Linq;\n\npublic class AttendanceModule : IGeneratedModule\n{\n    public string Name { get; set; } = \u0022Attendance Management System\u0022;\n\n    public bool Main(string dataFolder)\n    {\n        Console.WriteLine(\u0022Starting Attendance Management Module...\u0022);\n        Console.WriteLine(\u0022Data storage location: \u0022 \u002B dataFolder);\n        \n        Directory.CreateDirectory(dataFolder);\n        \n        var exitRequested = false;\n        while (!exitRequested)\n        {\n            Console.WriteLine(\u0022\\nMain Menu:\u0022);\n            Console.WriteLine(\u00221. Manage Groups\u0022);\n            Console.WriteLine(\u00222. Record Daily Attendance\u0022);\n            Console.WriteLine(\u00223. View/Edit Attendance Records\u0022);\n            Console.WriteLine(\u00224. Generate Weekly Summary\u0022);\n            Console.WriteLine(\u00225. Exit\u0022);\n            \n            var choice = Console.ReadLine();\n            switch (choice)\n            {\n                case \u00221\u0022:\n                    ManageGroups(dataFolder);\n                    break;\n                case \u00222\u0022:\n                    RecordAttendance(dataFolder);\n                    break;\n                case \u00223\u0022:\n                    ViewEditAttendance(dataFolder);\n                    break;\n                case \u00224\u0022:\n                    GenerateWeeklySummary(dataFolder);\n                    break;\n                case \u00225\u0022:\n                    exitRequested = true;\n                    break;\n                default:\n                    Console.WriteLine(\u0022Invalid option\u0022);\n                    break;\n            }\n        }\n        return true;\n    }\n\n    private void ManageGroups(string dataFolder)\n    {\n        var groups = DataStorageHelper.LoadData\u003CGroup\u003E(dataFolder, \u0022groups.json\u0022);\n        \n        Console.WriteLine(\u0022\\nGroup Management:\u0022);\n        Console.WriteLine(\u00221. Create New Group\u0022);\n        Console.WriteLine(\u00222. List Groups\u0022);\n        Console.WriteLine(\u00223. Add Student to Group\u0022);\n        \n        var choice = Console.ReadLine();\n        switch (choice)\n        {\n            case \u00221\u0022:\n                CreateNewGroup(dataFolder, groups);\n                break;\n            case \u00222\u0022:\n                ListGroups(groups);\n                break;\n            case \u00223\u0022:\n                AddStudentToGroup(dataFolder);\n                break;\n        }\n    }\n\n    private void CreateNewGroup(string dataFolder, List\u003CGroup\u003E groups)\n    {\n        Console.WriteLine(\u0022Enter group name:\u0022);\n        var groupName = Console.ReadLine();\n        \n        var newGroup = new Group\n        {\n            GroupId = Guid.NewGuid().ToString(),\n            GroupName = groupName,\n            CreationDate = DateTime.Now\n        };\n        \n        groups.Add(newGroup);\n        DataStorageHelper.SaveData(dataFolder, \u0022groups.json\u0022, groups);\n        Console.WriteLine(\u0022Group created successfully\u0022);\n    }\n\n    private void RecordAttendance(string dataFolder)\n    {\n        var groups = DataStorageHelper.LoadData\u003CGroup\u003E(dataFolder, \u0022groups.json\u0022);\n        var students = DataStorageHelper.LoadData\u003CStudent\u003E(dataFolder, \u0022students.json\u0022);\n        \n        Console.WriteLine(\u0022Select group:\u0022);\n        ListGroups(groups);\n        var groupId = Console.ReadLine();\n        \n        var groupStudents = students.Where(s =\u003E s.GroupId == groupId).ToList();\n        var attendanceRecords = new List\u003CAttendance\u003E();\n        \n        foreach (var student in groupStudents)\n        {\n            Console.WriteLine(\u0022Mark attendance for \u0022 \u002B student.FirstName \u002B \u0022 \u0022 \u002B student.LastName \u002B \u0022 (P/A):\u0022);\n            var status = Console.ReadLine().ToUpper() == \u0022P\u0022 ? \u0022Present\u0022 : \u0022Absent\u0022;\n            \n            attendanceRecords.Add(new Attendance\n            {\n                AttendanceId = Guid.NewGuid().ToString(),\n                StudentId = student.StudentId,\n                Date = DateTime.Now,\n                Status = status,\n                GroupId = groupId\n            });\n        }\n        \n        var existingAttendances = DataStorageHelper.LoadData\u003CAttendance\u003E(dataFolder, \u0022attendances.json\u0022);\n        existingAttendances.AddRange(attendanceRecords);\n        DataStorageHelper.SaveData(dataFolder, \u0022attendances.json\u0022, existingAttendances);\n        Console.WriteLine(\u0022Attendance recorded successfully\u0022);\n    }\n\n    private void GenerateWeeklySummary(string dataFolder)\n    {\n        var groups = DataStorageHelper.LoadData\u003CGroup\u003E(dataFolder, \u0022groups.json\u0022);\n        var attendances = DataStorageHelper.LoadData\u003CAttendance\u003E(dataFolder, \u0022attendances.json\u0022);\n        \n        Console.WriteLine(\u0022Select group:\u0022);\n        ListGroups(groups);\n        var groupId = Console.ReadLine();\n        \n        var weekStart = DateTime.Now.AddDays(-7);\n        var groupAttendances = attendances\n            .Where(a =\u003E a.GroupId == groupId \u0026\u0026 a.Date \u003E= weekStart)\n            .ToList();\n        \n        var summary = new WeeklySummary\n        {\n            SummaryId = Guid.NewGuid().ToString(),\n            GroupId = groupId,\n            WeekStartDate = weekStart,\n            WeekEndDate = DateTime.Now,\n            TotalStudents = groupAttendances.Select(a =\u003E a.StudentId).Distinct().Count(),\n            TotalPresent = groupAttendances.Count(a =\u003E a.Status == \u0022Present\u0022),\n            Percentage = (float)groupAttendances.Count(a =\u003E a.Status == \u0022Present\u0022) / groupAttendances.Count\n        };\n        \n        var summaries = DataStorageHelper.LoadData\u003CWeeklySummary\u003E(dataFolder, \u0022summaries.json\u0022);\n        summaries.Add(summary);\n        DataStorageHelper.SaveData(dataFolder, \u0022summaries.json\u0022, summaries);\n        \n        Console.WriteLine(\u0022Weekly Summary Generated:\u0022);\n        Console.WriteLine(\u0022Percentage: \u0022 \u002B summary.Percentage.ToString(\u0022P\u0022));\n    }\n\n    private static void ListGroups(List\u003CGroup\u003E groups)\n    {\n        foreach (var group in groups)\n        {\n            Console.WriteLine(group.GroupId \u002B \u0022 - \u0022 \u002B group.GroupName);\n        }\n    }\n\n    private void AddStudentToGroup(string dataFolder)\n    {\n        var groups = DataStorageHelper.LoadData\u003CGroup\u003E(dataFolder, \u0022groups.json\u0022);\n        Console.WriteLine(\u0022Available Groups:\u0022);\n        ListGroups(groups);\n\n        Console.WriteLine(\u0022\\nEnter group ID to add student to:\u0022);\n        var groupId = Console.ReadLine();\n\n        if (!groups.Any(g =\u003E g.GroupId == groupId))\n        {\n            Console.WriteLine(\u0022Invalid group ID!\u0022);\n            return;\n        }\n\n        var students = DataStorageHelper.LoadData\u003CStudent\u003E(dataFolder, \u0022students.json\u0022);\n        \n        Console.WriteLine(\u0022Enter student first name:\u0022);\n        var firstName = Console.ReadLine();\n        Console.WriteLine(\u0022Enter student last name:\u0022);\n        var lastName = Console.ReadLine();\n        \n        var newStudent = new Student\n        {\n            StudentId = Guid.NewGuid().ToString(),\n            FirstName = firstName,\n            LastName = lastName,\n            GroupId = groupId\n        };\n        \n        students.Add(newStudent);\n        DataStorageHelper.SaveData(dataFolder, \u0022students.json\u0022, students);\n        Console.WriteLine(\u0022Student added to group successfully\u0022);\n    }\n\n    private void ViewEditAttendance(string dataFolder)\n    {\n        var attendances = DataStorageHelper.LoadData\u003CAttendance\u003E(dataFolder, \u0022attendances.json\u0022);\n        \n        Console.WriteLine(\u0022Enter date (yyyy-MM-dd):\u0022);\n        if (DateTime.TryParse(Console.ReadLine(), out var date))\n        {\n            var dailyAttendances = attendances.Where(a =\u003E a.Date.Date == date.Date).ToList();\n            foreach (var att in dailyAttendances)\n            {\n                Console.WriteLine(att.Date \u002B \u0022 - \u0022 \u002B att.Status);\n            }\n        }\n    }\n}\n\npublic static class DataStorageHelper\n{\n    public static List\u003CT\u003E LoadData\u003CT\u003E(string dataFolder, string fileName)\n    {\n        var path = Path.Combine(dataFolder, fileName);\n        if (!File.Exists(path)) return new List\u003CT\u003E();\n        \n        var json = File.ReadAllText(path);\n        return JsonSerializer.Deserialize\u003CList\u003CT\u003E\u003E(json) ?? new List\u003CT\u003E();\n    }\n\n    public static void SaveData\u003CT\u003E(string dataFolder, string fileName, List\u003CT\u003E data)\n    {\n        var path = Path.Combine(dataFolder, fileName);\n        var json = JsonSerializer.Serialize(data);\n        File.WriteAllText(path, json);\n    }\n}\n\npublic class Group\n{\n    public string GroupId { get; set; }\n    public string GroupName { get; set; }\n    public DateTime CreationDate { get; set; }\n    public string TeacherId { get; set; }\n}\n\npublic class Student\n{\n    public string StudentId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string GroupId { get; set; }\n}\n\npublic class Attendance\n{\n    public string AttendanceId { get; set; }\n    public string StudentId { get; set; }\n    public DateTime Date { get; set; }\n    public string Status { get; set; }\n    public string GroupId { get; set; }\n}\n\npublic class WeeklySummary\n{\n    public string SummaryId { get; set; }\n    public string GroupId { get; set; }\n    public DateTime WeekStartDate { get; set; }\n    public DateTime WeekEndDate { get; set; }\n    public int TotalStudents { get; set; }\n    public int TotalPresent { get; set; }\n    public float Percentage { get; set; }\n}"
    }
  ],
  "required_nugets": []
}