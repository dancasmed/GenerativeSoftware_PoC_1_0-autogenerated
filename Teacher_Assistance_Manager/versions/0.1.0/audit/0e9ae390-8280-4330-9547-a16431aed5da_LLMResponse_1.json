{
  "choices": [
    {
      "message": {
        "content": "\u0060\u0060\u0060json\n{\n  \u0022source_code\u0022: \u0022using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\nusing System.Text.Json.Serialization;\\n\\npublic enum AttendanceStatus { Present, Absent, Late, Excused }\\n\\npublic class Group\\n{\\n    public string Id { get; set; } = Guid.NewGuid().ToString();\\n    public string Name { get; set; }\\n    public string Description { get; set; }\\n    public DateTime CreatedAt { get; set; } = DateTime.Now;\\n    public DateTime UpdatedAt { get; set; } = DateTime.Now;\\n}\\n\\npublic class Student\\n{\\n    public string Id { get; set; } = Guid.NewGuid().ToString();\\n    public string Name { get; set; }\\n    public string GroupId { get; set; }\\n    public DateTime CreatedAt { get; set; } = DateTime.Now;\\n    public DateTime UpdatedAt { get; set; } = DateTime.Now;\\n}\\n\\npublic class Attendance\\n{\\n    public string Id { get; set; } = Guid.NewGuid().ToString();\\n    public string StudentId { get; set; }\\n    public DateTime Date { get; set; } = DateTime.Today;\\n    public AttendanceStatus Status { get; set; }\\n    public string Notes { get; set; }\\n    public DateTime CreatedAt { get; set; } = DateTime.Now;\\n    public DateTime UpdatedAt { get; set; } = DateTime.Now;\\n}\\n\\npublic class WeeklySummary\\n{\\n    public string Id { get; set; } = Guid.NewGuid().ToString();\\n    public string GroupId { get; set; }\\n    public DateTime WeekStartDate { get; set; }\\n    public DateTime WeekEndDate { get; set; }\\n    public int TotalStudents { get; set; }\\n    public int TotalPresent { get; set; }\\n    public int TotalAbsent { get; set; }\\n    public int TotalLate { get; set; }\\n    public int TotalExcused { get; set; }\\n    public float AttendancePercentage { get; set; }\\n    public DateTime CreatedAt { get; set; } = DateTime.Now;\\n    public DateTime UpdatedAt { get; set; } = DateTime.Now;\\n}\\n\\npublic class DataService\\n{\\n    private readonly string _dataFolder;\\n    private readonly JsonSerializerOptions _jsonOptions = new()\\n    {\\n        Converters = { new JsonStringEnumConverter() },\\n        WriteIndented = true\\n    };\\n\\n    public DataService(string dataFolder)\\n    {\\n        _dataFolder = dataFolder;\\n        Directory.CreateDirectory(dataFolder);\\n    }\\n\\n    public List\u003CT\u003E LoadData\u003CT\u003E(string fileName)\\n    {\\n        var path = Path.Combine(_dataFolder, fileName);\\n        if (!File.Exists(path)) return new List\u003CT\u003E();\\n        var json = File.ReadAllText(path);\\n        return JsonSerializer.Deserialize\u003CList\u003CT\u003E\u003E(json, _jsonOptions) ?? new List\u003CT\u003E();\\n    }\\n\\n    public void SaveData\u003CT\u003E(string fileName, List\u003CT\u003E data)\\n    {\\n        var path = Path.Combine(_dataFolder, fileName);\\n        var json = JsonSerializer.Serialize(data, _jsonOptions);\\n        File.WriteAllText(path, json);\\n    }\\n}\\n\\npublic class GroupService\\n{\\n    private readonly DataService _dataService;\\n    private List\u003CGroup\u003E _groups;\\n\\n    public GroupService(DataService dataService)\\n    {\\n        _dataService = dataService;\\n        _groups = _dataService.LoadData\u003CGroup\u003E(\\\u0022groups.json\\\u0022);\\n    }\\n\\n    public void CreateGroup(Group group)\\n    {\\n        _groups.Add(group);\\n        _dataService.SaveData(\\\u0022groups.json\\\u0022, _groups);\\n    }\\n\\n    public List\u003CGroup\u003E GetAllGroups() =\u003E _groups;\\n\\n    public Group GetGroupById(string id) =\u003E _groups.FirstOrDefault(g =\u003E g.Id == id);\\n\\n    public void UpdateGroup(Group updatedGroup)\\n    {\\n        var index = _groups.FindIndex(g =\u003E g.Id == updatedGroup.Id);\\n        if (index != -1)\\n        {\\n            updatedGroup.UpdatedAt = DateTime.Now;\\n            _groups[index] = updatedGroup;\\n            _dataService.SaveData(\\\u0022groups.json\\\u0022, _groups);\\n        }\\n    }\\n\\n    public void DeleteGroup(string id)\\n    {\\n        var group = _groups.FirstOrDefault(g =\u003E g.Id == id);\\n        if (group != null)\\n        {\\n            _groups.Remove(group);\\n            _dataService.SaveData(\\\u0022groups.json\\\u0022, _groups);\\n        }\\n    }\\n\\n    public List\u003CGroup\u003E SearchGroups(string searchTerm) =\u003E\\n        _groups.Where(g =\u003E g.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)\\n            .ToList();\\n}\\n\\npublic class StudentService\\n{\\n    private readonly DataService _dataService;\\n    private List\u003CStudent\u003E _students;\\n\\n    public StudentService(DataService dataService)\\n    {\\n        _dataService = dataService;\\n        _students = _dataService.LoadData\u003CStudent\u003E(\\\u0022students.json\\\u0022);\\n    }\\n\\n    public void CreateStudent(Student student)\\n    {\\n        _students.Add(student);\\n        _dataService.SaveData(\\\u0022students.json\\\u0022, _students);\\n    }\\n\\n    public List\u003CStudent\u003E GetStudentsByGroup(string groupId) =\u003E\\n        _students.Where(s =\u003E s.GroupId == groupId).ToList();\\n\\n    public void UpdateStudent(Student updatedStudent)\\n    {\\n        var index = _students.FindIndex(s =\u003E s.Id == updatedStudent.Id);\\n        if (index != -1)\\n        {\\n            updatedStudent.UpdatedAt = DateTime.Now;\\n            _students[index] = updatedStudent;\\n            _dataService.SaveData(\\\u0022students.json\\\u0022, _students);\\n        }\\n    }\\n\\n    public void DeleteStudent(string id)\\n    {\\n        var student = _students.FirstOrDefault(s =\u003E s.Id == id);\\n        if (student != null)\\n        {\\n            _students.Remove(student);\\n            _dataService.SaveData(\\\u0022students.json\\\u0022, _students);\\n        }\\n    }\\n\\n    public List\u003CStudent\u003E SearchStudents(string searchTerm) =\u003E\\n        _students.Where(s =\u003E s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))\\n            .ToList();\\n}\\n\\npublic class AttendanceService\\n{\\n    private readonly DataService _dataService;\\n    private List\u003CAttendance\u003E _attendances;\\n\\n    public AttendanceService(DataService dataService)\\n    {\\n        _dataService = dataService;\\n        _attendances = _dataService.LoadData\u003CAttendance\u003E(\\\u0022attendances.json\\\u0022);\\n    }\\n\\n    public void RecordAttendance(Attendance attendance)\\n    {\\n        var existing = _attendances.FirstOrDefault(a =\u003E\\n            a.StudentId == attendance.StudentId \u0026\u0026 a.Date == attendance.Date);\\n\\n        if (existing != null)\\n        {\\n            existing.Status = attendance.Status;\\n            existing.Notes = attendance.Notes;\\n            existing.UpdatedAt = DateTime.Now;\\n        }\\n        else\\n        {\\n            _attendances.Add(attendance);\\n        }\\n        _dataService.SaveData(\\\u0022attendances.json\\\u0022, _attendances);\\n    }\\n\\n    public List\u003CAttendance\u003E GetAttendanceByGroupAndDate(string groupId, DateTime date)\\n    {\\n        var studentService = new StudentService(_dataService);\\n        var students = studentService.GetStudentsByGroup(groupId);\\n        return _attendances\\n            .Where(a =\u003E students.Any(s =\u003E s.Id == a.StudentId) \u0026\u0026 a.Date == date)\\n            .ToList();\\n    }\\n}\\n\\npublic class WeeklySummaryService\\n{\\n    private readonly DataService _dataService;\\n    private List\u003CWeeklySummary\u003E _summaries;\\n\\n    public WeeklySummaryService(DataService dataService)\\n    {\\n        _dataService = dataService;\\n        _summaries = _dataService.LoadData\u003CWeeklySummary\u003E(\\\u0022summaries.json\\\u0022);\\n    }\\n\\n    public WeeklySummary GenerateSummary(string groupId, DateTime weekStart)\\n    {\\n        var weekEnd = weekStart.AddDays(6);\\n        var studentService = new StudentService(_dataService);\\n        var attendanceService = new AttendanceService(_dataService);\\n\\n        var students = studentService.GetStudentsByGroup(groupId);\\n        var totalStudents = students.Count;\\n        if (totalStudents == 0) return null;\\n\\n        var daysInWeek = (int)(weekEnd - weekStart).TotalDays \u002B 1;\\n        var totalPossible = totalStudents * daysInWeek;\\n\\n        var attendances = _dataService.LoadData\u003CAttendance\u003E(\\\u0022attendances.json\\\u0022)\\n            .Where(a =\u003E a.Date \u003E= weekStart \u0026\u0026 a.Date \u003C= weekEnd \u0026\u0026\\n                        students.Any(s =\u003E s.Id == a.StudentId))\\n            .ToList();\\n\\n        var summary = new WeeklySummary\\n        {\\n            GroupId = groupId,\\n            WeekStartDate = weekStart,\\n            WeekEndDate = weekEnd,\\n            TotalStudents = totalStudents,\\n            TotalPresent = attendances.Count(a =\u003E a.Status == AttendanceStatus.Present),\\n            TotalAbsent = attendances.Count(a =\u003E a.Status == AttendanceStatus.Absent),\\n            TotalLate = attendances.Count(a =\u003E a.Status == AttendanceStatus.Late),\\n            TotalExcused = attendances.Count(a =\u003E a.Status == AttendanceStatus.Excused),\\n        };\\n\\n        var attendedDays = summary.TotalPresent \u002B summary.TotalLate \u002B summary.TotalExcused;\\n        summary.AttendancePercentage = totalPossible \u003E 0 ?\\n            (float)attendedDays / totalPossible * 100 : 0;\\n\\n        _summaries.Add(summary);\\n        _dataService.SaveData(\\\u0022summaries.json\\\u0022, _summaries);\\n        return summary;\\n    }\\n\\n    public List\u003CWeeklySummary\u003E GetSummariesByGroup(string groupId) =\u003E\\n        _summaries.Where(s =\u003E s.GroupId == groupId).ToList();\\n}\\n\\npublic class AttendanceModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\u0022Attendance Management Module\\\u0022;\\n    private DataService _dataService;\\n    private GroupService _groupService;\\n    private StudentService _studentService;\\n    private AttendanceService _attendanceService;\\n    private WeeklySummaryService _summaryService;\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\u0022Initializing Attendance Management Module...\\\u0022);\\n        _dataService = new DataService(dataFolder);\\n        _groupService = new GroupService(_dataService);\\n        _studentService = new StudentService(_dataService);\\n        _attendanceService = new AttendanceService(_dataService);\\n        _summaryService = new WeeklySummaryService(_dataService);\\n\\n        while (true)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nMain Menu:\\\u0022);\\n            Console.WriteLine(\\\u00221. Manage Groups\\\u0022);\\n            Console.WriteLine(\\\u00222. Manage Students\\\u0022);\\n            Console.WriteLine(\\\u00223. Record Attendance\\\u0022);\\n            Console.WriteLine(\\\u00224. View Daily Attendance\\\u0022);\\n            Console.WriteLine(\\\u00225. Generate Weekly Summary\\\u0022);\\n            Console.WriteLine(\\\u00226. Exit\\\u0022);\\n            Console.Write(\\\u0022Select an option: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    ManageGroups();\\n                    break;\\n                case \\\u00222\\\u0022:\\n                    ManageStudents();\\n                    break;\\n                case \\\u00223\\\u0022:\\n                    RecordAttendance();\\n                    break;\\n                case \\\u00224\\\u0022:\\n                    ViewDailyAttendance();\\n                    break;\\n                case \\\u00225\\\u0022:\\n                    GenerateWeeklySummary();\\n                    break;\\n                case \\\u00226\\\u0022:\\n                    Console.WriteLine(\\\u0022Exiting module...\\\u0022);\\n                    return true;\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option, please try again.\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    private void ManageGroups()\\n    {\\n        while (true)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nGroup Management:\\\u0022);\\n            Console.WriteLine(\\\u00221. Create Group\\\u0022);\\n            Console.WriteLine(\\\u00222. View All Groups\\\u0022);\\n            Console.WriteLine(\\\u00223. Update Group\\\u0022);\\n            Console.WriteLine(\\\u00224. Delete Group\\\u0022);\\n            Console.WriteLine(\\\u00225. Search Groups\\\u0022);\\n            Console.WriteLine(\\\u00226. Return to Main Menu\\\u0022);\\n            Console.Write(\\\u0022Select an option: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    CreateGroup();\\n                    break;\\n                case \\\u00222\\\u0022:\\n                    ViewAllGroups();\\n                    break;\\n                case \\\u00223\\\u0022:\\n                    UpdateGroup();\\n                    break;\\n                case \\\u00224\\\u0022:\\n                    DeleteGroup();\\n                    break;\\n                case \\\u00225\\\u0022:\\n                    SearchGroups();\\n                    break;\\n                case \\\u00226\\\u0022:\\n                    return;\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option, please try again.\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    private void CreateGroup()\\n    {\\n        Console.Write(\\\u0022Enter group name: \\\u0022);\\n        var name = Console.ReadLine();\\n        Console.Write(\\\u0022Enter group description: \\\u0022);\\n        var description = Console.ReadLine();\\n\\n        _groupService.CreateGroup(new Group { Name = name, Description = description });\\n        Console.WriteLine(\\\u0022Group created successfully.\\\u0022);\\n    }\\n\\n    private void ViewAllGroups()\\n    {\\n        var groups = _groupService.GetAllGroups();\\n        if (!groups.Any())\\n        {\\n            Console.WriteLine(\\\u0022No groups found.\\\u0022);\\n            return;\\n        }\\n\\n        foreach (var group in groups)\\n        {\\n            Console.WriteLine(\\\u0022ID: {0}, Name: {1}, Students: {2}\\\u0022,\\n                group.Id,\\n                group.Name,\\n                _studentService.GetStudentsByGroup(group.Id).Count);\\n        }\\n    }\\n\\n    private void UpdateGroup()\\n    {\\n        Console.Write(\\\u0022Enter group ID to update: \\\u0022);\\n        var id = Console.ReadLine();\\n        var group = _groupService.GetGroupById(id);\\n\\n        if (group == null)\\n        {\\n            Console.WriteLine(\\\u0022Group not found.\\\u0022);\\n            return;\\n        }\\n\\n        Console.Write(\\\u0022Enter new name (current: {0}): \\\u0022, group.Name);\\n        var name = Console.ReadLine();\\n        Console.Write(\\\u0022Enter new description (current: {0}): \\\u0022, group.Description);\\n        var description = Console.ReadLine();\\n\\n        group.Name = string.IsNullOrWhiteSpace(name) ? group.Name : name;\\n        group.Description = string.IsNullOrWhiteSpace(description) ? group.Description : description;\\n        _groupService.UpdateGroup(group);\\n        Console.WriteLine(\\\u0022Group updated successfully.\\\u0022);\\n    }\\n\\n    private void DeleteGroup()\\n    {\\n        Console.Write(\\\u0022Enter group ID to delete: \\\u0022);\\n        var id = Console.ReadLine();\\n        _groupService.DeleteGroup(id);\\n        Console.WriteLine(\\\u0022Group deleted successfully.\\\u0022);\\n    }\\n\\n    private void SearchGroups()\\n    {\\n        Console.Write(\\\u0022Enter search term: \\\u0022);\\n        var term = Console.ReadLine();\\n        var results = _groupService.SearchGroups(term);\\n\\n        if (!results.Any())\\n        {\\n            Console.WriteLine(\\\u0022No matching groups found.\\\u0022);\\n            return;\\n        }\\n\\n        foreach (var group in results)\\n        {\\n            Console.WriteLine(\\\u0022ID: {0}, Name: {1}\\\u0022, group.Id, group.Name);\\n        }\\n    }\\n\\n    private void ManageStudents()\\n    {\\n        while (true)\\n        {\\n            Console.WriteLine(\\\u0022\\\\nStudent Management:\\\u0022);\\n            Console.WriteLine(\\\u00221. Add Student to Group\\\u0022);\\n            Console.WriteLine(\\\u00222. View Students in Group\\\u0022);\\n            Console.WriteLine(\\\u00223. Update Student\\\u0022);\\n            Console.WriteLine(\\\u00224. Delete Student\\\u0022);\\n            Console.WriteLine(\\\u00225. Search Students\\\u0022);\\n            Console.WriteLine(\\\u00226. Return to Main Menu\\\u0022);\\n            Console.Write(\\\u0022Select an option: \\\u0022);\\n\\n            switch (Console.ReadLine())\\n            {\\n                case \\\u00221\\\u0022:\\n                    AddStudent();\\n                    break;\\n                case \\\u00222\\\u0022:\\n                    ViewStudentsInGroup();\\n                    break;\\n                case \\\u00223\\\u0022:\\n                    UpdateStudent();\\n                    break;\\n                case \\\u00224\\\u0022:\\n                    DeleteStudent();\\n                    break;\\n                case \\\u00225\\\u0022:\\n                    SearchStudents();\\n                    break;\\n                case \\\u00226\\\u0022:\\n                    return;\\n                default:\\n                    Console.WriteLine(\\\u0022Invalid option, please try again.\\\u0022);\\n                    break;\\n            }\\n        }\\n    }\\n\\n    private void AddStudent()\\n    {\\n        Console.Write(\\\u0022Enter student name: \\\u0022);\\n        var name = Console.ReadLine();\\n        Console.Write(\\\u0022Enter group ID: \\\u0022);\\n        var groupId = Console.ReadLine();\\n\\n        if (_groupService.GetGroupById(groupId) == null)\\n        {\\n            Console.WriteLine(\\\u0022Group not found.\\\u0022);\\n            return;\\n        }\\n\\n        _studentService.CreateStudent(new Student { Name = name, GroupId = groupId });\\n        Console.WriteLine(\\\u0022Student added successfully.\\\u0022);\\n    }\\n\\n    private void ViewStudentsInGroup()\\n    {\\n        Console.Write(\\\u0022Enter group ID: \\\u0022);\\n        var groupId = Console.ReadLine();\\n        var students = _studentService.GetStudentsByGroup"
      }
    }
  ]
}