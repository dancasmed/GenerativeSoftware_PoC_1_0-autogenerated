{
  "model": "deepseek-reasoner",
  "messages": [
    {
      "role": "system",
      "content": "You are an skilled systems analist and software engineer. The user will provide you with a software module metadata and souce code. Your task is to generate a README file for this module."
    },
    {
      "role": "user",
      "content": "I will provide a metadata object describing a software project. This metadata may include details such as the project name, description, features, user interaction points, data\nmodels, dependencies (e.g., NuGet packages or APIs), and any other relevant information. Based on this metadata, generate a well-structured README.md document in markdown format.\nThe README should include the following sections:\n1. **Overview**: A brief description of the project\u0027s purpose and functionality.\n2. **Features**: A breakdown of implemented features and, if applicable, future/planned features.\n3. **Requirements**: List of dependencies or libraries required to run the project (e.g., NuGet packages).\n4. **Usage**: Instructions on how to use the project, including examples of user interactions.\n5. **Data Models** (if applicable): A description of any data structures or schemas used in the project.\n6. **Roadmap** (optional): Information about future improvements or planned features. Avoid mentioning dates or specific timelines.\n\nThe README should be written in clear, concise language and formatted with appropriate markdown headers and bullet points. If the metadata includes specific fields like\n\u0027CreationRequirements\u0027 or \u0027FunctionalDetails,\u0027 ensure these are reflected in the generated document.\n\n### Example output:\n{ \u0022readme\u0022 : \u0022 GENERATED COUMENT IN MARKDOWN FORMAT\u0022 }\n\n-- Metadata object --\n{\n  \u0022Name\u0022: \u0022Teacher Assistance Manager\u0022,\n  \u0022CreationRequirements\u0022: {\n    \u0022InitialRequirement\u0022: \u0022im a teacher, have multiple groups and need help to manage the assistance list for each group. need to be able to create groups with students and need to generate an assistance list for the current day, at the end of the week I need a summary for the percentage os assitance per group\u0022,\n    \u0022ReviewedRequirement\u0022: \u0022Design a software module to help teachers manage student attendance across multiple groups. The module should allow the teacher to create groups, add students to these groups, and record daily attendance. At the end of each week, the module should generate a summary report showing the attendance percentage for each group. The module should be intuitive and easy to use, with clear options for managing groups, students, and attendance records.\u0022,\n    \u0022FunctionalDetails\u0022: [\n      \u0022Create and manage multiple student groups\u0022,\n      \u0022Add, edit, and remove students from groups\u0022,\n      \u0022Record daily attendance for each group\u0022,\n      \u0022Generate weekly attendance summary reports\u0022,\n      \u0022View historical attendance data\u0022\n    ],\n    \u0022UserInteraction\u0022: [\n      \u0022Create a new group by providing a group name and description\u0022,\n      \u0022Add students to a group by entering their names and any other relevant details\u0022,\n      \u0022Mark attendance for each student in a group on a daily basis\u0022,\n      \u0022View and edit attendance records for any given day\u0022,\n      \u0022Generate and view weekly attendance summary reports\u0022\n    ],\n    \u0022MinimumFeatures\u0022: [\n      {\n        \u0022Description\u0022: \u0022Create and manage student groups\u0022,\n        \u0022IsImplemented\u0022: true\n      },\n      {\n        \u0022Description\u0022: \u0022Add and remove students from groups\u0022,\n        \u0022IsImplemented\u0022: true\n      },\n      {\n        \u0022Description\u0022: \u0022Record daily attendance\u0022,\n        \u0022IsImplemented\u0022: true\n      },\n      {\n        \u0022Description\u0022: \u0022Generate weekly attendance summary reports\u0022,\n        \u0022IsImplemented\u0022: true\n      }\n    ],\n    \u0022GoodToHaveFeatures\u0022: [\n      {\n        \u0022Description\u0022: \u0022Bulk import/export of student data\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Customizable attendance statuses (e.g., present, absent, late)\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Filter and search functionality for groups and students\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Basic analytics (e.g., attendance trends over time)\u0022,\n        \u0022IsImplemented\u0022: false\n      }\n    ],\n    \u0022BarRaiserFeatures\u0022: [\n      {\n        \u0022Description\u0022: \u0022Integration with calendar systems to automatically mark holidays\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Predictive analytics to identify at-risk students based on attendance patterns\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Multi-teacher collaboration features\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Mobile accessibility for recording attendance on-the-go\u0022,\n        \u0022IsImplemented\u0022: false\n      }\n    ],\n    \u0022DataModels\u0022: [\n      \u0022Group: {\\u0022group_id\\u0022: \\u0022string\\u0022, \\u0022group_name\\u0022: \\u0022string\\u0022, \\u0022description\\u0022: \\u0022string\\u0022, \\u0022created_at\\u0022: \\u0022date\\u0022, \\u0022updated_at\\u0022: \\u0022date\\u0022}\u0022,\n      \u0022Student: {\\u0022student_id\\u0022: \\u0022string\\u0022, \\u0022group_id\\u0022: \\u0022string\\u0022, \\u0022name\\u0022: \\u0022string\\u0022, \\u0022email\\u0022: \\u0022string\\u0022, \\u0022created_at\\u0022: \\u0022date\\u0022, \\u0022updated_at\\u0022: \\u0022date\\u0022}\u0022,\n      \u0022Attendance: {\\u0022attendance_id\\u0022: \\u0022string\\u0022, \\u0022group_id\\u0022: \\u0022string\\u0022, \\u0022student_id\\u0022: \\u0022string\\u0022, \\u0022date\\u0022: \\u0022date\\u0022, \\u0022status\\u0022: \\u0022string\\u0022, \\u0022notes\\u0022: \\u0022string\\u0022, \\u0022created_at\\u0022: \\u0022date\\u0022, \\u0022updated_at\\u0022: \\u0022date\\u0022}\u0022,\n      \u0022WeeklySummary: {\\u0022summary_id\\u0022: \\u0022string\\u0022, \\u0022group_id\\u0022: \\u0022string\\u0022, \\u0022week_start_date\\u0022: \\u0022date\\u0022, \\u0022week_end_date\\u0022: \\u0022date\\u0022, \\u0022total_students\\u0022: \\u0022integer\\u0022, \\u0022total_present\\u0022: \\u0022integer\\u0022, \\u0022total_absent\\u0022: \\u0022integer\\u0022, \\u0022attendance_percentage\\u0022: \\u0022float\\u0022, \\u0022created_at\\u0022: \\u0022date\\u0022, \\u0022updated_at\\u0022: \\u0022date\\u0022}\u0022\n    ]\n  },\n  \u0022Version\u0022: {\n    \u0022Major\u0022: 0,\n    \u0022Minor\u0022: 1,\n    \u0022Patch\u0022: 0\n  },\n  \u0022IsInitialRequirementReviewed\u0022: true,\n  \u0022IsSourceCodeGenerated\u0022: true,\n  \u0022AreMinimumFeaturesImplemented\u0022: true,\n  \u0022AreGoodToHaveFeaturesImplemented\u0022: false,\n  \u0022AreBarRaiserFeaturesImplemented\u0022: false,\n  \u0022IsSourceCodeCompiled\u0022: true,\n  \u0022IsReadmeFileGenerated\u0022: false,\n  \u0022Description\u0022: \u0022Attendance management system for teachers to handle student groups, record daily attendance, and generate weekly reports. Implements CRUD operations for groups, students, and attendance records with JSON persistence.\u0022,\n  \u0022RequiredAPIs\u0022: [],\n  \u0022RequiredNuGets\u0022: []\n}\n-- Start: Module.cs --\nusing SelfEvolvingSoftware.Interfaces;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.Json;\n\npublic class AttendanceModule : IGeneratedModule\n{\n    public string Name { get; set; }\n\n    public AttendanceModule()\n    {\n        Name = \u0022Teacher Attendance Manager\u0022;\n    }\n\n    public bool Main(string dataFolder)\n    {\n        Console.WriteLine(\u0022Initializing Attendance Management Module...\u0022);\n        \n        var dataStorage = new DataStorage(dataFolder);\n        var groups = dataStorage.LoadData\u003CGroup\u003E();\n        var students = dataStorage.LoadData\u003CStudent\u003E();\n        var attendanceRecords = dataStorage.LoadData\u003CAttendance\u003E();\n\n        while (true)\n        {\n            Console.WriteLine(\u0022\\nMain Menu:\u0022);\n            Console.WriteLine(\u00221. Manage Groups\u0022);\n            Console.WriteLine(\u00222. Manage Students\u0022);\n            Console.WriteLine(\u00223. Record Attendance\u0022);\n            Console.WriteLine(\u00224. Generate Weekly Report\u0022);\n            Console.WriteLine(\u00225. Exit\u0022);\n\n            var choice = Console.ReadLine();\n            switch (choice)\n            {\n                case \u00221\u0022:\n                    ManageGroups(dataStorage, groups);\n                    break;\n                case \u00222\u0022:\n                    ManageStudents(dataStorage, students, groups);\n                    break;\n                case \u00223\u0022:\n                    RecordAttendance(dataStorage, attendanceRecords, groups, students);\n                    break;\n                case \u00224\u0022:\n                    GenerateWeeklyReport(dataStorage, groups, attendanceRecords);\n                    break;\n                case \u00225\u0022:\n                    Console.WriteLine(\u0022Saving data and exiting module...\u0022);\n                    return true;\n                default:\n                    Console.WriteLine(\u0022Invalid option\u0022);\n                    break;\n            }\n        }\n    }\n\n    private void ManageGroups(DataStorage dataStorage, List\u003CGroup\u003E groups)\n    {\n        while (true)\n        {\n            Console.WriteLine(\u0022\\nGroup Management:\u0022);\n            Console.WriteLine(\u00221. Create Group\u0022);\n            Console.WriteLine(\u00222. List Groups\u0022);\n            Console.WriteLine(\u00223. Edit Group\u0022);\n            Console.WriteLine(\u00224. Delete Group\u0022);\n            Console.WriteLine(\u00225. Back to Main Menu\u0022);\n\n            var choice = Console.ReadLine();\n\n            if (choice == \u00221\u0022)\n            {\n                Console.Write(\u0022Enter group name: \u0022);\n                var name = Console.ReadLine();\n                Console.Write(\u0022Enter group description: \u0022);\n                var desc = Console.ReadLine();\n\n                groups.Add(new Group\n                {\n                    GroupId = Guid.NewGuid().ToString(),\n                    GroupName = name,\n                    Description = desc,\n                    CreatedAt = DateTime.Now,\n                    UpdatedAt = DateTime.Now\n                });\n\n                dataStorage.SaveData(groups);\n                Console.WriteLine(\u0022Group created successfully\u0022);\n            }\n            else if (choice == \u00222\u0022)\n            {\n                Console.WriteLine(\u0022\\nExisting Groups:\u0022);\n                foreach (var group in groups)\n                {\n                    Console.WriteLine($\u0022ID: {group.GroupId}, Name: {group.GroupName}, Description: {group.Description}\u0022);\n                }\n            }\n            else if (choice == \u00223\u0022)\n            {\n                Console.Write(\u0022Enter Group ID to edit: \u0022);\n                var groupId = Console.ReadLine();\n                var group = groups.FirstOrDefault(g =\u003E g.GroupId == groupId);\n                if (group == null)\n                {\n                    Console.WriteLine(\u0022Group not found.\u0022);\n                    continue;\n                }\n\n                Console.Write(\u0022Enter new group name (leave blank to keep current): \u0022);\n                var newName = Console.ReadLine();\n                Console.Write(\u0022Enter new group description (leave blank to keep current): \u0022);\n                var newDesc = Console.ReadLine();\n\n                if (!string.IsNullOrWhiteSpace(newName))\n                    group.GroupName = newName;\n                if (!string.IsNullOrWhiteSpace(newDesc))\n                    group.Description = newDesc;\n\n                group.UpdatedAt = DateTime.Now;\n                dataStorage.SaveData(groups);\n                Console.WriteLine(\u0022Group updated successfully.\u0022);\n            }\n            else if (choice == \u00224\u0022)\n            {\n                Console.Write(\u0022Enter Group ID to delete: \u0022);\n                var groupId = Console.ReadLine();\n                var group = groups.FirstOrDefault(g =\u003E g.GroupId == groupId);\n                if (group == null)\n                {\n                    Console.WriteLine(\u0022Group not found.\u0022);\n                    continue;\n                }\n\n                Console.Write($\u0022Are you sure you want to delete group {group.GroupName}? (Y/N): \u0022);\n                var confirm = Console.ReadLine().ToUpper();\n                if (confirm == \u0022Y\u0022)\n                {\n                    groups.Remove(group);\n                    dataStorage.SaveData(groups);\n                    Console.WriteLine(\u0022Group deleted successfully.\u0022);\n                }\n            }\n            else if (choice == \u00225\u0022)\n            {\n                break;\n            }\n            else\n            {\n                Console.WriteLine(\u0022Invalid option\u0022);\n            }\n        }\n    }\n\n    private void ManageStudents(DataStorage dataStorage, List\u003CStudent\u003E students, List\u003CGroup\u003E groups)\n    {\n        while (true)\n        {\n            Console.WriteLine(\u0022\\nStudent Management:\u0022);\n            Console.WriteLine(\u00221. Add Student\u0022);\n            Console.WriteLine(\u00222. List Students\u0022);\n            Console.WriteLine(\u00223. Edit Student Group\u0022);\n            Console.WriteLine(\u00224. Remove Student\u0022);\n            Console.WriteLine(\u00225. Back to Main Menu\u0022);\n            var choice = Console.ReadLine();\n\n            if (choice == \u00221\u0022)\n            {\n                Console.Write(\u0022Enter student name: \u0022);\n                var name = Console.ReadLine();\n                Console.Write(\u0022Enter student email: \u0022);\n                var email = Console.ReadLine();\n                Console.Write(\u0022Enter group ID: \u0022);\n                var groupId = Console.ReadLine();\n\n                if (!string.IsNullOrWhiteSpace(groupId) \u0026\u0026 !groups.Any(g =\u003E g.GroupId == groupId))\n                {\n                    Console.WriteLine(\u0022Invalid group ID\u0022);\n                    continue;\n                }\n\n                students.Add(new Student\n                {\n                    StudentId = Guid.NewGuid().ToString(),\n                    GroupId = groupId,\n                    Name = name,\n                    Email = email,\n                    CreatedAt = DateTime.Now,\n                    UpdatedAt = DateTime.Now\n                });\n\n                dataStorage.SaveData(students);\n                Console.WriteLine(\u0022Student added successfully\u0022);\n            }\n            else if (choice == \u00222\u0022)\n            {\n                Console.WriteLine(\u0022\\nExisting Students:\u0022);\n                foreach (var student in students)\n                {\n                    Console.WriteLine($\u0022ID: {student.StudentId}, Name: {student.Name}, Email: {student.Email}, Group: {groups.FirstOrDefault(g =\u003E g.GroupId == student.GroupId)?.GroupName ?? \u0022[No Group]\u0022}\u0022);\n                }\n            }\n            else if (choice == \u00223\u0022)\n            {\n                Console.Write(\u0022Enter Student ID to edit: \u0022);\n                var studentId = Console.ReadLine();\n                var student = students.FirstOrDefault(s =\u003E s.StudentId == studentId);\n                if (student == null)\n                {\n                    Console.WriteLine(\u0022Student not found.\u0022);\n                    continue;\n                }\n\n                Console.Write(\u0022Enter new group ID (leave blank to remove from group): \u0022);\n                var newGroupId = Console.ReadLine();\n\n                if (!string.IsNullOrWhiteSpace(newGroupId) \u0026\u0026 !groups.Any(g =\u003E g.GroupId == newGroupId))\n                {\n                    Console.WriteLine(\u0022Invalid group ID. No changes made.\u0022);\n                    continue;\n                }\n\n                student.GroupId = string.IsNullOrWhiteSpace(newGroupId) ? null : newGroupId;\n                student.UpdatedAt = DateTime.Now;\n                dataStorage.SaveData(students);\n                Console.WriteLine(\u0022Student group updated successfully.\u0022);\n            }\n            else if (choice == \u00224\u0022)\n            {\n                Console.Write(\u0022Enter Student ID to remove: \u0022);\n                var studentId = Console.ReadLine();\n                var student = students.FirstOrDefault(s =\u003E s.StudentId == studentId);\n                if (student == null)\n                {\n                    Console.WriteLine(\u0022Student not found.\u0022);\n                    continue;\n                }\n\n                Console.Write($\u0022Are you sure you want to delete {student.Name}? (Y/N): \u0022);\n                var confirm = Console.ReadLine().ToUpper();\n                if (confirm == \u0022Y\u0022)\n                {\n                    students.Remove(student);\n                    dataStorage.SaveData(students);\n                    Console.WriteLine(\u0022Student removed successfully.\u0022);\n                }\n            }\n            else if (choice == \u00225\u0022)\n            {\n                break;\n            }\n            else\n            {\n                Console.WriteLine(\u0022Invalid option\u0022);\n            }\n        }\n    }\n\n    private void RecordAttendance(DataStorage dataStorage, List\u003CAttendance\u003E attendanceRecords, List\u003CGroup\u003E groups, List\u003CStudent\u003E students)\n    {\n        Console.Write(\u0022Enter group ID: \u0022);\n        var groupId = Console.ReadLine();\n\n        var groupStudents = students.Where(s =\u003E s.GroupId == groupId).ToList();\n        if (!groupStudents.Any())\n        {\n            Console.WriteLine(\u0022No students in this group\u0022);\n            return;\n        }\n\n        DateTime attendanceDate;\n        while (true)\n        {\n            Console.Write(\u0022Enter attendance date (YYYY-MM-DD) or press Enter for today: \u0022);\n            var dateInput = Console.ReadLine();\n            \n            if (string.IsNullOrWhiteSpace(dateInput))\n            {\n                attendanceDate = DateTime.Today;\n                break;\n            }\n\n            if (!DateTime.TryParse(dateInput, out attendanceDate))\n            {\n                Console.WriteLine(\u0022Invalid date format. Please try again.\u0022);\n                continue;\n            }\n            break;\n        }\n\n        var existingRecords = attendanceRecords\n            .Where(a =\u003E a.GroupId == groupId \u0026\u0026 a.Date.Date == attendanceDate.Date)\n            .ToList();\n\n        Console.WriteLine(\u0022Marking attendance for \u0022 \u002B attendanceDate.ToString(\u0022yyyy-MM-dd\u0022));\n        foreach (var student in groupStudents)\n        {\n            var existing = existingRecords.FirstOrDefault(a =\u003E a.StudentId == student.StudentId);\n            if (existing != null)\n            {\n                Console.Write($\u0022{student.Name} already has attendance recorded as {existing.Status}. Overwrite? (Y/N): \u0022);\n                var overwrite = Console.ReadLine().ToUpper();\n                if (overwrite != \u0022Y\u0022)\n                {\n                    continue;\n                }\n                attendanceRecords.Remove(existing);\n            }\n\n            Console.Write($\u0022Is {student.Name} present? (Y/N): \u0022);\n            var status = Console.ReadLine().ToUpper() == \u0022Y\u0022 ? \u0022Present\u0022 : \u0022Absent\u0022;\n\n            attendanceRecords.Add(new Attendance\n            {\n                AttendanceId = Guid.NewGuid().ToString(),\n                GroupId = groupId,\n                StudentId = student.StudentId,\n                Date = attendanceDate,\n                Status = status,\n                CreatedAt = DateTime.Now,\n                UpdatedAt = DateTime.Now\n            });\n        }\n\n        dataStorage.SaveData(attendanceRecords);\n        Console.WriteLine(\u0022Attendance recorded successfully\u0022);\n    }\n\n    private void GenerateWeeklyReport(DataStorage dataStorage, List\u003CGroup\u003E groups, List\u003CAttendance\u003E attendanceRecords)\n    {\n        var currentDate = DateTime.Today;\n        var startOfWeek = currentDate.AddDays(-(int)currentDate.DayOfWeek \u002B (int)DayOfWeek.Monday);\n        var endOfWeek = startOfWeek.AddDays(6);\n\n        Console.WriteLine(\u0022\\nWeekly Report from \u0022 \u002B startOfWeek.ToString(\u0022yyyy-MM-dd\u0022) \u002B \u0022 to \u0022 \u002B endOfWeek.ToString(\u0022yyyy-MM-dd\u0022));\n\n        foreach (var group in groups)\n        {\n            var groupAttendance = attendanceRecords\n                .Where(a =\u003E a.GroupId == group.GroupId \u0026\u0026 a.Date \u003E= startOfWeek \u0026\u0026 a.Date \u003C= endOfWeek)\n                .ToList();\n\n            var presentCount = groupAttendance.Count(a =\u003E a.Status == \u0022Present\u0022);\n            var totalSessions = groupAttendance.Count;\n            var percentage = totalSessions \u003E 0 ? (presentCount * 100.0 / totalSessions) : 0;\n\n            Console.WriteLine(\u0022Group: \u0022 \u002B group.GroupName);\n            Console.WriteLine(\u0022Attendance Percentage: \u0022 \u002B percentage.ToString(\u00220.00\u0022) \u002B \u0022%\u0022);\n        }\n    }\n}\n\npublic class DataStorage\n{\n    private readonly string _dataFolder;\n\n    public DataStorage(string dataFolder)\n    {\n        _dataFolder = dataFolder;\n        Directory.CreateDirectory(dataFolder);\n    }\n\n    public List\u003CT\u003E LoadData\u003CT\u003E()\n    {\n        var fileName = Path.Combine(_dataFolder, typeof(T).Name \u002B \u0022.json\u0022);\n        if (!File.Exists(fileName)) return new List\u003CT\u003E();\n\n        var json = File.ReadAllText(fileName);\n        return JsonSerializer.Deserialize\u003CList\u003CT\u003E\u003E(json) ?? new List\u003CT\u003E();\n    }\n\n    public void SaveData\u003CT\u003E(List\u003CT\u003E data)\n    {\n        var fileName = Path.Combine(_dataFolder, typeof(T).Name \u002B \u0022.json\u0022);\n        var json = JsonSerializer.Serialize(data);\n        File.WriteAllText(fileName, json);\n    }\n}\n\npublic class Group\n{\n    public string GroupId { get; set; }\n    public string GroupName { get; set; }\n    public string Description { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n}\n\npublic class Student\n{\n    public string StudentId { get; set; }\n    public string GroupId { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n}\n\npublic class Attendance\n{\n    public string AttendanceId { get; set; }\n    public string GroupId { get; set; }\n    public string StudentId { get; set; }\n    public DateTime Date { get; set; }\n    public string Status { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public DateTime UpdatedAt { get; set; }\n}\n-- End: Module.cs --\n"
    }
  ],
  "stream": false
}