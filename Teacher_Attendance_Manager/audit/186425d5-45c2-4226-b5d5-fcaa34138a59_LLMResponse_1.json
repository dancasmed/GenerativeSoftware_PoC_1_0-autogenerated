
{"id":"451b2ab5-4539-4353-90ee-baadb47cd39e","object":"chat.completion","created":1744176672,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class AttendanceManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Teacher Attendance Manager\\\";\\n\\n    private Dictionary<string, List<DateTime>> _groupAttendance;\\n    private string _dataFilePath;\\n\\n    public AttendanceManager()\\n    {\\n        _groupAttendance = new Dictionary<string, List<DateTime>>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Teacher Attendance Manager module is running.\\\");\\n        _dataFilePath = Path.Combine(dataFolder, \\\"attendance_data.json\\\");\\n\\n        LoadAttendanceData();\\n\\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Record attendance\\\");\\n            Console.WriteLine(\\\"2. View weekly summary\\\");\\n            Console.WriteLine(\\\"3. Add new group\\\");\\n            Console.WriteLine(\\\"4. Exit module\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n\\n            if (int.TryParse(Console.ReadLine(), out int choice))\\n            {\\n                switch (choice)\\n                {\\n                    case 1:\\n                        RecordAttendance();\\n                        break;\\n                    case 2:\\n                        ShowWeeklySummary();\\n                        break;\\n                    case 3:\\n                        AddNewGroup();\\n                        break;\\n                    case 4:\\n                        running = false;\\n                        break;\\n                    default:\\n                        Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                        break;\\n                }\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid input. Please enter a number.\\\");\\n            }\\n        }\\n\\n        SaveAttendanceData();\\n        Console.WriteLine(\\\"Attendance data saved. Module execution completed.\\\");\\n        return true;\\n    }\\n\\n    private void LoadAttendanceData()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                string jsonData = File.ReadAllText(_dataFilePath);\\n                _groupAttendance = JsonSerializer.Deserialize<Dictionary<string, List<DateTime>>>(jsonData);\\n                Console.WriteLine(\\\"Attendance data loaded successfully.\\\");\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Error loading attendance data: \\\" + ex.Message);\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"No existing attendance data found. Starting with empty records.\\\");\\n        }\\n    }\\n\\n    private void SaveAttendanceData()\\n    {\\n        try\\n        {\\n            string jsonData = JsonSerializer.Serialize(_groupAttendance);\\n            File.WriteAllText(_dataFilePath, jsonData);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving attendance data: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void RecordAttendance()\\n    {\\n        if (_groupAttendance.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No groups available. Please add a group first.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"Available groups:\\\");\\n        int index = 1;\\n        foreach (var group in _groupAttendance.Keys)\\n        {\\n            Console.WriteLine(index + \\\". \\\" + group);\\n            index++;\\n        }\\n\\n        Console.Write(\\\"Select group: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int groupIndex) && groupIndex > 0 && groupIndex <= _groupAttendance.Count)\\n        {\\n            string selectedGroup = _groupAttendance.Keys.ElementAt(groupIndex - 1);\\n            DateTime today = DateTime.Today;\\n\\n            if (!_groupAttendance[selectedGroup].Contains(today))\\n            {\\n                _groupAttendance[selectedGroup].Add(today);\\n                Console.WriteLine(\\\"Attendance recorded for \\\" + selectedGroup + \\\" on \\\" + today.ToShortDateString());\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Attendance already recorded for \\\" + selectedGroup + \\\" today.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid group selection.\\\");\\n        }\\n    }\\n\\n    private void ShowWeeklySummary()\\n    {\\n        if (_groupAttendance.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No attendance data available.\\\");\\n            return;\\n        }\\n\\n        DateTime startOfWeek = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);\\n        DateTime endOfWeek = startOfWeek.AddDays(6);\\n\\n        Console.WriteLine(\\\"\\\\nWeekly Attendance Summary (\\\" + startOfWeek.ToShortDateString() + \\\" to \\\" + endOfWeek.ToShortDateString() + \\\"):\\\");\\n\\n        foreach (var group in _groupAttendance)\\n        {\\n            int daysPresent = group.Value.Count(date => date >= startOfWeek && date <= endOfWeek);\\n            double attendancePercentage = (daysPresent / 5.0) * 100; // Assuming 5 school days per week\\n\\n            Console.WriteLine(group.Key + \\\": \\\" + daysPresent + \\\" days present (\\\" + attendancePercentage.ToString(\\\"0.00\\\") + \\\"% attendance)\\\");\\n        }\\n    }\\n\\n    private void AddNewGroup()\\n    {\\n        Console.Write(\\\"Enter new group name: \\\");\\n        string groupName = Console.ReadLine();\\n\\n        if (!string.IsNullOrWhiteSpace(groupName))\\n        {\\n            if (!_groupAttendance.ContainsKey(groupName))\\n            {\\n                _groupAttendance.Add(groupName, new List<DateTime>());\\n                Console.WriteLine(\\\"Group '\\\" + groupName + \\\"' added successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Group '\\\" + groupName + \\\"' already exists.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Group name cannot be empty.\\\");\\n        }\\n    }\\n}\",\n  \"name\": \"Teacher Attendance Manager\",\n  \"description\": \"A module to help teachers manage daily attendance for multiple groups and generate weekly attendance summaries.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":551,"completion_tokens":1444,"total_tokens":1995,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":103},"system_fingerprint":"fp_3d5141a69a_prod0225"}