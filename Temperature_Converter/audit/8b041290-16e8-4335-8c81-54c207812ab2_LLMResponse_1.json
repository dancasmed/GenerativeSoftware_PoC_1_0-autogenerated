
{"id":"bfd8e8ee-0803-4487-baee-66f99f7e0b82","object":"chat.completion","created":1743799478,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class TemperatureConverter : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Temperature Converter\\\";\\n\\n    private string dataFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Temperature Converter module is running.\\\");\\n        \\n        dataFilePath = Path.Combine(dataFolder, \\\"temperature_conversion_history.json\\\");\\n        \\n        while (true)\\n        {\\n            Console.WriteLine(\\\"\\\\nOptions:\\\");\\n            Console.WriteLine(\\\"1. Convert Celsius to Fahrenheit\\\");\\n            Console.WriteLine(\\\"2. Convert Fahrenheit to Celsius\\\");\\n            Console.WriteLine(\\\"3. Convert Celsius to Kelvin\\\");\\n            Console.WriteLine(\\\"4. Convert Kelvin to Celsius\\\");\\n            Console.WriteLine(\\\"5. Convert Fahrenheit to Kelvin\\\");\\n            Console.WriteLine(\\\"6. Convert Kelvin to Fahrenheit\\\");\\n            Console.WriteLine(\\\"7. View conversion history\\\");\\n            Console.WriteLine(\\\"8. Exit\\\");\\n            \\n            Console.Write(\\\"Enter your choice: \\\");\\n            string input = Console.ReadLine();\\n            \\n            if (!int.TryParse(input, out int choice) || choice < 1 || choice > 8)\\n            {\\n                Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n                continue;\\n            }\\n            \\n            if (choice == 8)\\n            {\\n                Console.WriteLine(\\\"Exiting Temperature Converter.\\\");\\n                return true;\\n            }\\n            \\n            if (choice == 7)\\n            {\\n                DisplayConversionHistory();\\n                continue;\\n            }\\n            \\n            Console.Write(\\\"Enter temperature value: \\\");\\n            input = Console.ReadLine();\\n            \\n            if (!double.TryParse(input, out double temperature))\\n            {\\n                Console.WriteLine(\\\"Invalid temperature value. Please try again.\\\");\\n                continue;\\n            }\\n            \\n            double result = 0;\\n            string conversionType = \\\"\\\";\\n            \\n            switch (choice)\\n            {\\n                case 1:\\n                    result = CelsiusToFahrenheit(temperature);\\n                    conversionType = \\\"Celsius to Fahrenheit\\\";\\n                    Console.WriteLine($\\\"{temperature}°C is {result}°F\\\");\\n                    break;\\n                case 2:\\n                    result = FahrenheitToCelsius(temperature);\\n                    conversionType = \\\"Fahrenheit to Celsius\\\";\\n                    Console.WriteLine($\\\"{temperature}°F is {result}°C\\\");\\n                    break;\\n                case 3:\\n                    result = CelsiusToKelvin(temperature);\\n                    conversionType = \\\"Celsius to Kelvin\\\";\\n                    Console.WriteLine($\\\"{temperature}°C is {result}K\\\");\\n                    break;\\n                case 4:\\n                    result = KelvinToCelsius(temperature);\\n                    conversionType = \\\"Kelvin to Celsius\\\";\\n                    Console.WriteLine($\\\"{temperature}K is {result}°C\\\");\\n                    break;\\n                case 5:\\n                    result = FahrenheitToKelvin(temperature);\\n                    conversionType = \\\"Fahrenheit to Kelvin\\\";\\n                    Console.WriteLine($\\\"{temperature}°F is {result}K\\\");\\n                    break;\\n                case 6:\\n                    result = KelvinToFahrenheit(temperature);\\n                    conversionType = \\\"Kelvin to Fahrenheit\\\";\\n                    Console.WriteLine($\\\"{temperature}K is {result}°F\\\");\\n                    break;\\n            }\\n            \\n            SaveConversionHistory(conversionType, temperature, result);\\n        }\\n    }\\n    \\n    private double CelsiusToFahrenheit(double celsius)\\n    {\\n        return (celsius * 9 / 5) + 32;\\n    }\\n    \\n    private double FahrenheitToCelsius(double fahrenheit)\\n    {\\n        return (fahrenheit - 32) * 5 / 9;\\n    }\\n    \\n    private double CelsiusToKelvin(double celsius)\\n    {\\n        return celsius + 273.15;\\n    }\\n    \\n    private double KelvinToCelsius(double kelvin)\\n    {\\n        return kelvin - 273.15;\\n    }\\n    \\n    private double FahrenheitToKelvin(double fahrenheit)\\n    {\\n        return CelsiusToKelvin(FahrenheitToCelsius(fahrenheit));\\n    }\\n    \\n    private double KelvinToFahrenheit(double kelvin)\\n    {\\n        return CelsiusToFahrenheit(KelvinToCelsius(kelvin));\\n    }\\n    \\n    private void SaveConversionHistory(string conversionType, double inputValue, double resultValue)\\n    {\\n        try\\n        {\\n            ConversionRecord record = new ConversionRecord\\n            {\\n                ConversionType = conversionType,\\n                InputValue = inputValue,\\n                ResultValue = resultValue,\\n                Timestamp = DateTime.Now\\n            };\\n            \\n            var options = new JsonSerializerOptions { WriteIndented = true };\\n            string jsonString = JsonSerializer.Serialize(record, options);\\n            \\n            File.AppendAllText(dataFilePath, jsonString + Environment.NewLine);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine($\\\"Error saving conversion history: {ex.Message}\\\");\\n        }\\n    }\\n    \\n    private void DisplayConversionHistory()\\n    {\\n        try\\n        {\\n            if (!File.Exists(dataFilePath))\\n            {\\n                Console.WriteLine(\\\"No conversion history available.\\\");\\n                return;\\n            }\\n            \\n            Console.WriteLine(\\\"\\\\nConversion History:\\\");\\n            string[] lines = File.ReadAllLines(dataFilePath);\\n            \\n            foreach (string line in lines)\\n            {\\n                if (!string.IsNullOrWhiteSpace(line))\\n                {\\n                    try\\n                    {\\n                        var record = JsonSerializer.Deserialize<ConversionRecord>(line);\\n                        Console.WriteLine($\\\"{record.Timestamp}: {record.ConversionType} - {record.InputValue} => {record.ResultValue}\\\");\\n                    }\\n                    catch\\n                    {\\n                        Console.WriteLine(\\\"Invalid record format.\\\");\\n                    }\\n                }\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine($\\\"Error reading conversion history: {ex.Message}\\\");\\n        }\\n    }\\n    \\n    private class ConversionRecord\\n    {\\n        public string ConversionType { get; set; }\\n        public double InputValue { get; set; }\\n        public double ResultValue { get; set; }\\n        public DateTime Timestamp { get; set; }\\n    }\\n}\",\n  \"name\": \"Temperature Converter\",\n  \"description\": \"A module that converts temperatures between Celsius, Fahrenheit, and Kelvin scales with history tracking.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1576,"total_tokens":2097,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":73},"system_fingerprint":"fp_3d5141a69a_prod0225"}