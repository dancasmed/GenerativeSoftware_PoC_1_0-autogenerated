
{"id":"2e42b80c-9eb2-4aed-bd49-fb7754bb9752","object":"chat.completion","created":1743786724,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class TextAdventureModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Text Adventure Game\\\";\\n\\n    private class GameState\\n    {\\n        public string CurrentSceneId { get; set; }\\n        public Dictionary<string, int> Inventory { get; set; } = new Dictionary<string, int>();\\n    }\\n\\n    private class GameScene\\n    {\\n        public string Id { get; set; }\\n        public string Description { get; set; }\\n        public List<GameChoice> Choices { get; set; } = new List<GameChoice>();\\n    }\\n\\n    private class GameChoice\\n    {\\n        public string Text { get; set; }\\n        public string NextSceneId { get; set; }\\n        public string ItemReward { get; set; }\\n        public string ItemRequired { get; set; }\\n    }\\n\\n    private Dictionary<string, GameScene> scenes;\\n    private GameState currentState;\\n    private string dataFolder;\\n\\n    public TextAdventureModule()\\n    {\\n        scenes = new Dictionary<string, GameScene>\\n        {\\n            {\\n                \\\"start\\\", new GameScene\\n                {\\n                    Id = \\\"start\\\",\\n                    Description = \\\"You wake up in a dark forest. The path splits in two directions.\\\",\\n                    Choices = new List<GameChoice>\\n                    {\\n                        new GameChoice { Text = \\\"Take the left path\\\", NextSceneId = \\\"cave\\\" },\\n                        new GameChoice { Text = \\\"Take the right path\\\", NextSceneId = \\\"river\\\" },\\n                        new GameChoice { Text = \\\"Search your pockets\\\", NextSceneId = \\\"pockets\\\" }\\n                    }\\n                }\\n            },\\n            {\\n                \\\"cave\\\", new GameScene\\n                {\\n                    Id = \\\"cave\\\",\\n                    Description = \\\"You enter a damp cave. There's a shiny object in the corner.\\\",\\n                    Choices = new List<GameChoice>\\n                    {\\n                        new GameChoice { Text = \\\"Pick up the object\\\", NextSceneId = \\\"object_found\\\", ItemReward = \\\"key\\\" },\\n                        new GameChoice { Text = \\\"Leave the cave\\\", NextSceneId = \\\"start\\\" }\\n                    }\\n                }\\n            },\\n            {\\n                \\\"river\\\", new GameScene\\n                {\\n                    Id = \\\"river\\\",\\n                    Description = \\\"You come to a fast-flowing river. There's a rickety bridge.\\\",\\n                    Choices = new List<GameChoice>\\n                    {\\n                        new GameChoice { Text = \\\"Cross the bridge\\\", NextSceneId = \\\"bridge_crossed\\\" },\\n                        new GameChoice { Text = \\\"Turn back\\\", NextSceneId = \\\"start\\\" }\\n                    }\\n                }\\n            },\\n            {\\n                \\\"pockets\\\", new GameScene\\n                {\\n                    Id = \\\"pockets\\\",\\n                    Description = \\\"You find a small knife in your pocket.\\\",\\n                    Choices = new List<GameChoice>\\n                    {\\n                        new GameChoice { Text = \\\"Continue on your way\\\", NextSceneId = \\\"start\\\", ItemReward = \\\"knife\\\" }\\n                    }\\n                }\\n            },\\n            {\\n                \\\"object_found\\\", new GameScene\\n                {\\n                    Id = \\\"object_found\\\",\\n                    Description = \\\"You found a rusty key! Maybe it opens something.\\\",\\n                    Choices = new List<GameChoice>\\n                    {\\n                        new GameChoice { Text = \\\"Return to the forest\\\", NextSceneId = \\\"start\\\" }\\n                    }\\n                }\\n            },\\n            {\\n                \\\"bridge_crossed\\\", new GameScene\\n                {\\n                    Id = \\\"bridge_crossed\\\",\\n                    Description = \\\"You made it across safely! There's a locked chest here.\\\",\\n                    Choices = new List<GameChoice>\\n                    {\\n                        new GameChoice { Text = \\\"Try to open the chest\\\", NextSceneId = \\\"chest_opened\\\", ItemRequired = \\\"key\\\" },\\n                        new GameChoice { Text = \\\"Go back\\\", NextSceneId = \\\"river\\\" }\\n                    }\\n                }\\n            },\\n            {\\n                \\\"chest_opened\\\", new GameScene\\n                {\\n                    Id = \\\"chest_opened\\\",\\n                    Description = \\\"The chest contains a treasure map! You win!\\\",\\n                    Choices = new List<GameChoice>()\\n                }\\n            }\\n        };\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        this.dataFolder = dataFolder;\\n        Console.WriteLine(\\\"Starting Text Adventure Game Module\\\");\\n        Console.WriteLine(\\\"--------------------------------\\\");\\n\\n        LoadGameState();\\n        if (currentState == null)\\n        {\\n            currentState = new GameState { CurrentSceneId = \\\"start\\\" };\\n        }\\n\\n        while (true)\\n        {\\n            var currentScene = scenes[currentState.CurrentSceneId];\\n            DisplayScene(currentScene);\\n\\n            if (currentScene.Choices.Count == 0)\\n            {\\n                Console.WriteLine(\\\"\\\\nGame Over!\\\");\\n                SaveGameState();\\n                return true;\\n            }\\n\\n            var choice = GetPlayerChoice(currentScene.Choices.Count);\\n            if (choice == -1)\\n            {\\n                SaveGameState();\\n                return false;\\n            }\\n\\n            ProcessChoice(currentScene.Choices[choice]);\\n        }\\n    }\\n\\n    private void DisplayScene(GameScene scene)\\n    {\\n        Console.WriteLine();\\n        Console.WriteLine(scene.Description);\\n        Console.WriteLine();\\n\\n        if (currentState.Inventory.Count > 0)\\n        {\\n            Console.WriteLine(\\\"Inventory:\\\");\\n            foreach (var item in currentState.Inventory)\\n            {\\n                Console.WriteLine(\\\" - \\\" + item.Key);\\n            }\\n            Console.WriteLine();\\n        }\\n\\n        for (int i = 0; i < scene.Choices.Count; i++)\\n        {\\n            Console.WriteLine((i + 1) + \\\". \\\" + scene.Choices[i].Text);\\n        }\\n        Console.WriteLine(\\\"0. Save and quit\\\");\\n    }\\n\\n    private int GetPlayerChoice(int maxChoices)\\n    {\\n        while (true)\\n        {\\n            Console.Write(\\\"\\\\nYour choice: \\\");\\n            var input = Console.ReadLine();\\n\\n            if (int.TryParse(input, out int choice))\\n            {\\n                if (choice >= 0 && choice <= maxChoices)\\n                {\\n                    return choice - 1;\\n                }\\n            }\\n\\n            Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n        }\\n    }\\n\\n    private void ProcessChoice(GameChoice choice)\\n    {\\n        if (!string.IsNullOrEmpty(choice.ItemRequired))\\n        {\\n            if (!currentState.Inventory.ContainsKey(choice.ItemRequired))\\n            {\\n                Console.WriteLine(\\\"\\\\nYou need a \\\" + choice.ItemRequired + \\\" to do that!\\\");\\n                return;\\n            }\\n        }\\n\\n        if (!string.IsNullOrEmpty(choice.ItemReward))\\n        {\\n            if (currentState.Inventory.ContainsKey(choice.ItemReward))\\n            {\\n                currentState.Inventory[choice.ItemReward]++;\\n            }\\n            else\\n            {\\n                currentState.Inventory[choice.ItemReward] = 1;\\n            }\\n            Console.WriteLine(\\\"\\\\nYou obtained: \\\" + choice.ItemReward);\\n        }\\n\\n        currentState.CurrentSceneId = choice.NextSceneId;\\n    }\\n\\n    private void LoadGameState()\\n    {\\n        try\\n        {\\n            string savePath = Path.Combine(dataFolder, \\\"adventure_save.json\\\");\\n            if (File.Exists(savePath))\\n            {\\n                string json = File.ReadAllText(savePath);\\n                currentState = JsonSerializer.Deserialize<GameState>(json);\\n                Console.WriteLine(\\\"Game loaded successfully.\\\");\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading game: \\\" + ex.Message);\\n        }\\n    }\\n\\n    private void SaveGameState()\\n    {\\n        try\\n        {\\n            string savePath = Path.Combine(dataFolder, \\\"adventure_save.json\\\");\\n            string json = JsonSerializer.Serialize(currentState);\\n            File.WriteAllText(savePath, json);\\n            Console.WriteLine(\\\"Game saved successfully.\\\");\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving game: \\\" + ex.Message);\\n        }\\n    }\\n}\",\n  \"name\": \"Text Adventure Game\",\n  \"description\": \"A text-based adventure game with multiple choices, inventory system, and save/load functionality\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":2056,"total_tokens":2578,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}