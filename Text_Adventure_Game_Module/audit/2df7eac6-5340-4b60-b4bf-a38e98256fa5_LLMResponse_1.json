
{"id":"95200427-e9d0-489e-bdd9-09fb4fae7cf6","object":"chat.completion","created":1743792827,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class TextAdventureModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Text Adventure Game Module\\\";\\n    \\n    private string _saveFilePath;\\n    private GameState _currentState;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _saveFilePath = Path.Combine(dataFolder, \\\"adventure_save.json\\\");\\n        \\n        Console.WriteLine(\\\"Welcome to the Text Adventure Game!\\\");\\n        Console.WriteLine(\\\"Your choices will shape your destiny...\\\");\\n        \\n        if (File.Exists(_saveFilePath))\\n        {\\n            Console.WriteLine(\\\"Loading saved game...\\\");\\n            try\\n            {\\n                string json = File.ReadAllText(_saveFilePath);\\n                _currentState = JsonSerializer.Deserialize<GameState>(json);\\n                Console.WriteLine(\\\"Game loaded successfully!\\\");\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Failed to load save file. Starting new game.\\\");\\n                Console.WriteLine(\\\"Error: \\\" + ex.Message);\\n                _currentState = new GameState();\\n            }\\n        }\\n        else\\n        {\\n            _currentState = new GameState();\\n            Console.WriteLine(\\\"Starting a new adventure!\\\");\\n        }\\n        \\n        PlayGame();\\n        \\n        return true;\\n    }\\n    \\n    private void PlayGame()\\n    {\\n        bool gameRunning = true;\\n        \\n        while (gameRunning)\\n        {\\n            DisplayCurrentScene();\\n            \\n            Console.WriteLine(\\\"\\\\nWhat will you do?\\\");\\n            for (int i = 0; i < _currentState.CurrentScene.Choices.Length; i++)\\n            {\\n                Console.WriteLine((i + 1) + \\\". \\\" + _currentState.CurrentScene.Choices[i].Description);\\n            }\\n            \\n            int choice = GetPlayerChoice(_currentState.CurrentScene.Choices.Length);\\n            \\n            if (choice == -1)\\n            {\\n                SaveGame();\\n                Console.WriteLine(\\\"Game saved. Goodbye!\\\");\\n                gameRunning = false;\\n                continue;\\n            }\\n            \\n            var selectedChoice = _currentState.CurrentScene.Choices[choice - 1];\\n            _currentState.CurrentScene = selectedChoice.NextScene;\\n            _currentState.PlayerHealth += selectedChoice.HealthChange;\\n            _currentState.PlayerScore += selectedChoice.ScoreChange;\\n            \\n            if (_currentState.PlayerHealth <= 0)\\n            {\\n                Console.WriteLine(\\\"\\\\nYou have perished in your adventure! Game over.\\\");\\n                Console.WriteLine(\\\"Final Score: \\\" + _currentState.PlayerScore);\\n                gameRunning = false;\\n            }\\n            else if (_currentState.CurrentScene.IsEndScene)\\n            {\\n                Console.WriteLine(\\\"\\\\n\\\" + _currentState.CurrentScene.Description);\\n                Console.WriteLine(\\\"You've reached the end of your adventure!\\\");\\n                Console.WriteLine(\\\"Final Score: \\\" + _currentState.PlayerScore);\\n                gameRunning = false;\\n            }\\n        }\\n    }\\n    \\n    private void DisplayCurrentScene()\\n    {\\n        Console.WriteLine(\\\"\\\\n---\\\");\\n        Console.WriteLine(\\\"Health: \\\" + _currentState.PlayerHealth);\\n        Console.WriteLine(\\\"Score: \\\" + _currentState.PlayerScore);\\n        Console.WriteLine(\\\"\\\\n\\\" + _currentState.CurrentScene.Description);\\n    }\\n    \\n    private int GetPlayerChoice(int maxChoices)\\n    {\\n        while (true)\\n        {\\n            Console.Write(\\\"Enter your choice (1-\\\" + maxChoices + \\\") or 'S' to save and quit: \\\");\\n            string input = Console.ReadLine().Trim().ToUpper();\\n            \\n            if (input == \\\"S\\\")\\n            {\\n                return -1;\\n            }\\n            \\n            if (int.TryParse(input, out int result) && result >= 1 && result <= maxChoices)\\n            {\\n                return result;\\n            }\\n            \\n            Console.WriteLine(\\\"Invalid input. Please try again.\\\");\\n        }\\n    }\\n    \\n    private void SaveGame()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_currentState);\\n            File.WriteAllText(_saveFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Failed to save game: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class GameState\\n{\\n    public int PlayerHealth { get; set; } = 100;\\n    public int PlayerScore { get; set; } = 0;\\n    public Scene CurrentScene { get; set; }\\n    \\n    public GameState()\\n    {\\n        InitializeScenes();\\n        CurrentScene = GetStartingScene();\\n    }\\n    \\n    private void InitializeScenes()\\n    {\\n        // Create all scenes\\n        var scene1 = new Scene\\n        {\\n            Description = \\\"You stand at the entrance of a dark cave. The air is damp and cool. \\\" +\\n                          \\\"Torches flicker weakly on the walls, casting long shadows.\\\",\\n            IsEndScene = false\\n        };\\n        \\n        var scene2 = new Scene\\n        {\\n            Description = \\\"You enter the cave cautiously. The floor is uneven and slippery. \\\" +\\n                          \\\"You hear distant dripping water and what might be... scratching sounds?\\\",\\n            IsEndScene = false\\n        };\\n        \\n        var scene3 = new Scene\\n        {\\n            Description = \\\"You turn back from the cave entrance. As you walk away, you notice \\\" +\\n                          \\\"a glint of metal in the bushes nearby.\\\",\\n            IsEndScene = false\\n        };\\n        \\n        var scene4 = new Scene\\n        {\\n            Description = \\\"You investigate the scratching sounds deeper in the cave. Suddenly, \\\" +\\n                          \\\"a swarm of bats flies past you! You barely avoid injury.\\\",\\n            IsEndScene = false\\n        };\\n        \\n        var scene5 = new Scene\\n        {\\n            Description = \\\"You examine the glint in the bushes and find an ancient sword! \\\" +\\n                          \\\"This could be valuable or useful in future adventures.\\\",\\n            IsEndScene = false\\n        };\\n        \\n        var scene6 = new Scene\\n        {\\n            Description = \\\"You press on through the cave and find a hidden treasure chamber! \\\" +\\n                          \\\"Gold coins and jewels glitter in the dim light.\\\",\\n            IsEndScene = true\\n        };\\n        \\n        var scene7 = new Scene\\n        {\\n            Description = \\\"As you move deeper into the cave, the floor gives way! You fall into \\\" +\\n                          \\\"a pit and cannot climb out. Your adventure ends here.\\\",\\n            IsEndScene = true\\n        };\\n        \\n        // Set up choices\\n        scene1.Choices = new[]\\n        {\\n            new Choice { Description = \\\"Enter the cave\\\", NextScene = scene2, HealthChange = 0, ScoreChange = 10 },\\n            new Choice { Description = \\\"Turn back and explore the area\\\", NextScene = scene3, HealthChange = 0, ScoreChange = 5 }\\n        };\\n        \\n        scene2.Choices = new[]\\n        {\\n            new Choice { Description = \\\"Investigate the scratching sounds\\\", NextScene = scene4, HealthChange = -10, ScoreChange = 15 },\\n            new Choice { Description = \\\"Proceed carefully deeper into the cave\\\", NextScene = scene6, HealthChange = 0, ScoreChange = 20 },\\n            new Choice { Description = \\\"Turn back to the entrance\\\", NextScene = scene1, HealthChange = 0, ScoreChange = 0 }\\n        };\\n        \\n        scene3.Choices = new[]\\n        {\\n            new Choice { Description = \\\"Investigate the glint in the bushes\\\", NextScene = scene5, HealthChange = 0, ScoreChange = 25 },\\n            new Choice { Description = \\\"Return to the cave entrance\\\", NextScene = scene1, HealthChange = 0, ScoreChange = 0 }\\n        };\\n        \\n        scene4.Choices = new[]\\n        {\\n            new Choice { Description = \\\"Continue deeper into the cave\\\", NextScene = scene6, HealthChange = 0, ScoreChange = 30 },\\n            new Choice { Description = \\\"Retreat to the cave entrance\\\", NextScene = scene1, HealthChange = 0, ScoreChange = -5 }\\n        };\\n        \\n        scene5.Choices = new[]\\n        {\\n            new Choice { Description = \\\"Take the sword and enter the cave\\\", NextScene = scene2, HealthChange = 0, ScoreChange = 10 },\\n            new Choice { Description = \\\"Leave the sword and return home\\\", NextScene = null, HealthChange = 0, ScoreChange = 15, IsEnding = true }\\n        };\\n    }\\n    \\n    private Scene GetStartingScene()\\n    {\\n        return new Scene\\n        {\\n            Description = \\\"You stand at the entrance of a dark cave. The air is damp and cool. \\\" +\\n                          \\\"Torches flicker weakly on the walls, casting long shadows.\\\",\\n            IsEndScene = false,\\n            Choices = new[]\\n            {\\n                new Choice { Description = \\\"Enter the cave\\\", HealthChange = 0, ScoreChange = 10 },\\n                new Choice { Description = \\\"Turn back and explore the area\\\", HealthChange = 0, ScoreChange = 5 }\\n            }\\n        };\\n    }\\n}\\n\\npublic class Scene\\n{\\n    public string Description { get; set; }\\n    public Choice[] Choices { get; set; }\\n    public bool IsEndScene { get; set; }\\n}\\n\\npublic class Choice\\n{\\n    public string Description { get; set; }\\n    public Scene NextScene { get; set; }\\n    public int HealthChange { get; set; }\\n    public int ScoreChange { get; set; }\\n    public bool IsEnding { get; set; } = false;\\n}\",\n  \"name\": \"Text Adventure Game Module\",\n  \"description\": \"A text-based adventure game with multiple choices, health system, scoring, and save/load functionality\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":2437,"total_tokens":2959,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}