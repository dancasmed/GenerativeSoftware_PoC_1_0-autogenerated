
{"id":"7a6e1ae6-adbd-4ff8-b048-dcc9066d0ffd","object":"chat.completion","created":1744177676,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class ToDoListManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"To-Do List Manager\\\";\\n    \\n    private List<TodoItem> _todoItems;\\n    private string _dataFilePath;\\n    \\n    public ToDoListManager()\\n    {\\n        _todoItems = new List<TodoItem>();\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _dataFilePath = Path.Combine(dataFolder, \\\"todolist.json\\\");\\n        \\n        Console.WriteLine(\\\"To-Do List Manager is running...\\\");\\n        \\n        LoadTodoItems();\\n        \\n        bool exit = false;\\n        while (!exit)\\n        {\\n            DisplayMenu();\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddTodoItem();\\n                    break;\\n                case \\\"2\\\":\\n                    ViewTodoItems();\\n                    break;\\n                case \\\"3\\\":\\n                    MarkItemComplete();\\n                    break;\\n                case \\\"4\\\":\\n                    DeleteTodoItem();\\n                    break;\\n                case \\\"5\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n            \\n            SaveTodoItems();\\n        }\\n        \\n        Console.WriteLine(\\\"Exiting To-Do List Manager...\\\");\\n        return true;\\n    }\\n    \\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nTo-Do List Manager\\\");\\n        Console.WriteLine(\\\"1. Add new item\\\");\\n        Console.WriteLine(\\\"2. View all items\\\");\\n        Console.WriteLine(\\\"3. Mark item as complete\\\");\\n        Console.WriteLine(\\\"4. Delete item\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n    \\n    private void AddTodoItem()\\n    {\\n        Console.Write(\\\"Enter task description: \\\");\\n        string description = Console.ReadLine();\\n        \\n        Console.Write(\\\"Enter due date (yyyy-MM-dd): \\\");\\n        if (!DateTime.TryParse(Console.ReadLine(), out DateTime dueDate))\\n        {\\n            Console.WriteLine(\\\"Invalid date format. Using today's date.\\\");\\n            dueDate = DateTime.Today;\\n        }\\n        \\n        Console.Write(\\\"Enter priority (1-High, 2-Medium, 3-Low): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int priority) || priority < 1 || priority > 3)\\n        {\\n            Console.WriteLine(\\\"Invalid priority. Setting to Medium (2).\\\");\\n            priority = 2;\\n        }\\n        \\n        _todoItems.Add(new TodoItem\\n        {\\n            Id = Guid.NewGuid(),\\n            Description = description,\\n            DueDate = dueDate,\\n            Priority = priority,\\n            IsComplete = false,\\n            CreatedDate = DateTime.Now\\n        });\\n        \\n        Console.WriteLine(\\\"Task added successfully.\\\");\\n    }\\n    \\n    private void ViewTodoItems()\\n    {\\n        if (_todoItems.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No tasks found.\\\");\\n            return;\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nID\\\\tDescription\\\\tDue Date\\\\t\\\\tPriority\\\\tStatus\\\");\\n        Console.WriteLine(new string('-', 80));\\n        \\n        foreach (var item in _todoItems)\\n        {\\n            string status = item.IsComplete ? \\\"Complete\\\" : \\\"Pending\\\";\\n            string priority = item.Priority switch\\n            {\\n                1 => \\\"High\\\",\\n                2 => \\\"Medium\\\",\\n                3 => \\\"Low\\\",\\n                _ => \\\"Unknown\\\"\\n            };\\n            \\n            Console.WriteLine($\\\"{item.Id.ToString().Substring(0, 8)}...\\\\t{item.Description}\\\\t{item.DueDate:yyyy-MM-dd}\\\\t{priority}\\\\t\\\\t{status}\\\");\\n        }\\n    }\\n    \\n    private void MarkItemComplete()\\n    {\\n        ViewTodoItems();\\n        \\n        if (_todoItems.Count == 0) return;\\n        \\n        Console.Write(\\\"Enter the ID of the task to mark as complete: \\\");\\n        string idInput = Console.ReadLine();\\n        \\n        if (Guid.TryParse(idInput, out Guid id))\\n        {\\n            var item = _todoItems.Find(x => x.Id == id);\\n            if (item != null)\\n            {\\n                item.IsComplete = true;\\n                Console.WriteLine(\\\"Task marked as complete.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Task not found.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid ID format.\\\");\\n        }\\n    }\\n    \\n    private void DeleteTodoItem()\\n    {\\n        ViewTodoItems();\\n        \\n        if (_todoItems.Count == 0) return;\\n        \\n        Console.Write(\\\"Enter the ID of the task to delete: \\\");\\n        string idInput = Console.ReadLine();\\n        \\n        if (Guid.TryParse(idInput, out Guid id))\\n        {\\n            int removed = _todoItems.RemoveAll(x => x.Id == id);\\n            if (removed > 0)\\n            {\\n                Console.WriteLine(\\\"Task deleted successfully.\\\");\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Task not found.\\\");\\n            }\\n        }\\n        else\\n        {\\n            Console.WriteLine(\\\"Invalid ID format.\\\");\\n        }\\n    }\\n    \\n    private void LoadTodoItems()\\n    {\\n        try\\n        {\\n            if (File.Exists(_dataFilePath))\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                _todoItems = JsonSerializer.Deserialize<List<TodoItem>>(json) ?? new List<TodoItem>();\\n            }\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error loading todo items: \\\" + ex.Message);\\n        }\\n    }\\n    \\n    private void SaveTodoItems()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_todoItems);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving todo items: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class TodoItem\\n{\\n    public Guid Id { get; set; }\\n    public string Description { get; set; }\\n    public DateTime DueDate { get; set; }\\n    public int Priority { get; set; }\\n    public bool IsComplete { get; set; }\\n    public DateTime CreatedDate { get; set; }\\n}\",\n  \"name\": \"To-Do List Manager\",\n  \"description\": \"A console application for managing a to-do list with due dates and priorities. Allows adding, viewing, marking as complete, and deleting tasks.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":526,"completion_tokens":1720,"total_tokens":2246,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":78},"system_fingerprint":"fp_3d5141a69a_prod0225"}