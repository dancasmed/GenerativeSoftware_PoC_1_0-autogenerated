
{"id":"5cf93316-1de1-4834-af40-899f027b02f5","object":"chat.completion","created":1743799146,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text;\\nusing System.Text.Json;\\nusing System.Threading;\\nusing System.Threading.Tasks;\\n\\npublic class TouchTypingPracticeModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Touch Typing Practice Module\\\";\\n    \\n    private List<string> _typingPrompts = new List<string>\\n    {\\n        \\\"The quick brown fox jumps over the lazy dog.\\\",\\n        \\\"Pack my box with five dozen liquor jugs.\\\",\\n        \\\"How vexingly quick daft zebras jump!\\\",\\n        \\\"Bright vixens jump; dozy fowl quack.\\\",\\n        \\\"Sphinx of black quartz, judge my vow.\\\"\\n    };\\n    \\n    private string _resultsFilePath;\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        _resultsFilePath = Path.Combine(dataFolder, \\\"typing_results.json\\\");\\n        \\n        Console.WriteLine(\\\"Welcome to the Touch Typing Practice Module!\\\");\\n        Console.WriteLine(\\\"This will help you improve your typing speed and accuracy.\\\");\\n        Console.WriteLine(\\\"You will be given a sentence to type as quickly and accurately as possible.\\\");\\n        \\n        while (true)\\n        {\\n            Console.WriteLine();\\n            Console.WriteLine(\\\"Choose an option:\\\");\\n            Console.WriteLine(\\\"1. Start typing test\\\");\\n            Console.WriteLine(\\\"2. View previous results\\\");\\n            Console.WriteLine(\\\"3. Exit\\\");\\n            \\n            string choice = Console.ReadLine();\\n            \\n            if (choice == \\\"1\\\")\\n            {\\n                RunTypingTest();\\n            }\\n            else if (choice == \\\"2\\\")\\n            {\\n                ShowPreviousResults();\\n            }\\n            else if (choice == \\\"3\\\")\\n            {\\n                break;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid choice. Please try again.\\\");\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private void RunTypingTest()\\n    {\\n        var random = new Random();\\n        string prompt = _typingPrompts[random.Next(_typingPrompts.Count)];\\n        \\n        Console.WriteLine();\\n        Console.WriteLine(\\\"Type the following sentence:\\\");\\n        Console.WriteLine(prompt);\\n        Console.WriteLine(\\\"Press Enter when you're ready to start typing...\\\");\\n        Console.ReadLine();\\n        \\n        Console.Clear();\\n        Console.WriteLine(\\\"Start typing now:\\\");\\n        Console.WriteLine(prompt);\\n        \\n        DateTime startTime = DateTime.Now;\\n        string userInput = Console.ReadLine();\\n        DateTime endTime = DateTime.Now;\\n        \\n        TimeSpan duration = endTime - startTime;\\n        double wordsPerMinute = CalculateWordsPerMinute(prompt, duration.TotalMinutes);\\n        int accuracy = CalculateAccuracy(prompt, userInput);\\n        \\n        Console.WriteLine();\\n        Console.WriteLine(\\\"Test complete!\\\");\\n        Console.WriteLine(\\\"Time taken: \\\" + duration.TotalSeconds.ToString(\\\"0.00\\\") + \\\" seconds\\\");\\n        Console.WriteLine(\\\"Typing speed: \\\" + wordsPerMinute.ToString(\\\"0.00\\\") + \\\" WPM\\\");\\n        Console.WriteLine(\\\"Accuracy: \\\" + accuracy + \\\"%\\\");\\n        \\n        SaveResult(new TypingTestResult\\n        {\\n            Date = DateTime.Now,\\n            Prompt = prompt,\\n            WPM = wordsPerMinute,\\n            Accuracy = accuracy,\\n            DurationSeconds = duration.TotalSeconds\\n        });\\n    }\\n    \\n    private double CalculateWordsPerMinute(string prompt, double minutes)\\n    {\\n        int wordCount = prompt.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries).Length;\\n        return wordCount / minutes;\\n    }\\n    \\n    private int CalculateAccuracy(string prompt, string userInput)\\n    {\\n        int correctChars = 0;\\n        int minLength = Math.Min(prompt.Length, userInput.Length);\\n        \\n        for (int i = 0; i < minLength; i++)\\n        {\\n            if (prompt[i] == userInput[i])\\n            {\\n                correctChars++;\\n            }\\n        }\\n        \\n        double accuracy = (double)correctChars / prompt.Length * 100;\\n        return (int)Math.Round(accuracy);\\n    }\\n    \\n    private void SaveResult(TypingTestResult result)\\n    {\\n        List<TypingTestResult> results = new List<TypingTestResult>();\\n        \\n        if (File.Exists(_resultsFilePath))\\n        {\\n            string json = File.ReadAllText(_resultsFilePath);\\n            results = JsonSerializer.Deserialize<List<TypingTestResult>>(json);\\n        }\\n        \\n        results.Add(result);\\n        \\n        string newJson = JsonSerializer.Serialize(results, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(_resultsFilePath, newJson);\\n    }\\n    \\n    private void ShowPreviousResults()\\n    {\\n        if (!File.Exists(_resultsFilePath))\\n        {\\n            Console.WriteLine(\\\"No previous results found.\\\");\\n            return;\\n        }\\n        \\n        string json = File.ReadAllText(_resultsFilePath);\\n        var results = JsonSerializer.Deserialize<List<TypingTestResult>>(json);\\n        \\n        Console.WriteLine();\\n        Console.WriteLine(\\\"Previous Results:\\\");\\n        Console.WriteLine(\\\"----------------\\\");\\n        \\n        foreach (var result in results.OrderByDescending(r => r.Date))\\n        {\\n            Console.WriteLine($\\\"{result.Date:yyyy-MM-dd HH:mm} - {result.WPM:0.00} WPM - {result.Accuracy}% accuracy\\\");\\n        }\\n    }\\n}\\n\\npublic class TypingTestResult\\n{\\n    public DateTime Date { get; set; }\\n    public string Prompt { get; set; }\\n    public double WPM { get; set; }\\n    public int Accuracy { get; set; }\\n    public double DurationSeconds { get; set; }\\n}\",\n  \"name\": \"Touch Typing Practice Module\",\n  \"description\": \"A module to help users practice and improve their touch typing skills with speed tests and accuracy tracking.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":1507,"total_tokens":2029,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}