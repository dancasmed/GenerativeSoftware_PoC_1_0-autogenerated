
{"id":"4d8755e4-eedf-4bd7-83f9-56cf12ae4490","object":"chat.completion","created":1743793200,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class VideoGameManager : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Video Game Manager\\\";\\n\\n    private List<VideoGame> _videoGames;\\n    private string _dataFilePath;\\n\\n    public VideoGameManager()\\n    {\\n        _videoGames = new List<VideoGame>();\\n    }\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Video Game Manager module is running.\\\");\\n        _dataFilePath = Path.Combine(dataFolder, \\\"videogames.json\\\");\\n\\n        LoadVideoGames();\\n\\n        bool exit = false;\\n        while (!exit)\\n        {\\n            DisplayMenu();\\n            string input = Console.ReadLine();\\n\\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddVideoGame();\\n                    break;\\n                case \\\"2\\\":\\n                    ListVideoGames();\\n                    break;\\n                case \\\"3\\\":\\n                    UpdateVideoGame();\\n                    break;\\n                case \\\"4\\\":\\n                    DeleteVideoGame();\\n                    break;\\n                case \\\"5\\\":\\n                    exit = true;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n\\n        SaveVideoGames();\\n        Console.WriteLine(\\\"Video Game Manager module finished.\\\");\\n        return true;\\n    }\\n\\n    private void DisplayMenu()\\n    {\\n        Console.WriteLine(\\\"\\\\nVideo Game Manager\\\");\\n        Console.WriteLine(\\\"1. Add a video game\\\");\\n        Console.WriteLine(\\\"2. List all video games\\\");\\n        Console.WriteLine(\\\"3. Update a video game\\\");\\n        Console.WriteLine(\\\"4. Delete a video game\\\");\\n        Console.WriteLine(\\\"5. Exit\\\");\\n        Console.Write(\\\"Select an option: \\\");\\n    }\\n\\n    private void AddVideoGame()\\n    {\\n        Console.Write(\\\"Enter game title: \\\");\\n        string title = Console.ReadLine();\\n\\n        Console.Write(\\\"Enter game rating (1-5): \\\");\\n        if (!int.TryParse(Console.ReadLine(), out int rating) || rating < 1 || rating > 5)\\n        {\\n            Console.WriteLine(\\\"Invalid rating. Must be between 1 and 5.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Is the game completed? (Y/N): \\\");\\n        bool isCompleted = Console.ReadLine().ToUpper() == \\\"Y\\\";\\n\\n        _videoGames.Add(new VideoGame\\n        {\\n            Id = Guid.NewGuid(),\\n            Title = title,\\n            Rating = rating,\\n            IsCompleted = isCompleted\\n        });\\n\\n        Console.WriteLine(\\\"Game added successfully.\\\");\\n    }\\n\\n    private void ListVideoGames()\\n    {\\n        if (_videoGames.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No video games found.\\\");\\n            return;\\n        }\\n\\n        Console.WriteLine(\\\"\\\\nVideo Games List:\\\");\\n        foreach (var game in _videoGames)\\n        {\\n            Console.WriteLine(\\\"ID: \\\" + game.Id);\\n            Console.WriteLine(\\\"Title: \\\" + game.Title);\\n            Console.WriteLine(\\\"Rating: \\\" + game.Rating);\\n            Console.WriteLine(\\\"Completed: \\\" + (game.IsCompleted ? \\\"Yes\\\" : \\\"No\\\"));\\n            Console.WriteLine();\\n        }\\n    }\\n\\n    private void UpdateVideoGame()\\n    {\\n        Console.Write(\\\"Enter game ID to update: \\\");\\n        if (!Guid.TryParse(Console.ReadLine(), out Guid id))\\n        {\\n            Console.WriteLine(\\\"Invalid ID format.\\\");\\n            return;\\n        }\\n\\n        var game = _videoGames.Find(g => g.Id == id);\\n        if (game == null)\\n        {\\n            Console.WriteLine(\\\"Game not found.\\\");\\n            return;\\n        }\\n\\n        Console.Write(\\\"Enter new title (leave blank to keep current): \\\");\\n        string newTitle = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(newTitle))\\n        {\\n            game.Title = newTitle;\\n        }\\n\\n        Console.Write(\\\"Enter new rating (1-5, leave blank to keep current): \\\");\\n        string ratingInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(ratingInput))\\n        {\\n            if (int.TryParse(ratingInput, out int newRating) && newRating >= 1 && newRating <= 5)\\n            {\\n                game.Rating = newRating;\\n            }\\n            else\\n            {\\n                Console.WriteLine(\\\"Invalid rating. Must be between 1 and 5.\\\");\\n            }\\n        }\\n\\n        Console.Write(\\\"Update completion status? (Y/N, leave blank to keep current): \\\");\\n        string completionInput = Console.ReadLine();\\n        if (!string.IsNullOrWhiteSpace(completionInput))\\n        {\\n            game.IsCompleted = completionInput.ToUpper() == \\\"Y\\\";\\n        }\\n\\n        Console.WriteLine(\\\"Game updated successfully.\\\");\\n    }\\n\\n    private void DeleteVideoGame()\\n    {\\n        Console.Write(\\\"Enter game ID to delete: \\\");\\n        if (!Guid.TryParse(Console.ReadLine(), out Guid id))\\n        {\\n            Console.WriteLine(\\\"Invalid ID format.\\\");\\n            return;\\n        }\\n\\n        var game = _videoGames.Find(g => g.Id == id);\\n        if (game == null)\\n        {\\n            Console.WriteLine(\\\"Game not found.\\\");\\n            return;\\n        }\\n\\n        _videoGames.Remove(game);\\n        Console.WriteLine(\\\"Game deleted successfully.\\\");\\n    }\\n\\n    private void LoadVideoGames()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            try\\n            {\\n                string json = File.ReadAllText(_dataFilePath);\\n                _videoGames = JsonSerializer.Deserialize<List<VideoGame>>(json);\\n            }\\n            catch (Exception ex)\\n            {\\n                Console.WriteLine(\\\"Error loading video games: \\\" + ex.Message);\\n            }\\n        }\\n    }\\n\\n    private void SaveVideoGames()\\n    {\\n        try\\n        {\\n            string json = JsonSerializer.Serialize(_videoGames);\\n            File.WriteAllText(_dataFilePath, json);\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error saving video games: \\\" + ex.Message);\\n        }\\n    }\\n}\\n\\npublic class VideoGame\\n{\\n    public Guid Id { get; set; }\\n    public string Title { get; set; }\\n    public int Rating { get; set; }\\n    public bool IsCompleted { get; set; }\\n}\",\n  \"name\": \"Video Game Manager\",\n  \"description\": \"A module that manages a collection of video games with ratings and completion status\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":523,"completion_tokens":1640,"total_tokens":2163,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":11},"system_fingerprint":"fp_3d5141a69a_prod0225"}