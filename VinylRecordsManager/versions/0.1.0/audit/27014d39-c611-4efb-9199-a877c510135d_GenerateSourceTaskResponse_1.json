{
  "description": "Vinyl collection manager with CRUDS operations for records and wishlist, search capabilities, and report generation. Maintains collection data in JSON format with genre categorization and condition tracking.",
  "source_code": "using System.Text.Json;\nusing System.IO;\n\npublic class VinylManagerModule : IGeneratedModule {\n    public string Name { get; set; } = \u0022Vinyl Collection Manager\u0022;\n    \n    private string _recordsPath;\n    private string _wishlistPath;\n    private string _reportsPath;\n    \n    public bool Main(string dataFolder) {\n        Console.WriteLine(\u0022Initializing Vinyl Collection Manager...\u0022);\n        \n        _recordsPath = Path.Combine(dataFolder, \u0022records.json\u0022);\n        _wishlistPath = Path.Combine(dataFolder, \u0022wishlist.json\u0022);\n        _reportsPath = Path.Combine(dataFolder, \u0022reports.json\u0022);\n        \n        InitializeFiles();\n        \n        while (ShowMainMenu()) { }\n        \n        Console.WriteLine(\u0022Exiting Vinyl Collection Manager\u0022);\n        return true;\n    }\n    \n    private void InitializeFiles() {\n        foreach (var path in new[] { _recordsPath, _wishlistPath, _reportsPath }) {\n            if (!File.Exists(path)) {\n                File.WriteAllText(path, \u0022[]\u0022);\n            }\n        }\n    }\n    \n    private bool ShowMainMenu() {\n        Console.WriteLine(\u0022\\nMain Menu:\u0022);\n        Console.WriteLine(\u00221. Manage Records\u0022);\n        Console.WriteLine(\u00222. Manage Wishlist\u0022);\n        Console.WriteLine(\u00223. Generate Reports\u0022);\n        Console.WriteLine(\u00224. Exit\u0022);\n        \n        switch (Console.ReadLine()) {\n            case \u00221\u0022:\n                ManageRecords();\n                return true;\n            case \u00222\u0022:\n                ManageWishlist();\n                return true;\n            case \u00223\u0022:\n                GenerateReportMenu();\n                return true;\n            case \u00224\u0022:\n                return false;\n            default:\n                Console.WriteLine(\u0022Invalid option\u0022);\n                return true;\n        }\n    }\n    \n    private void ManageRecords() {\n        Console.WriteLine(\u0022\\nRecord Management:\u0022);\n        Console.WriteLine(\u00221. Add Record\u0022);\n        Console.WriteLine(\u00222. Edit Record\u0022);\n        Console.WriteLine(\u00223. Delete Record\u0022);\n        Console.WriteLine(\u00224. List All Records\u0022);\n        Console.WriteLine(\u00225. Search Records\u0022);\n        Console.WriteLine(\u00226. Back\u0022);\n        \n        var records = LoadRecords();\n        \n        switch (Console.ReadLine()) {\n            case \u00221\u0022:\n                AddRecord(records);\n                break;\n            case \u00222\u0022:\n                EditRecord(records);\n                break;\n            case \u00223\u0022:\n                DeleteRecord(records);\n                break;\n            case \u00224\u0022:\n                ListRecords(records);\n                break;\n            case \u00225\u0022:\n                SearchRecords(records);\n                break;\n        }\n    }\n    \n    private List\u003CRecord\u003E LoadRecords() {\n        return JsonSerializer.Deserialize\u003CList\u003CRecord\u003E\u003E(File.ReadAllText(_recordsPath));\n    }\n    \n    private void SaveRecords(List\u003CRecord\u003E records) {\n        File.WriteAllText(_recordsPath, JsonSerializer.Serialize(records));\n    }\n    \n    private void AddRecord(List\u003CRecord\u003E records) {\n        var newRecord = new Record {\n            Id = Guid.NewGuid(),\n            Title = ReadInput(\u0022Title\u0022),\n            Artist = ReadInput(\u0022Artist\u0022),\n            Year = int.Parse(ReadInput(\u0022Year\u0022)),\n            Genre = ReadInput(\u0022Genre\u0022),\n            Condition = ReadInput(\u0022Condition (Mint/Good/Fair)\u0022),\n            Value = decimal.Parse(ReadInput(\u0022Value\u0022))\n        };\n        \n        records.Add(newRecord);\n        SaveRecords(records);\n        Console.WriteLine(\u0022Record added successfully\u0022);\n    }\n    \n    private string ReadInput(string prompt) {\n        Console.Write(prompt \u002B \u0022: \u0022);\n        return Console.ReadLine();\n    }\n    \n    private void GenerateReportMenu() {\n        Console.WriteLine(\u0022\\nReport Types:\u0022);\n        Console.WriteLine(\u00221. Collection Summary\u0022);\n        Console.WriteLine(\u00222. Genre Distribution\u0022);\n        Console.WriteLine(\u00223. Value Report\u0022);\n        \n        var records = LoadRecords();\n        var report = new Report {\n            Id = Guid.NewGuid(),\n            Date = DateTime.Now\n        };\n        \n        switch (Console.ReadLine()) {\n            case \u00221\u0022:\n                report.Type = \u0022Summary\u0022;\n                report.Content = \u0022Total Records: \u0022 \u002B records.Count;\n                break;\n            case \u00222\u0022:\n                report.Type = \u0022Genre Distribution\u0022;\n                report.Content = string.Join(\u0022\\n\u0022, \n                    records.GroupBy(r =\u003E r.Genre)\n                           .Select(g =\u003E g.Key \u002B \u0022: \u0022 \u002B g.Count()));\n                break;\n            case \u00223\u0022:\n                report.Type = \u0022Value Report\u0022;\n                report.Content = \u0022Total Collection Value: \u0022 \u002B \n                    records.Sum(r =\u003E r.Value).ToString(\u0022C\u0022);\n                break;\n        }\n        \n        SaveReport(report);\n        Console.WriteLine(\u0022Report generated: \\n\u0022 \u002B report.Content);\n    }\n    \n    private void SaveReport(Report report) {\n        var reports = JsonSerializer.Deserialize\u003CList\u003CReport\u003E\u003E(File.ReadAllText(_reportsPath));\n        reports.Add(report);\n        File.WriteAllText(_reportsPath, JsonSerializer.Serialize(reports));\n    }\n}\n\npublic class Record {\n    public Guid Id { get; set; }\n    public string Title { get; set; }\n    public string Artist { get; set; }\n    public int Year { get; set; }\n    public string Genre { get; set; }\n    public string Condition { get; set; }\n    public decimal Value { get; set; }\n}\n\npublic class Wishlist {\n    public Guid Id { get; set; }\n    public string Title { get; set; }\n    public string Artist { get; set; }\n    public int Year { get; set; }\n    public string Genre { get; set; }\n    public string Priority { get; set; }\n}\n\npublic class Report {\n    public Guid Id { get; set; }\n    public string Type { get; set; }\n    public DateTime Date { get; set; }\n    public string Content { get; set; }\n}",
  "required_apis": [],
  "required_nugets": []
}