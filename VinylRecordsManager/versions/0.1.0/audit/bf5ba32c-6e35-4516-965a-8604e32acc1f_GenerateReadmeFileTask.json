{
  "UseOnlineModel": true,
  "ModelToUse": "deepseek-reasoner",
  "Description": "",
  "SystemPrompt": "You are an skilled systems analist and software engineer. The user will provide you with a software module metadata. Your task is to generate a README file for this module.",
  "BasePrompt": "I will provide a metadata object describing a software project. This metadata may include details such as the project name, description, features, user interaction points, data\nmodels, dependencies (e.g., NuGet packages or APIs), and any other relevant information. Based on this metadata, generate a well-structured README.md document in markdown format.\nThe README should include the following sections:\n1. **Overview**: A brief description of the project\u0027s purpose and functionality.\n2. **Features**: A breakdown of implemented features and, if applicable, future/planned features.\n3. **Requirements**: List of dependencies or libraries required to run the project (e.g., NuGet packages).\n4. **Usage**: Instructions on how to use the project, including examples of user interactions.\n5. **Data Models** (if applicable): A description of any data structures or schemas used in the project.\n6. **Roadmap** (optional): Information about future improvements or planned features. Avoid mentioning dates or specific timelines.\n\nThe README should be written in clear, concise language and formatted with appropriate markdown headers and bullet points. If the metadata includes specific fields like\n\u0027CreationRequirements\u0027 or \u0027FunctionalDetails,\u0027 ensure these are reflected in the generated document.\n\n### Example output:\n{ \u0022readme\u0022 : \u0022 GENERATED COUMENT IN MARKDOWN FORMAT\u0022 }\n\n-- Metadata object --\n\u003CTASK_INPUT\u003E",
  "TaskInput": "{\n  \u0022Name\u0022: \u0022VinylRecordsManager\u0022,\n  \u0022CreationRequirements\u0022: {\n    \u0022InitialRequirement\u0022: \u0022help me to manage my vinyl recors collection\u0022,\n    \u0022ReviewedRequirement\u0022: \u0022Design a software module to help users manage their vinyl record collections. The module should allow users to catalog their records, track their listening habits, and discover new music based on their collection. Users should be able to add, update, delete, and search records in their collection. The module should also provide insights into their collection, such as most listened-to records, genres, and artists. Additionally, the module should offer recommendations for new records based on the user\\u0027s existing collection.\u0022,\n    \u0022FunctionalDetails\u0022: [\n      \u0022Catalog vinyl records with detailed information\u0022,\n      \u0022Track listening habits and history\u0022,\n      \u0022Provide insights and statistics about the collection\u0022,\n      \u0022Offer recommendations for new records based on the collection\u0022\n    ],\n    \u0022UserInteraction\u0022: [\n      \u0022Add a new vinyl record to the collection\u0022,\n      \u0022Update or delete an existing record\u0022,\n      \u0022Search for records by various criteria (artist, genre, title, etc.)\u0022,\n      \u0022View statistics and insights about the collection\u0022,\n      \u0022Receive recommendations for new records\u0022\n    ],\n    \u0022MinimumFeatures\u0022: [\n      {\n        \u0022Description\u0022: \u0022CRUDS operations for vinyl records\u0022,\n        \u0022IsImplemented\u0022: true\n      },\n      {\n        \u0022Description\u0022: \u0022Basic search functionality\u0022,\n        \u0022IsImplemented\u0022: true\n      },\n      {\n        \u0022Description\u0022: \u0022Simple statistics (e.g., count of records by genre)\u0022,\n        \u0022IsImplemented\u0022: true\n      }\n    ],\n    \u0022GoodToHaveFeatures\u0022: [\n      {\n        \u0022Description\u0022: \u0022Advanced search with filters\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Detailed statistics and insights\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Listening history tracking\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Basic recommendation system\u0022,\n        \u0022IsImplemented\u0022: false\n      }\n    ],\n    \u0022BarRaiserFeatures\u0022: [\n      {\n        \u0022Description\u0022: \u0022Integration with music databases for automatic record information retrieval\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Social features (e.g., sharing collection with friends)\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Advanced recommendation system with machine learning\u0022,\n        \u0022IsImplemented\u0022: false\n      },\n      {\n        \u0022Description\u0022: \u0022Mobile app integration for barcode scanning\u0022,\n        \u0022IsImplemented\u0022: false\n      }\n    ],\n    \u0022DataModels\u0022: [\n      \u0022**VinylRecord**: { \\u0027id\\u0027: \\u0027string\\u0027, \\u0027title\\u0027: \\u0027string\\u0027, \\u0027artist\\u0027: \\u0027string\\u0027, \\u0027genre\\u0027: \\u0027string\\u0027, \\u0027release_year\\u0027: \\u0027number\\u0027, \\u0027condition\\u0027: \\u0027string\\u0027, \\u0027notes\\u0027: \\u0027string\\u0027, \\u0027cover_image_url\\u0027: \\u0027string\\u0027 }\u0022,\n      \u0022**ListeningSession**: { \\u0027id\\u0027: \\u0027string\\u0027, \\u0027record_id\\u0027: \\u0027string\\u0027, \\u0027date\\u0027: \\u0027date\\u0027, \\u0027duration\\u0027: \\u0027number\\u0027, \\u0027notes\\u0027: \\u0027string\\u0027 }\u0022,\n      \u0022**User**: { \\u0027id\\u0027: \\u0027string\\u0027, \\u0027name\\u0027: \\u0027string\\u0027, \\u0027email\\u0027: \\u0027string\\u0027, \\u0027preferences\\u0027: \\u0027object\\u0027 }\u0022,\n      \u0022**Recommendation**: { \\u0027id\\u0027: \\u0027string\\u0027, \\u0027record_id\\u0027: \\u0027string\\u0027, \\u0027user_id\\u0027: \\u0027string\\u0027, \\u0027reason\\u0027: \\u0027string\\u0027, \\u0027date\\u0027: \\u0027date\\u0027 }\u0022\n    ]\n  },\n  \u0022Version\u0022: {\n    \u0022Major\u0022: 0,\n    \u0022Minor\u0022: 1,\n    \u0022Patch\u0022: 0\n  },\n  \u0022IsInitialRequirementReviewed\u0022: true,\n  \u0022IsSourceCodeGenerated\u0022: true,\n  \u0022AreMinimumFeaturesImplemented\u0022: true,\n  \u0022AreGoodToHaveFeaturesImplemented\u0022: false,\n  \u0022AreBarRaiserFeaturesImplemented\u0022: false,\n  \u0022IsSourceCodeCompiled\u0022: true,\n  \u0022IsReadmeFileGenerated\u0022: false,\n  \u0022Description\u0022: \u0022Vinyl record collection manager with CRUD operations, listening session tracking, statistics, and genre-based recommendations\u0022,\n  \u0022RequiredAPIs\u0022: [],\n  \u0022RequiredNuGets\u0022: []\n}",
  "ModelRawResponse": "{\n  \u0022choices\u0022: [\n    {\n      \u0022message\u0022: {\n        \u0022content\u0022: \u0022\\u0060\\u0060\\u0060json\\n{\\n  \\u0022readme\\u0022: \\u0022# VinylRecordsManager\\\\n\\\\n## Overview\\\\nVinylRecordsManager is a software module designed to help music enthusiasts organize and analyze their vinyl record collections. The system provides core functionality for cataloging records, tracking listening sessions, and generating basic collection insights. As an initial release (v0.1.0), this version focuses on foundational features while laying the groundwork for future enhancements.\\\\n\\\\n## Features\\\\n### Implemented Features\\\\n\\u2705 **Core Collection Management**  \\\\n- CRUD operations for vinyl records  \\\\n- Basic search by artist, title, or genre  \\\\n- Simple statistics (record counts by genre)\\\\n\\\\n### Planned Features\\\\n\\uD83D\\uDD1C **Near-term Roadmap**  \\\\n- Advanced search filters  \\\\n- Detailed collection analytics  \\\\n- Listening history tracking  \\\\n- Basic recommendation engine\\\\n\\\\n\\uD83D\\uDD2E **Future Possibilities**  \\\\n- Music database API integration  \\\\n- Social sharing capabilities  \\\\n- Machine learning recommendations  \\\\n- Mobile scanning integration\\\\n\\\\n## Requirements\\\\nThis module requires:\\\\n- .NET 6.0 runtime or newer\\\\n- SQLite database (embedded)\\\\n\\\\n## Usage\\\\n### Basic Interactions\\\\n1. **Add Record**  \\\\n\\u0060CollectionManager.AddRecord(title: \\\\\\u0022Blue\\\\\\u0022, artist: \\\\\\u0022Joni Mitchell\\\\\\u0022, genre: \\\\\\u0022Folk\\\\\\u0022, year: 1971)\\u0060\\\\n\\\\n2. **Search Records**  \\\\n\\u0060var results = CollectionManager.Search(artist: \\\\\\u0022Beatles\\\\\\u0022, genre: \\\\\\u0022Rock\\\\\\u0022);\\u0060\\\\n\\\\n3. **View Statistics**  \\\\n\\u0060var genreStats = AnalyticsService.GetGenreDistribution();\\u0060\\\\n\\\\n## Data Models\\\\n### Core Entities\\\\n\\u0060\\u0060\\u0060csharp\\\\npublic class VinylRecord {\\\\n    public string Id { get; set; }\\\\n    public string Title { get; set; }\\\\n    public string Artist { get; set; }\\\\n    public string Genre { get; set; }\\\\n    public int ReleaseYear { get; set; }\\\\n    public string Condition { get; set; }\\\\n    public string Notes { get; set; }\\\\n}\\\\n\\\\npublic class ListeningSession {\\\\n    public string Id { get; set; }\\\\n    public string RecordId { get; set; }\\\\n    public DateTime Date { get; set; }\\\\n    public int DurationMinutes { get; set; }\\\\n}\\\\n\\u0060\\u0060\\u0060\\\\n\\\\n## Roadmap\\\\nThe module will evolve through three enhancement tiers:\\\\n1. **Collection Expansion**  \\\\n- Advanced filtering for decade/year ranges  \\\\n- Multiple condition grading systems\\\\n\\\\n2. **Listener Insights**  \\\\n- Listening frequency trends  \\\\n- Duration-based statistics\\\\n\\\\n3. **Connected Features**  \\\\n- Discogs API integration  \\\\n- Recommendation sharing system\\\\n\\u0022\\n}\\n\\u0060\\u0060\\u0060\u0022\n      }\n    }\n  ]\n}",
  "ResponseFormat": {
    "type": "object",
    "properties": {
      "readme": {
        "type": "string"
      }
    },
    "required": [
      "readme"
    ]
  },
  "ExecutionTimeMS": 25,
  "responseType": "SelfEvolvingSoftware.LLM.Tasks.Responses.GenerateReadmeFileLLMTaskResponse, PoC_1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
  "TaskUUID": "bf5ba32c-6e35-4516-965a-8604e32acc1f",
  "ModuleName": "VinylRecordsManager"
}