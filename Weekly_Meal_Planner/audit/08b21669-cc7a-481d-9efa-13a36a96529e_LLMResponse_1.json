
{"id":"48d39035-dc72-4b25-a22b-76c9b9f1fd3f","object":"chat.completion","created":1743764255,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Linq;\\nusing System.Text.Json;\\n\\npublic class MealPlannerModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Weekly Meal Planner\\\";\\n\\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Weekly Meal Planner module is running...\\\");\\n        \\n        try\\n        {\\n            // Ensure data directory exists\\n            Directory.CreateDirectory(dataFolder);\\n            \\n            // File paths\\n            string mealsFilePath = Path.Combine(dataFolder, \\\"meals.json\\\");\\n            string groceryListFilePath = Path.Combine(dataFolder, \\\"grocery_list.json\\\");\\n            \\n            // Sample meal data (could be loaded from file if exists)\\n            List<Meal> meals = LoadOrCreateMeals(mealsFilePath);\\n            \\n            // Generate weekly plan\\n            WeeklyPlan weeklyPlan = GenerateWeeklyPlan(meals);\\n            \\n            // Generate grocery list\\n            List<GroceryItem> groceryList = GenerateGroceryList(weeklyPlan);\\n            \\n            // Save data\\n            SaveWeeklyPlan(weeklyPlan, dataFolder);\\n            SaveGroceryList(groceryList, groceryListFilePath);\\n            \\n            // Display summary\\n            DisplaySummary(weeklyPlan, groceryList);\\n            \\n            return true;\\n        }\\n        catch (Exception ex)\\n        {\\n            Console.WriteLine(\\\"Error: \\\" + ex.Message);\\n            return false;\\n        }\\n    }\\n    \\n    private List<Meal> LoadOrCreateMeals(string filePath)\\n    {\\n        if (File.Exists(filePath))\\n        {\\n            string json = File.ReadAllText(filePath);\\n            return JsonSerializer.Deserialize<List<Meal>>(json);\\n        }\\n        \\n        // Create sample meals if file doesn't exist\\n        var meals = new List<Meal>\\n        {\\n            new Meal { Name = \\\"Grilled Chicken Salad\\\", Calories = 450, Ingredients = new List<string> { \\\"Chicken Breast\\\", \\\"Lettuce\\\", \\\"Tomato\\\", \\\"Cucumber\\\", \\\"Olive Oil\\\" } },\\n            new Meal { Name = \\\"Vegetable Stir Fry\\\", Calories = 350, Ingredients = new List<string> { \\\"Broccoli\\\", \\\"Carrots\\\", \\\"Bell Peppers\\\", \\\"Soy Sauce\\\", \\\"Rice\\\" } },\\n            new Meal { Name = \\\"Pasta Carbonara\\\", Calories = 600, Ingredients = new List<string> { \\\"Pasta\\\", \\\"Bacon\\\", \\\"Eggs\\\", \\\"Parmesan\\\", \\\"Black Pepper\\\" } },\\n            new Meal { Name = \\\"Beef Tacos\\\", Calories = 500, Ingredients = new List<string> { \\\"Ground Beef\\\", \\\"Taco Shells\\\", \\\"Lettuce\\\", \\\"Cheese\\\", \\\"Salsa\\\" } },\\n            new Meal { Name = \\\"Salmon with Vegetables\\\", Calories = 400, Ingredients = new List<string> { \\\"Salmon Fillet\\\", \\\"Asparagus\\\", \\\"Lemon\\\", \\\"Butter\\\", \\\"Potatoes\\\" } }\\n        };\\n        \\n        File.WriteAllText(filePath, JsonSerializer.Serialize(meals));\\n        return meals;\\n    }\\n    \\n    private WeeklyPlan GenerateWeeklyPlan(List<Meal> meals)\\n    {\\n        var random = new Random();\\n        var plan = new WeeklyPlan();\\n        \\n        var days = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>();\\n        \\n        foreach (var day in days)\\n        {\\n            // Select 2 different random meals for each day (lunch and dinner)\\n            var availableMeals = meals.Where(m => !plan.DailyPlans.Any(dp => dp.Meal1 == m || dp.Meal2 == m)).ToList();\\n            \\n            if (availableMeals.Count < 2)\\n                availableMeals = meals.ToList(); // Reset if we're running out of unique meals\\n            \\n            int index1 = random.Next(availableMeals.Count);\\n            int index2;\\n            do { index2 = random.Next(availableMeals.Count); } while (index2 == index1);\\n            \\n            plan.DailyPlans.Add(new DailyPlan \\n            { \\n                Day = day, \\n                Meal1 = availableMeals[index1], \\n                Meal2 = availableMeals[index2] \\n            });\\n        }\\n        \\n        return plan;\\n    }\\n    \\n    private List<GroceryItem> GenerateGroceryList(WeeklyPlan weeklyPlan)\\n    {\\n        var groceryItems = new Dictionary<string, GroceryItem>();\\n        \\n        foreach (var dayPlan in weeklyPlan.DailyPlans)\\n        {\\n            AddMealIngredientsToGroceryList(dayPlan.Meal1, groceryItems);\\n            AddMealIngredientsToGroceryList(dayPlan.Meal2, groceryItems);\\n        }\\n        \\n        return groceryItems.Values.ToList();\\n    }\\n    \\n    private void AddMealIngredientsToGroceryList(Meal meal, Dictionary<string, GroceryItem> groceryItems)\\n    {\\n        foreach (var ingredient in meal.Ingredients)\\n        {\\n            if (groceryItems.ContainsKey(ingredient))\\n            {\\n                groceryItems[ingredient].Quantity++;\\n            }\\n            else\\n            {\\n                groceryItems.Add(ingredient, new GroceryItem { Name = ingredient, Quantity = 1 });\\n            }\\n        }\\n    }\\n    \\n    private void SaveWeeklyPlan(WeeklyPlan plan, string dataFolder)\\n    {\\n        string filePath = Path.Combine(dataFolder, \\\"weekly_plan.json\\\");\\n        File.WriteAllText(filePath, JsonSerializer.Serialize(plan));\\n    }\\n    \\n    private void SaveGroceryList(List<GroceryItem> groceryList, string filePath)\\n    {\\n        File.WriteAllText(filePath, JsonSerializer.Serialize(groceryList));\\n    }\\n    \\n    private void DisplaySummary(WeeklyPlan weeklyPlan, List<GroceryItem> groceryList)\\n    {\\n        Console.WriteLine(\\\"\\\\n=== Weekly Meal Plan ===\\\");\\n        \\n        foreach (var dayPlan in weeklyPlan.DailyPlans)\\n        {\\n            Console.WriteLine(dayPlan.Day + \\\":\\\");\\n            Console.WriteLine(\\\"  Lunch: \\\" + dayPlan.Meal1.Name + \\\" (\\\" + dayPlan.Meal1.Calories + \\\" calories)\\\");\\n            Console.WriteLine(\\\"  Dinner: \\\" + dayPlan.Meal2.Name + \\\" (\\\" + dayPlan.Meal2.Calories + \\\" calories)\\\");\\n        }\\n        \\n        Console.WriteLine(\\\"\\\\nTotal estimated calories for the week: \\\" + \\n            weeklyPlan.DailyPlans.Sum(dp => dp.Meal1.Calories + dp.Meal2.Calories));\\n        \\n        Console.WriteLine(\\\"\\\\n=== Grocery List ===\\\");\\n        foreach (var item in groceryList.OrderBy(i => i.Name))\\n        {\\n            Console.WriteLine(item.Name + \\\" (x\\\" + item.Quantity + \\\")\\\");\\n        }\\n    }\\n}\\n\\npublic class Meal\\n{\\n    public string Name { get; set; }\\n    public int Calories { get; set; }\\n    public List<string> Ingredients { get; set; }\\n}\\n\\npublic class DailyPlan\\n{\\n    public DayOfWeek Day { get; set; }\\n    public Meal Meal1 { get; set; }\\n    public Meal Meal2 { get; set; }\\n}\\n\\npublic class WeeklyPlan\\n{\\n    public List<DailyPlan> DailyPlans { get; set; } = new List<DailyPlan>();\\n}\\n\\npublic class GroceryItem\\n{\\n    public string Name { get; set; }\\n    public int Quantity { get; set; }\\n}\",\n  \"name\": \"Weekly Meal Planner\",\n  \"description\": \"A module that generates weekly meal plans with calorie counts and corresponding grocery lists.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":521,"completion_tokens":1875,"total_tokens":2396,"prompt_tokens_details":{"cached_tokens":448},"prompt_cache_hit_tokens":448,"prompt_cache_miss_tokens":73},"system_fingerprint":"fp_3d5141a69a_prod0225"}