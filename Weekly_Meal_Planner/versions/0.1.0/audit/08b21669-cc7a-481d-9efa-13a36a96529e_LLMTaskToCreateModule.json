{"UseOnlineModel":true,"OfflineModel":"deepseek-r1:70b","OnlineModel":"deepseek-chat","Description":"","SystemPrompt":"You are a helpful assistant with high skills in software development. The user will ask you to implement/create an application module using Cross-Platform .NET 9 C# code that adheres to the following interface:\n\n\u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022\n\n### Requirements:\n- The generated code must avoid using external APIs if possible, in case an API is needed add it to the list of required APIS.\n_ If the generated code needs NuGets installed add the NuGet name to the list of required Nugets.\n- The response must be in JSON format.\n- The \u0060source_code\u0060 field must contain C# code only (avoid markdown notation).\n- Do not include the IGeneratedModule in the generated source code.\n- The generated code **must not include any instructions that begin with \u0060Console.WriteLine($\u0060**.\n- If data persistence is required, use JSON files stored in the \u0060dataFolder\u0060 parameter of the \u0060Main\u0060 method.\n- Ensure the generated module is as detailed and complete as possible.\n- The constructor of the generated module must not have any parameters.\n- The generated code MUST not call Exit method. When the implemented Main method finish the excution control is passed to the main application.\n- The generated code must print information in the console to let know the user the module is running.\n\n### Example output:\n{\u0022source_code\u0022:\u0022GENERATED C# CODE\u0022,\u0022name\u0022: \u0022GENERATED NAME FOR THE MODULE\u0022,\u0022description\u0022: \u0022GENERATED DESCRIPTION FOR THE MODULE\u0022, \u0022required_apis\u0022=[{\u0022API_1\u0022},{\u0022API_2\u0022}], , \u0022required_nugets\u0022=[{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_1\u0022,\u0022nuget_version\u0022:\u00221.0.0\u0022 },{ \u0022nuget_name\u0022:\u0022MISSING_NUGET_2\u0022,\u0022nuget_version\u0022:\u00222.0.0.0\u0022 }]}","BasePrompt":"Generate a Cross-Platform .NET 9 C# code that implements the next interface \u0022public interface IGeneratedModule { public string Name { get; set; } public bool Main(string dataFolder); }\u0022 the Main method is the start point for the module. The souce code will run on a console application. The generated code must not write strings to console like this Console.WriteLine($\u0022{variable}\u0022). The source code will be automaticallty compiled so avoid adding markdown notation or anything that is not c# code The module must: \u003CTASK_INPUT\u003E","TaskInput":"Plan weekly meals with calorie counts and grocery lists","ModelRawResponse":"\n{\u0022id\u0022:\u002248d39035-dc72-4b25-a22b-76c9b9f1fd3f\u0022,\u0022object\u0022:\u0022chat.completion\u0022,\u0022created\u0022:1743764255,\u0022model\u0022:\u0022deepseek-chat\u0022,\u0022choices\u0022:[{\u0022index\u0022:0,\u0022message\u0022:{\u0022role\u0022:\u0022assistant\u0022,\u0022content\u0022:\u0022\u0060\u0060\u0060json\\n{\\n  \\\u0022source_code\\\u0022: \\\u0022using System;\\\\nusing System.Collections.Generic;\\\\nusing System.IO;\\\\nusing System.Linq;\\\\nusing System.Text.Json;\\\\n\\\\npublic class MealPlannerModule : IGeneratedModule\\\\n{\\\\n    public string Name { get; set; } = \\\\\\\u0022Weekly Meal Planner\\\\\\\u0022;\\\\n\\\\n    public bool Main(string dataFolder)\\\\n    {\\\\n        Console.WriteLine(\\\\\\\u0022Weekly Meal Planner module is running...\\\\\\\u0022);\\\\n        \\\\n        try\\\\n        {\\\\n            // Ensure data directory exists\\\\n            Directory.CreateDirectory(dataFolder);\\\\n            \\\\n            // File paths\\\\n            string mealsFilePath = Path.Combine(dataFolder, \\\\\\\u0022meals.json\\\\\\\u0022);\\\\n            string groceryListFilePath = Path.Combine(dataFolder, \\\\\\\u0022grocery_list.json\\\\\\\u0022);\\\\n            \\\\n            // Sample meal data (could be loaded from file if exists)\\\\n            List\u003CMeal\u003E meals = LoadOrCreateMeals(mealsFilePath);\\\\n            \\\\n            // Generate weekly plan\\\\n            WeeklyPlan weeklyPlan = GenerateWeeklyPlan(meals);\\\\n            \\\\n            // Generate grocery list\\\\n            List\u003CGroceryItem\u003E groceryList = GenerateGroceryList(weeklyPlan);\\\\n            \\\\n            // Save data\\\\n            SaveWeeklyPlan(weeklyPlan, dataFolder);\\\\n            SaveGroceryList(groceryList, groceryListFilePath);\\\\n            \\\\n            // Display summary\\\\n            DisplaySummary(weeklyPlan, groceryList);\\\\n            \\\\n            return true;\\\\n        }\\\\n        catch (Exception ex)\\\\n        {\\\\n            Console.WriteLine(\\\\\\\u0022Error: \\\\\\\u0022 \u002B ex.Message);\\\\n            return false;\\\\n        }\\\\n    }\\\\n    \\\\n    private List\u003CMeal\u003E LoadOrCreateMeals(string filePath)\\\\n    {\\\\n        if (File.Exists(filePath))\\\\n        {\\\\n            string json = File.ReadAllText(filePath);\\\\n            return JsonSerializer.Deserialize\u003CList\u003CMeal\u003E\u003E(json);\\\\n        }\\\\n        \\\\n        // Create sample meals if file doesn\u0027t exist\\\\n        var meals = new List\u003CMeal\u003E\\\\n        {\\\\n            new Meal { Name = \\\\\\\u0022Grilled Chicken Salad\\\\\\\u0022, Calories = 450, Ingredients = new List\u003Cstring\u003E { \\\\\\\u0022Chicken Breast\\\\\\\u0022, \\\\\\\u0022Lettuce\\\\\\\u0022, \\\\\\\u0022Tomato\\\\\\\u0022, \\\\\\\u0022Cucumber\\\\\\\u0022, \\\\\\\u0022Olive Oil\\\\\\\u0022 } },\\\\n            new Meal { Name = \\\\\\\u0022Vegetable Stir Fry\\\\\\\u0022, Calories = 350, Ingredients = new List\u003Cstring\u003E { \\\\\\\u0022Broccoli\\\\\\\u0022, \\\\\\\u0022Carrots\\\\\\\u0022, \\\\\\\u0022Bell Peppers\\\\\\\u0022, \\\\\\\u0022Soy Sauce\\\\\\\u0022, \\\\\\\u0022Rice\\\\\\\u0022 } },\\\\n            new Meal { Name = \\\\\\\u0022Pasta Carbonara\\\\\\\u0022, Calories = 600, Ingredients = new List\u003Cstring\u003E { \\\\\\\u0022Pasta\\\\\\\u0022, \\\\\\\u0022Bacon\\\\\\\u0022, \\\\\\\u0022Eggs\\\\\\\u0022, \\\\\\\u0022Parmesan\\\\\\\u0022, \\\\\\\u0022Black Pepper\\\\\\\u0022 } },\\\\n            new Meal { Name = \\\\\\\u0022Beef Tacos\\\\\\\u0022, Calories = 500, Ingredients = new List\u003Cstring\u003E { \\\\\\\u0022Ground Beef\\\\\\\u0022, \\\\\\\u0022Taco Shells\\\\\\\u0022, \\\\\\\u0022Lettuce\\\\\\\u0022, \\\\\\\u0022Cheese\\\\\\\u0022, \\\\\\\u0022Salsa\\\\\\\u0022 } },\\\\n            new Meal { Name = \\\\\\\u0022Salmon with Vegetables\\\\\\\u0022, Calories = 400, Ingredients = new List\u003Cstring\u003E { \\\\\\\u0022Salmon Fillet\\\\\\\u0022, \\\\\\\u0022Asparagus\\\\\\\u0022, \\\\\\\u0022Lemon\\\\\\\u0022, \\\\\\\u0022Butter\\\\\\\u0022, \\\\\\\u0022Potatoes\\\\\\\u0022 } }\\\\n        };\\\\n        \\\\n        File.WriteAllText(filePath, JsonSerializer.Serialize(meals));\\\\n        return meals;\\\\n    }\\\\n    \\\\n    private WeeklyPlan GenerateWeeklyPlan(List\u003CMeal\u003E meals)\\\\n    {\\\\n        var random = new Random();\\\\n        var plan = new WeeklyPlan();\\\\n        \\\\n        var days = Enum.GetValues(typeof(DayOfWeek)).Cast\u003CDayOfWeek\u003E();\\\\n        \\\\n        foreach (var day in days)\\\\n        {\\\\n            // Select 2 different random meals for each day (lunch and dinner)\\\\n            var availableMeals = meals.Where(m =\u003E !plan.DailyPlans.Any(dp =\u003E dp.Meal1 == m || dp.Meal2 == m)).ToList();\\\\n            \\\\n            if (availableMeals.Count \u003C 2)\\\\n                availableMeals = meals.ToList(); // Reset if we\u0027re running out of unique meals\\\\n            \\\\n            int index1 = random.Next(availableMeals.Count);\\\\n            int index2;\\\\n            do { index2 = random.Next(availableMeals.Count); } while (index2 == index1);\\\\n            \\\\n            plan.DailyPlans.Add(new DailyPlan \\\\n            { \\\\n                Day = day, \\\\n                Meal1 = availableMeals[index1], \\\\n                Meal2 = availableMeals[index2] \\\\n            });\\\\n        }\\\\n        \\\\n        return plan;\\\\n    }\\\\n    \\\\n    private List\u003CGroceryItem\u003E GenerateGroceryList(WeeklyPlan weeklyPlan)\\\\n    {\\\\n        var groceryItems = new Dictionary\u003Cstring, GroceryItem\u003E();\\\\n        \\\\n        foreach (var dayPlan in weeklyPlan.DailyPlans)\\\\n        {\\\\n            AddMealIngredientsToGroceryList(dayPlan.Meal1, groceryItems);\\\\n            AddMealIngredientsToGroceryList(dayPlan.Meal2, groceryItems);\\\\n        }\\\\n        \\\\n        return groceryItems.Values.ToList();\\\\n    }\\\\n    \\\\n    private void AddMealIngredientsToGroceryList(Meal meal, Dictionary\u003Cstring, GroceryItem\u003E groceryItems)\\\\n    {\\\\n        foreach (var ingredient in meal.Ingredients)\\\\n        {\\\\n            if (groceryItems.ContainsKey(ingredient))\\\\n            {\\\\n                groceryItems[ingredient].Quantity\u002B\u002B;\\\\n            }\\\\n            else\\\\n            {\\\\n                groceryItems.Add(ingredient, new GroceryItem { Name = ingredient, Quantity = 1 });\\\\n            }\\\\n        }\\\\n    }\\\\n    \\\\n    private void SaveWeeklyPlan(WeeklyPlan plan, string dataFolder)\\\\n    {\\\\n        string filePath = Path.Combine(dataFolder, \\\\\\\u0022weekly_plan.json\\\\\\\u0022);\\\\n        File.WriteAllText(filePath, JsonSerializer.Serialize(plan));\\\\n    }\\\\n    \\\\n    private void SaveGroceryList(List\u003CGroceryItem\u003E groceryList, string filePath)\\\\n    {\\\\n        File.WriteAllText(filePath, JsonSerializer.Serialize(groceryList));\\\\n    }\\\\n    \\\\n    private void DisplaySummary(WeeklyPlan weeklyPlan, List\u003CGroceryItem\u003E groceryList)\\\\n    {\\\\n        Console.WriteLine(\\\\\\\u0022\\\\\\\\n=== Weekly Meal Plan ===\\\\\\\u0022);\\\\n        \\\\n        foreach (var dayPlan in weeklyPlan.DailyPlans)\\\\n        {\\\\n            Console.WriteLine(dayPlan.Day \u002B \\\\\\\u0022:\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u0022  Lunch: \\\\\\\u0022 \u002B dayPlan.Meal1.Name \u002B \\\\\\\u0022 (\\\\\\\u0022 \u002B dayPlan.Meal1.Calories \u002B \\\\\\\u0022 calories)\\\\\\\u0022);\\\\n            Console.WriteLine(\\\\\\\u0022  Dinner: \\\\\\\u0022 \u002B dayPlan.Meal2.Name \u002B \\\\\\\u0022 (\\\\\\\u0022 \u002B dayPlan.Meal2.Calories \u002B \\\\\\\u0022 calories)\\\\\\\u0022);\\\\n        }\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022\\\\\\\\nTotal estimated calories for the week: \\\\\\\u0022 \u002B \\\\n            weeklyPlan.DailyPlans.Sum(dp =\u003E dp.Meal1.Calories \u002B dp.Meal2.Calories));\\\\n        \\\\n        Console.WriteLine(\\\\\\\u0022\\\\\\\\n=== Grocery List ===\\\\\\\u0022);\\\\n        foreach (var item in groceryList.OrderBy(i =\u003E i.Name))\\\\n        {\\\\n            Console.WriteLine(item.Name \u002B \\\\\\\u0022 (x\\\\\\\u0022 \u002B item.Quantity \u002B \\\\\\\u0022)\\\\\\\u0022);\\\\n        }\\\\n    }\\\\n}\\\\n\\\\npublic class Meal\\\\n{\\\\n    public string Name { get; set; }\\\\n    public int Calories { get; set; }\\\\n    public List\u003Cstring\u003E Ingredients { get; set; }\\\\n}\\\\n\\\\npublic class DailyPlan\\\\n{\\\\n    public DayOfWeek Day { get; set; }\\\\n    public Meal Meal1 { get; set; }\\\\n    public Meal Meal2 { get; set; }\\\\n}\\\\n\\\\npublic class WeeklyPlan\\\\n{\\\\n    public List\u003CDailyPlan\u003E DailyPlans { get; set; } = new List\u003CDailyPlan\u003E();\\\\n}\\\\n\\\\npublic class GroceryItem\\\\n{\\\\n    public string Name { get; set; }\\\\n    public int Quantity { get; set; }\\\\n}\\\u0022,\\n  \\\u0022name\\\u0022: \\\u0022Weekly Meal Planner\\\u0022,\\n  \\\u0022description\\\u0022: \\\u0022A module that generates weekly meal plans with calorie counts and corresponding grocery lists.\\\u0022,\\n  \\\u0022required_apis\\\u0022: [],\\n  \\\u0022required_nugets\\\u0022: []\\n}\\n\u0060\u0060\u0060\u0022},\u0022logprobs\u0022:null,\u0022finish_reason\u0022:\u0022stop\u0022}],\u0022usage\u0022:{\u0022prompt_tokens\u0022:521,\u0022completion_tokens\u0022:1875,\u0022total_tokens\u0022:2396,\u0022prompt_tokens_details\u0022:{\u0022cached_tokens\u0022:448},\u0022prompt_cache_hit_tokens\u0022:448,\u0022prompt_cache_miss_tokens\u0022:73},\u0022system_fingerprint\u0022:\u0022fp_3d5141a69a_prod0225\u0022}","ResponseFormat":{"type":"object","properties":{"name":{"type":"string"},"description":{"type":"string"},"source_code":{"type":"string"},"required_apis":{"type":"array","items":{"type":"string"}},"required_nugets":{"type":"array","items":{"type":"object","properties":{"nuget_name":{"type":"string"},"nuget_version":{"type":"string"}}}}},"required":["name","description","source_code"]},"CreationTime":"2025-04-04T10:57:34.853017Z","CompletionTime":"2025-04-04T10:58:59.441604Z","responseType":null,"TaskUUID":"08b21669-cc7a-481d-9efa-13a36a96529e","ModuleName":"ModuleCreator"}