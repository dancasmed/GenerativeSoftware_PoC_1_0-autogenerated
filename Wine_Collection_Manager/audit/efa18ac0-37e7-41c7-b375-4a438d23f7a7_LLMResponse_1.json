
{"id":"a78bb975-1ede-4ad8-aa33-63c4e9425ad8","object":"chat.completion","created":1743799941,"model":"deepseek-chat","choices":[{"index":0,"message":{"role":"assistant","content":"```json\n{\n  \"source_code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.IO;\\nusing System.Text.Json;\\n\\npublic class WineCollectionModule : IGeneratedModule\\n{\\n    public string Name { get; set; } = \\\"Wine Collection Manager\\\";\\n    \\n    private string _dataFilePath;\\n    \\n    public WineCollectionModule()\\n    {\\n    }\\n    \\n    public bool Main(string dataFolder)\\n    {\\n        Console.WriteLine(\\\"Starting Wine Collection Manager module...\\\");\\n        \\n        _dataFilePath = Path.Combine(dataFolder, \\\"winecollection.json\\\");\\n        \\n        if (!Directory.Exists(dataFolder))\\n        {\\n            Directory.CreateDirectory(dataFolder);\\n        }\\n        \\n        List<Wine> wines = LoadWines();\\n        \\n        bool running = true;\\n        while (running)\\n        {\\n            Console.WriteLine(\\\"\\\\nWine Collection Manager\\\");\\n            Console.WriteLine(\\\"1. Add new wine\\\");\\n            Console.WriteLine(\\\"2. View all wines\\\");\\n            Console.WriteLine(\\\"3. Search wines\\\");\\n            Console.WriteLine(\\\"4. Exit\\\");\\n            Console.Write(\\\"Select an option: \\\");\\n            \\n            string input = Console.ReadLine();\\n            \\n            switch (input)\\n            {\\n                case \\\"1\\\":\\n                    AddWine(wines);\\n                    break;\\n                case \\\"2\\\":\\n                    DisplayAllWines(wines);\\n                    break;\\n                case \\\"3\\\":\\n                    SearchWines(wines);\\n                    break;\\n                case \\\"4\\\":\\n                    running = false;\\n                    break;\\n                default:\\n                    Console.WriteLine(\\\"Invalid option. Please try again.\\\");\\n                    break;\\n            }\\n        }\\n        \\n        SaveWines(wines);\\n        Console.WriteLine(\\\"Wine collection saved. Exiting module...\\\");\\n        return true;\\n    }\\n    \\n    private List<Wine> LoadWines()\\n    {\\n        if (File.Exists(_dataFilePath))\\n        {\\n            string json = File.ReadAllText(_dataFilePath);\\n            return JsonSerializer.Deserialize<List<Wine>>(json) ?? new List<Wine>();\\n        }\\n        return new List<Wine>();\\n    }\\n    \\n    private void SaveWines(List<Wine> wines)\\n    {\\n        string json = JsonSerializer.Serialize(wines, new JsonSerializerOptions { WriteIndented = true });\\n        File.WriteAllText(_dataFilePath, json);\\n    }\\n    \\n    private void AddWine(List<Wine> wines)\\n    {\\n        Console.WriteLine(\\\"\\\\nAdd New Wine\\\");\\n        \\n        Wine wine = new Wine();\\n        \\n        Console.Write(\\\"Name: \\\");\\n        wine.Name = Console.ReadLine();\\n        \\n        Console.Write(\\\"Type (Red/White/Rose/Sparkling): \\\");\\n        wine.Type = Console.ReadLine();\\n        \\n        Console.Write(\\\"Year: \\\");\\n        if (int.TryParse(Console.ReadLine(), out int year))\\n        {\\n            wine.Year = year;\\n        }\\n        \\n        Console.Write(\\\"Region: \\\");\\n        wine.Region = Console.ReadLine();\\n        \\n        Console.Write(\\\"Tasting Notes: \\\");\\n        wine.TastingNotes = Console.ReadLine();\\n        \\n        Console.Write(\\\"Rating (1-10): \\\");\\n        if (int.TryParse(Console.ReadLine(), out int rating) && rating >= 1 && rating <= 10)\\n        {\\n            wine.Rating = rating;\\n        }\\n        else\\n        {\\n            wine.Rating = 5;\\n        }\\n        \\n        wines.Add(wine);\\n        Console.WriteLine(\\\"Wine added successfully!\\\");\\n    }\\n    \\n    private void DisplayAllWines(List<Wine> wines)\\n    {\\n        Console.WriteLine(\\\"\\\\nAll Wines in Collection:\\\");\\n        \\n        if (wines.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No wines in collection yet.\\\");\\n            return;\\n        }\\n        \\n        foreach (var wine in wines)\\n        {\\n            DisplayWineDetails(wine);\\n        }\\n    }\\n    \\n    private void SearchWines(List<Wine> wines)\\n    {\\n        Console.WriteLine(\\\"\\\\nSearch Wines\\\");\\n        Console.WriteLine(\\\"1. By Name\\\");\\n        Console.WriteLine(\\\"2. By Type\\\");\\n        Console.WriteLine(\\\"3. By Region\\\");\\n        Console.WriteLine(\\\"4. By Rating\\\");\\n        Console.Write(\\\"Select search option: \\\");\\n        \\n        string input = Console.ReadLine();\\n        \\n        switch (input)\\n        {\\n            case \\\"1\\\":\\n                Console.Write(\\\"Enter name to search: \\\");\\n                string name = Console.ReadLine();\\n                SearchByName(wines, name);\\n                break;\\n            case \\\"2\\\":\\n                Console.Write(\\\"Enter type to search: \\\");\\n                string type = Console.ReadLine();\\n                SearchByType(wines, type);\\n                break;\\n            case \\\"3\\\":\\n                Console.Write(\\\"Enter region to search: \\\");\\n                string region = Console.ReadLine();\\n                SearchByRegion(wines, region);\\n                break;\\n            case \\\"4\\\":\\n                Console.Write(\\\"Enter minimum rating (1-10): \\\");\\n                if (int.TryParse(Console.ReadLine(), out int rating))\\n                {\\n                    SearchByRating(wines, rating);\\n                }\\n                else\\n                {\\n                    Console.WriteLine(\\\"Invalid rating value.\\\");\\n                }\\n                break;\\n            default:\\n                Console.WriteLine(\\\"Invalid option.\\\");\\n                break;\\n        }\\n    }\\n    \\n    private void SearchByName(List<Wine> wines, string name)\\n    {\\n        var results = wines.FindAll(w => w.Name.Contains(name, StringComparison.OrdinalIgnoreCase));\\n        DisplaySearchResults(results, \\\"Name\\\", name);\\n    }\\n    \\n    private void SearchByType(List<Wine> wines, string type)\\n    {\\n        var results = wines.FindAll(w => w.Type.Contains(type, StringComparison.OrdinalIgnoreCase));\\n        DisplaySearchResults(results, \\\"Type\\\", type);\\n    }\\n    \\n    private void SearchByRegion(List<Wine> wines, string region)\\n    {\\n        var results = wines.FindAll(w => w.Region.Contains(region, StringComparison.OrdinalIgnoreCase));\\n        DisplaySearchResults(results, \\\"Region\\\", region);\\n    }\\n    \\n    private void SearchByRating(List<Wine> wines, int minRating)\\n    {\\n        var results = wines.FindAll(w => w.Rating >= minRating);\\n        DisplaySearchResults(results, \\\"Rating\\\", minRating.ToString());\\n    }\\n    \\n    private void DisplaySearchResults(List<Wine> results, string searchType, string searchValue)\\n    {\\n        Console.WriteLine(\\\"\\\\nSearch Results ({0}: {1}):\\\", searchType, searchValue);\\n        \\n        if (results.Count == 0)\\n        {\\n            Console.WriteLine(\\\"No wines found matching your criteria.\\\");\\n            return;\\n        }\\n        \\n        foreach (var wine in results)\\n        {\\n            DisplayWineDetails(wine);\\n        }\\n    }\\n    \\n    private void DisplayWineDetails(Wine wine)\\n    {\\n        Console.WriteLine(\\\"\\\\nName: {0}\\\", wine.Name);\\n        Console.WriteLine(\\\"Type: {0}\\\", wine.Type);\\n        Console.WriteLine(\\\"Year: {0}\\\", wine.Year);\\n        Console.WriteLine(\\\"Region: {0}\\\", wine.Region);\\n        Console.WriteLine(\\\"Tasting Notes: {0}\\\", wine.TastingNotes);\\n        Console.WriteLine(\\\"Rating: {0}/10\\\", wine.Rating);\\n        Console.WriteLine(\\\"----------------------------\\\");\\n    }\\n}\\n\\npublic class Wine\\n{\\n    public string Name { get; set; } = string.Empty;\\n    public string Type { get; set; } = string.Empty;\\n    public int Year { get; set; } = DateTime.Now.Year;\\n    public string Region { get; set; } = string.Empty;\\n    public string TastingNotes { get; set; } = string.Empty;\\n    public int Rating { get; set; } = 5;\\n}\",\n  \"name\": \"Wine Collection Manager\",\n  \"description\": \"A module for managing a wine collection with tasting notes and ratings. Allows adding, viewing, and searching wines by various criteria.\",\n  \"required_apis\": [],\n  \"required_nugets\": []\n}\n```"},"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":522,"completion_tokens":2045,"total_tokens":2567,"prompt_tokens_details":{"cached_tokens":512},"prompt_cache_hit_tokens":512,"prompt_cache_miss_tokens":10},"system_fingerprint":"fp_3d5141a69a_prod0225"}